
gp2.elf:     file format elf32-littlenios2
gp2.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00008230

Program Header:
    LOAD off    0x00001000 vaddr 0x00008000 paddr 0x00008000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00008020 paddr 0x00008020 align 2**12
         filesz 0x0000289c memsz 0x0000289c flags r-x
    LOAD off    0x000038bc vaddr 0x0000a8bc paddr 0x0000ab9c align 2**12
         filesz 0x000002e0 memsz 0x000002e0 flags rw-
    LOAD off    0x00003e7c vaddr 0x0000ae7c paddr 0x0000ae7c align 2**12
         filesz 0x00000000 memsz 0x00000120 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00008000  00008000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  00008020  00008020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00002644  00008230  00008230  00001230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000048  0000a874  0000a874  00003874  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000002e0  0000a8bc  0000ab9c  000038bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000120  0000ae7c  0000ae7c  00003e7c  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory 00000000  0000af9c  0000af9c  00003b9c  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00003b9c  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000630  00000000  00000000  00003bc0  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00007d24  00000000  00000000  000041f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00002c12  00000000  00000000  0000bf14  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00003073  00000000  00000000  0000eb26  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000bb4  00000000  00000000  00011b9c  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00001e0d  00000000  00000000  00012750  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00001543  00000000  00000000  0001455d  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  00015aa0  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000002a8  00000000  00000000  00015ab0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  000177b6  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  000177b9  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  000177bc  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  000177bd  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  000177be  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    0000000b  00000000  00000000  000177c9  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  000177d4  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 00000007  00000000  00000000  000177df  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 0000002a  00000000  00000000  000177e6  2**0
                  CONTENTS, READONLY
 26 .jdi          00004688  00000000  00000000  00017810  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     00071566  00000000  00000000  0001be98  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00008000 l    d  .entry	00000000 .entry
00008020 l    d  .exceptions	00000000 .exceptions
00008230 l    d  .text	00000000 .text
0000a874 l    d  .rodata	00000000 .rodata
0000a8bc l    d  .rwdata	00000000 .rwdata
0000ae7c l    d  .bss	00000000 .bss
0000af9c l    d  .onchip_memory	00000000 .onchip_memory
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../gp2_bsp//obj/HAL/src/crt0.o
00008268 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 gp2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 vfprintf.c
00008874 l     F .text	0000006c print_repeat
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
0000a8bc l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_load.c
00008f7c l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_write.c
000090e4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00009220 l     F .text	00000034 alt_dev_reg
0000a99c l     O .rwdata	0000002c jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00009518 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_close.c
0000960c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00009740 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0000976c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00009bcc l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00009d2c l     F .text	0000003c alt_get_errno
00009d68 l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
0000ae98 g     O .bss	00000004 alt_instruction_exception_handler
00009068 g     F .text	0000007c alt_main
0000ae9c g     O .bss	00000100 alt_irq
0000ab9c g       *ABS*	00000000 __flash_rwdata_start
00008828 g     F .text	0000004c printf
0000a1d8 g     F .text	00000024 altera_nios2_gen2_irq_init
00008000 g     F .entry	0000000c __reset
00008020 g       *ABS*	00000000 __flash_exceptions_start
0000ae7c g     O .bss	00000004 errno
0000ae84 g     O .bss	00000004 alt_argv
00012b70 g       *ABS*	00000000 _gp
0000a9f0 g     O .rwdata	00000180 alt_fd_list
0000a1fc g     F .text	00000090 alt_find_dev
00009cb0 g     F .text	0000007c alt_io_redirect
0000a874 g       *ABS*	00000000 __DTOR_END__
0000a458 g     F .text	0000009c alt_exception_cause_generated_bad_addr
00009398 g     F .text	000000ec altera_avalon_jtag_uart_read
000087ec g     F .text	0000003c _printf_r
00008730 g     F .text	00000064 .hidden __udivsi3
0000826c g     F .text	0000011c display7
0000ab88 g     O .rwdata	00000004 alt_max_fd
0000ab70 g     O .rwdata	00000004 _global_impure_ptr
0000af9c g       *ABS*	00000000 __bss_end
00009adc g     F .text	000000f0 alt_iic_isr_register
0000a0d0 g     F .text	00000108 alt_tick
00009a90 g     F .text	0000004c alt_ic_irq_enabled
0000a034 g     F .text	0000009c alt_alarm_stop
0000ae8c g     O .bss	00000004 alt_irq_active
000080fc g     F .exceptions	000000d4 alt_irq_handler
0000a9c8 g     O .rwdata	00000028 alt_dev_null
00009720 g     F .text	00000020 alt_dcache_flush_all
0000ab9c g       *ABS*	00000000 __ram_rwdata_end
00008000 g       *ABS*	00000000 __alt_mem_onchip_memory
0000ab80 g     O .rwdata	00000008 alt_dev_list
00009120 g     F .text	00000100 write
0000a8bc g       *ABS*	00000000 __ram_rodata_end
00008794 g     F .text	00000058 .hidden __umodsi3
0000af9c g       *ABS*	00000000 end
000081d0 g     F .exceptions	00000060 alt_instruction_exception_entry
0000a874 g       *ABS*	00000000 __CTOR_LIST__
0000d000 g       *ABS*	00000000 __alt_stack_pointer
00009590 g     F .text	0000007c alt_avalon_timer_sc_init
00009484 g     F .text	00000094 altera_avalon_jtag_uart_write
000088e0 g     F .text	0000052c ___vfprintf_internal_r
0000a6b0 g     F .text	00000190 __call_exitprocs
00008230 g     F .text	0000003c _start
0000ae90 g     O .bss	00000004 _alt_tick_rate
0000ae94 g     O .bss	00000004 _alt_nticks
0000928c g     F .text	0000004c alt_sys_init
0000a558 g     F .text	00000158 __register_exitproc
00008f54 g     F .text	00000028 .hidden __mulsi3
0000a8bc g       *ABS*	00000000 __ram_rwdata_start
0000a874 g       *ABS*	00000000 __ram_rodata_start
000092d8 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0000a394 g     F .text	000000c4 alt_get_fd
0000a528 g     F .text	00000030 memcmp
0000af9c g       *ABS*	00000000 __alt_stack_base
0000a28c g     F .text	00000108 alt_find_file
000097a8 g     F .text	000000a4 alt_dev_llist_insert
00008e28 g     F .text	000000b8 __sfvwrite_small_dev
0000ae7c g       *ABS*	00000000 __bss_start
00008388 g     F .text	000002b0 main
0000ae88 g     O .bss	00000004 alt_envp
00009338 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0000ab8c g     O .rwdata	00000004 alt_errno
00008638 g     F .text	00000084 .hidden __divsi3
0000a874 g       *ABS*	00000000 __CTOR_END__
0000a874 g       *ABS*	00000000 __flash_rodata_start
0000a874 g       *ABS*	00000000 __DTOR_LIST__
00009254 g     F .text	00000038 alt_irq_init
00009fb0 g     F .text	00000084 alt_release_fd
0000a4f4 g     F .text	00000014 atexit
00008efc g     F .text	00000058 _write_r
0000ab74 g     O .rwdata	00000004 _impure_ptr
0000ae80 g     O .bss	00000004 alt_argc
000098ac g     F .text	00000060 _do_dtors
00008020 g       .exceptions	00000000 alt_irq_entry
0000ab78 g     O .rwdata	00000008 alt_fs_list
00008020 g       *ABS*	00000000 __ram_exceptions_start
0000992c g     F .text	00000050 alt_ic_isr_register
0000ab9c g       *ABS*	00000000 _edata
0000af9c g       *ABS*	00000000 _end
00008230 g       *ABS*	00000000 __ram_exceptions_end
00009a04 g     F .text	0000008c alt_ic_irq_disable
0000a508 g     F .text	00000020 exit
000086bc g     F .text	00000074 .hidden __modsi3
0000d000 g       *ABS*	00000000 __alt_data_end
00008020 g     F .exceptions	00000000 alt_exception
0000a840 g     F .text	00000034 _exit
00008ee0 g     F .text	0000001c strlen
00009e54 g     F .text	0000015c open
0000990c g     F .text	00000020 alt_icache_flush_all
0000ab90 g     O .rwdata	00000004 alt_priority_mask
0000997c g     F .text	00000088 alt_ic_irq_enable
00008e0c g     F .text	0000001c __vfprintf_internal
0000ab94 g     O .rwdata	00000008 alt_alarm_list
0000984c g     F .text	00000060 _do_ctors
00009648 g     F .text	000000d8 close
00008fe4 g     F .text	00000084 alt_load



Disassembly of section .entry:

00008000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
    8000:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
    8004:	08608c14 	ori	at,at,33328
    jmp r1
    8008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00008020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
    8020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
    8024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
    8028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
    802c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
    8030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
    8034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
    8038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
    803c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
    8040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
    8044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
    8048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
    804c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
    8050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
    8054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
    8058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
    805c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
    8060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
    8064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
    8068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
    806c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
    8070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
    8074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
    8078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
    807c:	10000326 	beq	r2,zero,808c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
    8080:	20000226 	beq	r4,zero,808c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
    8084:	00080fc0 	call	80fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
    8088:	00000706 	br	80a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
    808c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
    8090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
    8094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
    8098:	00081d00 	call	81d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
    809c:	1000021e 	bne	r2,zero,80a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
    80a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
    80a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
    80a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
    80ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
    80b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
    80b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
    80b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
    80bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
    80c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
    80c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
    80c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
    80cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
    80d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
    80d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
    80d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
    80dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
    80e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
    80e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
    80e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
    80ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
    80f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
    80f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
    80f8:	ef80083a 	eret

000080fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
    80fc:	defff904 	addi	sp,sp,-28
    8100:	dfc00615 	stw	ra,24(sp)
    8104:	df000515 	stw	fp,20(sp)
    8108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
    810c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
    8110:	0005313a 	rdctl	r2,ipending
    8114:	e0bffe15 	stw	r2,-8(fp)

  return active;
    8118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
    811c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
    8120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
    8124:	00800044 	movi	r2,1
    8128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
    812c:	e0fffb17 	ldw	r3,-20(fp)
    8130:	e0bffc17 	ldw	r2,-16(fp)
    8134:	1884703a 	and	r2,r3,r2
    8138:	10001426 	beq	r2,zero,818c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
    813c:	00800074 	movhi	r2,1
    8140:	10aba704 	addi	r2,r2,-20836
    8144:	e0fffd17 	ldw	r3,-12(fp)
    8148:	180690fa 	slli	r3,r3,3
    814c:	10c5883a 	add	r2,r2,r3
    8150:	10c00017 	ldw	r3,0(r2)
    8154:	00800074 	movhi	r2,1
    8158:	10aba704 	addi	r2,r2,-20836
    815c:	e13ffd17 	ldw	r4,-12(fp)
    8160:	200890fa 	slli	r4,r4,3
    8164:	1105883a 	add	r2,r2,r4
    8168:	10800104 	addi	r2,r2,4
    816c:	10800017 	ldw	r2,0(r2)
    8170:	1009883a 	mov	r4,r2
    8174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
    8178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
    817c:	0005313a 	rdctl	r2,ipending
    8180:	e0bfff15 	stw	r2,-4(fp)

  return active;
    8184:	e0bfff17 	ldw	r2,-4(fp)
    8188:	00000706 	br	81a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
    818c:	e0bffc17 	ldw	r2,-16(fp)
    8190:	1085883a 	add	r2,r2,r2
    8194:	e0bffc15 	stw	r2,-16(fp)
      i++;
    8198:	e0bffd17 	ldw	r2,-12(fp)
    819c:	10800044 	addi	r2,r2,1
    81a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
    81a4:	003fe106 	br	812c <_gp+0xffff55bc>

    active = alt_irq_pending ();
    81a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
    81ac:	e0bffb17 	ldw	r2,-20(fp)
    81b0:	103fdb1e 	bne	r2,zero,8120 <_gp+0xffff55b0>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
    81b4:	0001883a 	nop
}
    81b8:	0001883a 	nop
    81bc:	e037883a 	mov	sp,fp
    81c0:	dfc00117 	ldw	ra,4(sp)
    81c4:	df000017 	ldw	fp,0(sp)
    81c8:	dec00204 	addi	sp,sp,8
    81cc:	f800283a 	ret

000081d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
    81d0:	defffb04 	addi	sp,sp,-20
    81d4:	dfc00415 	stw	ra,16(sp)
    81d8:	df000315 	stw	fp,12(sp)
    81dc:	df000304 	addi	fp,sp,12
    81e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
    81e4:	00bfffc4 	movi	r2,-1
    81e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
    81ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
    81f0:	d0a0ca17 	ldw	r2,-31960(gp)
    81f4:	10000726 	beq	r2,zero,8214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
    81f8:	d0a0ca17 	ldw	r2,-31960(gp)
    81fc:	e0fffd17 	ldw	r3,-12(fp)
    8200:	e1bffe17 	ldw	r6,-8(fp)
    8204:	e17fff17 	ldw	r5,-4(fp)
    8208:	1809883a 	mov	r4,r3
    820c:	103ee83a 	callr	r2
    8210:	00000206 	br	821c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
    8214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
    8218:	0005883a 	mov	r2,zero
}
    821c:	e037883a 	mov	sp,fp
    8220:	dfc00117 	ldw	ra,4(sp)
    8224:	df000017 	ldw	fp,0(sp)
    8228:	dec00204 	addi	sp,sp,8
    822c:	f800283a 	ret

Disassembly of section .text:

00008230 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    8230:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
    8234:	def40014 	ori	sp,sp,53248
    movhi gp, %hi(_gp)
    8238:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
    823c:	d68adc14 	ori	gp,gp,11120
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    8240:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    8244:	10ab9f14 	ori	r2,r2,44668

    movhi r3, %hi(__bss_end)
    8248:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    824c:	18ebe714 	ori	r3,r3,44956

    beq r2, r3, 1f
    8250:	10c00326 	beq	r2,r3,8260 <_start+0x30>

0:
    stw zero, (r2)
    8254:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    8258:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    825c:	10fffd36 	bltu	r2,r3,8254 <_gp+0xffff56e4>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
    8260:	0008fe40 	call	8fe4 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    8264:	00090680 	call	9068 <alt_main>

00008268 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    8268:	003fff06 	br	8268 <_gp+0xffff56f8>

0000826c <display7>:
#include "system.h"
#include "altera_avalon_pio_regs.h"
#include <inttypes.h>

void display7(int address, int number)
{
    826c:	defffc04 	addi	sp,sp,-16
    8270:	df000315 	stw	fp,12(sp)
    8274:	df000304 	addi	fp,sp,12
    8278:	e13ffe15 	stw	r4,-8(fp)
    827c:	e17fff15 	stw	r5,-4(fp)
	int hex = 0x0000000;
    8280:	e03ffd15 	stw	zero,-12(fp)
	if (number == 0)
    8284:	e0bfff17 	ldw	r2,-4(fp)
    8288:	1000031e 	bne	r2,zero,8298 <display7+0x2c>
		hex = 64;
    828c:	00801004 	movi	r2,64
    8290:	e0bffd15 	stw	r2,-12(fp)
    8294:	00003406 	br	8368 <display7+0xfc>
	else if (number == 1)
    8298:	e0bfff17 	ldw	r2,-4(fp)
    829c:	10800058 	cmpnei	r2,r2,1
    82a0:	1000031e 	bne	r2,zero,82b0 <display7+0x44>
		hex = 121;
    82a4:	00801e44 	movi	r2,121
    82a8:	e0bffd15 	stw	r2,-12(fp)
    82ac:	00002e06 	br	8368 <display7+0xfc>
	else if (number == 2)
    82b0:	e0bfff17 	ldw	r2,-4(fp)
    82b4:	10800098 	cmpnei	r2,r2,2
    82b8:	1000031e 	bne	r2,zero,82c8 <display7+0x5c>
		hex = 36;
    82bc:	00800904 	movi	r2,36
    82c0:	e0bffd15 	stw	r2,-12(fp)
    82c4:	00002806 	br	8368 <display7+0xfc>
	else if (number == 3)
    82c8:	e0bfff17 	ldw	r2,-4(fp)
    82cc:	108000d8 	cmpnei	r2,r2,3
    82d0:	1000031e 	bne	r2,zero,82e0 <display7+0x74>
		hex = 48;
    82d4:	00800c04 	movi	r2,48
    82d8:	e0bffd15 	stw	r2,-12(fp)
    82dc:	00002206 	br	8368 <display7+0xfc>
	else if (number == 4)
    82e0:	e0bfff17 	ldw	r2,-4(fp)
    82e4:	10800118 	cmpnei	r2,r2,4
    82e8:	1000031e 	bne	r2,zero,82f8 <display7+0x8c>
		hex = 25;
    82ec:	00800644 	movi	r2,25
    82f0:	e0bffd15 	stw	r2,-12(fp)
    82f4:	00001c06 	br	8368 <display7+0xfc>
	else if (number == 5)
    82f8:	e0bfff17 	ldw	r2,-4(fp)
    82fc:	10800158 	cmpnei	r2,r2,5
    8300:	1000031e 	bne	r2,zero,8310 <display7+0xa4>
		hex = 18;
    8304:	00800484 	movi	r2,18
    8308:	e0bffd15 	stw	r2,-12(fp)
    830c:	00001606 	br	8368 <display7+0xfc>
	else if (number == 6)
    8310:	e0bfff17 	ldw	r2,-4(fp)
    8314:	10800198 	cmpnei	r2,r2,6
    8318:	1000031e 	bne	r2,zero,8328 <display7+0xbc>
		hex = 2;
    831c:	00800084 	movi	r2,2
    8320:	e0bffd15 	stw	r2,-12(fp)
    8324:	00001006 	br	8368 <display7+0xfc>
	else if (number == 7)
    8328:	e0bfff17 	ldw	r2,-4(fp)
    832c:	108001d8 	cmpnei	r2,r2,7
    8330:	1000031e 	bne	r2,zero,8340 <display7+0xd4>
		hex = 120;
    8334:	00801e04 	movi	r2,120
    8338:	e0bffd15 	stw	r2,-12(fp)
    833c:	00000a06 	br	8368 <display7+0xfc>
	else if (number == 8)
    8340:	e0bfff17 	ldw	r2,-4(fp)
    8344:	10800218 	cmpnei	r2,r2,8
    8348:	1000021e 	bne	r2,zero,8354 <display7+0xe8>
		hex = 0;
    834c:	e03ffd15 	stw	zero,-12(fp)
    8350:	00000506 	br	8368 <display7+0xfc>
	else if (number == 9)
    8354:	e0bfff17 	ldw	r2,-4(fp)
    8358:	10800258 	cmpnei	r2,r2,9
    835c:	1000021e 	bne	r2,zero,8368 <display7+0xfc>
		hex = 16;
    8360:	00800404 	movi	r2,16
    8364:	e0bffd15 	stw	r2,-12(fp)


	IOWR_ALTERA_AVALON_PIO_DATA(address, hex);
    8368:	e0bffe17 	ldw	r2,-8(fp)
    836c:	e0fffd17 	ldw	r3,-12(fp)
    8370:	10c00035 	stwio	r3,0(r2)
}
    8374:	0001883a 	nop
    8378:	e037883a 	mov	sp,fp
    837c:	df000017 	ldw	fp,0(sp)
    8380:	dec00104 	addi	sp,sp,4
    8384:	f800283a 	ret

00008388 <main>:

int main()
{
    8388:	defff404 	addi	sp,sp,-48
    838c:	dfc00b15 	stw	ra,44(sp)
    8390:	df000a15 	stw	fp,40(sp)
    8394:	dc400915 	stw	r17,36(sp)
    8398:	dc000815 	stw	r16,32(sp)
    839c:	df000a04 	addi	fp,sp,40
	uint64_t peakValue = 0;
    83a0:	e03ff615 	stw	zero,-40(fp)
    83a4:	e03ff715 	stw	zero,-36(fp)
	uint8_t sent = 0;
    83a8:	e03ff805 	stb	zero,-32(fp)
	uint8_t count = 0;
    83ac:	e03ff845 	stb	zero,-31(fp)
	uint8_t incomplete_half = 0;
    83b0:	e03ff885 	stb	zero,-30(fp)
	IOWR_ALTERA_AVALON_PIO_DATA(HEX0_BASE, 0);
    83b4:	0007883a 	mov	r3,zero
    83b8:	00800074 	movhi	r2,1
    83bc:	10842c04 	addi	r2,r2,4272
    83c0:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_PIO_DATA(HEX1_BASE, 0);
    83c4:	0007883a 	mov	r3,zero
    83c8:	00800074 	movhi	r2,1
    83cc:	10842804 	addi	r2,r2,4256
    83d0:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_PIO_DATA(HEX2_BASE, 0);
    83d4:	0007883a 	mov	r3,zero
    83d8:	00800074 	movhi	r2,1
    83dc:	10842404 	addi	r2,r2,4240
    83e0:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_PIO_DATA(HEX3_BASE, 0);
    83e4:	0007883a 	mov	r3,zero
    83e8:	00800074 	movhi	r2,1
    83ec:	10842004 	addi	r2,r2,4224
    83f0:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_PIO_DATA(HEX4_BASE, 0);
    83f4:	0007883a 	mov	r3,zero
    83f8:	00800074 	movhi	r2,1
    83fc:	10841c04 	addi	r2,r2,4208
    8400:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_PIO_DATA(HEX5_BASE, 0);
    8404:	0007883a 	mov	r3,zero
    8408:	00800074 	movhi	r2,1
    840c:	10841804 	addi	r2,r2,4192
    8410:	10c00035 	stwio	r3,0(r2)
	while(1)
	{
		volatile uint32_t recvData = IORD_ALTERA_AVALON_PIO_DATA(TDMA_RECV_DATA_BASE);
    8414:	00800074 	movhi	r2,1
    8418:	10841004 	addi	r2,r2,4160
    841c:	10800037 	ldwio	r2,0(r2)
    8420:	e0bffd15 	stw	r2,-12(fp)
		if ((((recvData >> 28) & 0xF) == 0b1000)) // Is Data Packet
    8424:	e0bffd17 	ldw	r2,-12(fp)
    8428:	1004d73a 	srli	r2,r2,28
    842c:	10800218 	cmpnei	r2,r2,8
    8430:	103ff81e 	bne	r2,zero,8414 <_gp+0xffff58a4>
		{
			uint16_t id = ((recvData >> 20) & 0xF);
    8434:	e0bffd17 	ldw	r2,-12(fp)
    8438:	1004d53a 	srli	r2,r2,20
    843c:	108003cc 	andi	r2,r2,15
    8440:	e0bff90d 	sth	r2,-28(fp)
			if (id == 0b0111 && sent == 0) // From Peak Detecting
    8444:	e0bff90b 	ldhu	r2,-28(fp)
    8448:	108001d8 	cmpnei	r2,r2,7
    844c:	10003c1e 	bne	r2,zero,8540 <main+0x1b8>
    8450:	e0bff803 	ldbu	r2,-32(fp)
    8454:	10003a1e 	bne	r2,zero,8540 <main+0x1b8>
			{
				uint8_t peakDetected = (recvData >> 18) & 1; // 18
    8458:	e0bffd17 	ldw	r2,-12(fp)
    845c:	1004d4ba 	srli	r2,r2,18
    8460:	1080004c 	andi	r2,r2,1
    8464:	e0bff985 	stb	r2,-26(fp)
				uint32_t corrCount = recvData & (0x3FFFF); // 17 downto 0
    8468:	e0fffd17 	ldw	r3,-12(fp)
    846c:	00800134 	movhi	r2,4
    8470:	10bfffc4 	addi	r2,r2,-1
    8474:	1884703a 	and	r2,r3,r2
    8478:	e0bffa15 	stw	r2,-24(fp)
				display7(HEX0_BASE, corrCount % 10);
    847c:	e0bffa17 	ldw	r2,-24(fp)
    8480:	01400284 	movi	r5,10
    8484:	1009883a 	mov	r4,r2
    8488:	00087940 	call	8794 <__umodsi3>
    848c:	100b883a 	mov	r5,r2
    8490:	01000074 	movhi	r4,1
    8494:	21042c04 	addi	r4,r4,4272
    8498:	000826c0 	call	826c <display7>
				display7(HEX1_BASE, corrCount / 10 % 10);
    849c:	e0bffa17 	ldw	r2,-24(fp)
    84a0:	01400284 	movi	r5,10
    84a4:	1009883a 	mov	r4,r2
    84a8:	00087300 	call	8730 <__udivsi3>
    84ac:	01400284 	movi	r5,10
    84b0:	1009883a 	mov	r4,r2
    84b4:	00087940 	call	8794 <__umodsi3>
    84b8:	100b883a 	mov	r5,r2
    84bc:	01000074 	movhi	r4,1
    84c0:	21042804 	addi	r4,r4,4256
    84c4:	000826c0 	call	826c <display7>
				display7(HEX2_BASE, corrCount / 100 % 10);
    84c8:	e0bffa17 	ldw	r2,-24(fp)
    84cc:	01401904 	movi	r5,100
    84d0:	1009883a 	mov	r4,r2
    84d4:	00087300 	call	8730 <__udivsi3>
    84d8:	01400284 	movi	r5,10
    84dc:	1009883a 	mov	r4,r2
    84e0:	00087940 	call	8794 <__umodsi3>
    84e4:	100b883a 	mov	r5,r2
    84e8:	01000074 	movhi	r4,1
    84ec:	21042404 	addi	r4,r4,4240
    84f0:	000826c0 	call	826c <display7>
				//printf("-----------------");
				//printf("corrCount = %" PRIu32 "\n", corrCount);

				if (peakDetected == 1) // A Peak is Detected, Request Peak Value
    84f4:	e0bff983 	ldbu	r2,-26(fp)
    84f8:	10800058 	cmpnei	r2,r2,1
    84fc:	10004c1e 	bne	r2,zero,8630 <main+0x2a8>
				{
					IOWR_ALTERA_AVALON_PIO_DATA(HEX3_BASE, 15);
    8500:	00c003c4 	movi	r3,15
    8504:	00800074 	movhi	r2,1
    8508:	10842004 	addi	r2,r2,4224
    850c:	10c00035 	stwio	r3,0(r2)
					IOWR_ALTERA_AVALON_PIO_DATA(TDMA_SEND_ADDR_BASE, 0b0100); // To Peak Detector
    8510:	00c00104 	movi	r3,4
    8514:	00800074 	movhi	r2,1
    8518:	10840c04 	addi	r2,r2,4144
    851c:	10c00035 	stwio	r3,0(r2)
					IOWR_ALTERA_AVALON_PIO_DATA(TDMA_SEND_DATA_BASE, (0b1000 << 28) | (0b0110 << 20) | 0b11); // 1000 (31~28), 0110 (23~20), 11 (1~0)
    8520:	00e01834 	movhi	r3,32864
    8524:	18c000c4 	addi	r3,r3,3
    8528:	00800074 	movhi	r2,1
    852c:	10840804 	addi	r2,r2,4128
    8530:	10c00035 	stwio	r3,0(r2)
					sent = 1;
    8534:	00800044 	movi	r2,1
    8538:	e0bff805 	stb	r2,-32(fp)
		volatile uint32_t recvData = IORD_ALTERA_AVALON_PIO_DATA(TDMA_RECV_DATA_BASE);
		if ((((recvData >> 28) & 0xF) == 0b1000)) // Is Data Packet
		{
			uint16_t id = ((recvData >> 20) & 0xF);
			if (id == 0b0111 && sent == 0) // From Peak Detecting
			{
    853c:	00003c06 	br	8630 <main+0x2a8>
					IOWR_ALTERA_AVALON_PIO_DATA(TDMA_SEND_ADDR_BASE, 0b0100); // To Peak Detector
					IOWR_ALTERA_AVALON_PIO_DATA(TDMA_SEND_DATA_BASE, (0b1000 << 28) | (0b0110 << 20) | 0b11); // 1000 (31~28), 0110 (23~20), 11 (1~0)
					sent = 1;
				}
			}
			else if (id == 0b1000) // From Peak Value
    8540:	e0bff90b 	ldhu	r2,-28(fp)
    8544:	10800218 	cmpnei	r2,r2,8
    8548:	103fb21e 	bne	r2,zero,8414 <_gp+0xffff58a4>
			{
				uint16_t half = ((recvData >> 18) & 1);
    854c:	e0bffd17 	ldw	r2,-12(fp)
    8550:	1004d4ba 	srli	r2,r2,18
    8554:	1080004c 	andi	r2,r2,1
    8558:	e0bffb0d 	sth	r2,-20(fp)
				uint32_t value = (recvData & 0x3FFFF);
    855c:	e0fffd17 	ldw	r3,-12(fp)
    8560:	00800134 	movhi	r2,4
    8564:	10bfffc4 	addi	r2,r2,-1
    8568:	1884703a 	and	r2,r3,r2
    856c:	e0bffc15 	stw	r2,-16(fp)
				if (half == 0 && incomplete_half == 0) // First Half
    8570:	e0bffb0b 	ldhu	r2,-20(fp)
    8574:	10000d1e 	bne	r2,zero,85ac <main+0x224>
    8578:	e0bff883 	ldbu	r2,-30(fp)
    857c:	10000b1e 	bne	r2,zero,85ac <main+0x224>
				{
					IOWR_ALTERA_AVALON_PIO_DATA(HEX4_BASE, 15);
    8580:	00c003c4 	movi	r3,15
    8584:	00800074 	movhi	r2,1
    8588:	10841c04 	addi	r2,r2,4208
    858c:	10c00035 	stwio	r3,0(r2)
					peakValue = (value << 18); // 17 downto 0 -> 35 downto 18
    8590:	e0bffc17 	ldw	r2,-16(fp)
    8594:	100494ba 	slli	r2,r2,18
    8598:	e0bff615 	stw	r2,-40(fp)
    859c:	e03ff715 	stw	zero,-36(fp)
					incomplete_half = 1;
    85a0:	00800044 	movi	r2,1
    85a4:	e0bff885 	stb	r2,-30(fp)
    85a8:	00002206 	br	8634 <main+0x2ac>
				}
				else if (half == 1 && incomplete_half == 1) // Second Half
    85ac:	e0bffb0b 	ldhu	r2,-20(fp)
    85b0:	10800058 	cmpnei	r2,r2,1
    85b4:	103f971e 	bne	r2,zero,8414 <_gp+0xffff58a4>
    85b8:	e0bff883 	ldbu	r2,-30(fp)
    85bc:	10800058 	cmpnei	r2,r2,1
    85c0:	103f941e 	bne	r2,zero,8414 <_gp+0xffff58a4>
				{
					IOWR_ALTERA_AVALON_PIO_DATA(HEX5_BASE, 15);
    85c4:	00c003c4 	movi	r3,15
    85c8:	00800074 	movhi	r2,1
    85cc:	10841804 	addi	r2,r2,4192
    85d0:	10c00035 	stwio	r3,0(r2)
					peakValue |= value; // 17 downto 0 -> 17 downto 0
    85d4:	e0bffc17 	ldw	r2,-16(fp)
    85d8:	1021883a 	mov	r16,r2
    85dc:	0023883a 	mov	r17,zero
    85e0:	e0bff617 	ldw	r2,-40(fp)
    85e4:	1404b03a 	or	r2,r2,r16
    85e8:	e0bff615 	stw	r2,-40(fp)
    85ec:	e0bff717 	ldw	r2,-36(fp)
    85f0:	1444b03a 	or	r2,r2,r17
    85f4:	e0bff715 	stw	r2,-36(fp)
					if (count < 5)
    85f8:	e0bff843 	ldbu	r2,-31(fp)
    85fc:	10800168 	cmpgeui	r2,r2,5
    8600:	1000051e 	bne	r2,zero,8618 <main+0x290>
						printf("Peak Value = %" PRIu64 "\n", peakValue);
    8604:	e17ff617 	ldw	r5,-40(fp)
    8608:	e1bff717 	ldw	r6,-36(fp)
    860c:	01000074 	movhi	r4,1
    8610:	212a1d04 	addi	r4,r4,-22412
    8614:	00088280 	call	8828 <printf>
					sent = 0;
    8618:	e03ff805 	stb	zero,-32(fp)
					count++;
    861c:	e0bff843 	ldbu	r2,-31(fp)
    8620:	10800044 	addi	r2,r2,1
    8624:	e0bff845 	stb	r2,-31(fp)
					incomplete_half = 0;
    8628:	e03ff885 	stb	zero,-30(fp)
    862c:	003f7906 	br	8414 <_gp+0xffff58a4>
		volatile uint32_t recvData = IORD_ALTERA_AVALON_PIO_DATA(TDMA_RECV_DATA_BASE);
		if ((((recvData >> 28) & 0xF) == 0b1000)) // Is Data Packet
		{
			uint16_t id = ((recvData >> 20) & 0xF);
			if (id == 0b0111 && sent == 0) // From Peak Detecting
			{
    8630:	0001883a 	nop
					count++;
					incomplete_half = 0;
				}
			}
		}
	}
    8634:	003f7706 	br	8414 <_gp+0xffff58a4>

00008638 <__divsi3>:
    8638:	20001b16 	blt	r4,zero,86a8 <__divsi3+0x70>
    863c:	000f883a 	mov	r7,zero
    8640:	28001616 	blt	r5,zero,869c <__divsi3+0x64>
    8644:	200d883a 	mov	r6,r4
    8648:	29001a2e 	bgeu	r5,r4,86b4 <__divsi3+0x7c>
    864c:	00800804 	movi	r2,32
    8650:	00c00044 	movi	r3,1
    8654:	00000106 	br	865c <__divsi3+0x24>
    8658:	10000d26 	beq	r2,zero,8690 <__divsi3+0x58>
    865c:	294b883a 	add	r5,r5,r5
    8660:	10bfffc4 	addi	r2,r2,-1
    8664:	18c7883a 	add	r3,r3,r3
    8668:	293ffb36 	bltu	r5,r4,8658 <_gp+0xffff5ae8>
    866c:	0005883a 	mov	r2,zero
    8670:	18000726 	beq	r3,zero,8690 <__divsi3+0x58>
    8674:	0005883a 	mov	r2,zero
    8678:	31400236 	bltu	r6,r5,8684 <__divsi3+0x4c>
    867c:	314dc83a 	sub	r6,r6,r5
    8680:	10c4b03a 	or	r2,r2,r3
    8684:	1806d07a 	srli	r3,r3,1
    8688:	280ad07a 	srli	r5,r5,1
    868c:	183ffa1e 	bne	r3,zero,8678 <_gp+0xffff5b08>
    8690:	38000126 	beq	r7,zero,8698 <__divsi3+0x60>
    8694:	0085c83a 	sub	r2,zero,r2
    8698:	f800283a 	ret
    869c:	014bc83a 	sub	r5,zero,r5
    86a0:	39c0005c 	xori	r7,r7,1
    86a4:	003fe706 	br	8644 <_gp+0xffff5ad4>
    86a8:	0109c83a 	sub	r4,zero,r4
    86ac:	01c00044 	movi	r7,1
    86b0:	003fe306 	br	8640 <_gp+0xffff5ad0>
    86b4:	00c00044 	movi	r3,1
    86b8:	003fee06 	br	8674 <_gp+0xffff5b04>

000086bc <__modsi3>:
    86bc:	20001716 	blt	r4,zero,871c <__modsi3+0x60>
    86c0:	000f883a 	mov	r7,zero
    86c4:	2005883a 	mov	r2,r4
    86c8:	28001216 	blt	r5,zero,8714 <__modsi3+0x58>
    86cc:	2900162e 	bgeu	r5,r4,8728 <__modsi3+0x6c>
    86d0:	01800804 	movi	r6,32
    86d4:	00c00044 	movi	r3,1
    86d8:	00000106 	br	86e0 <__modsi3+0x24>
    86dc:	30000a26 	beq	r6,zero,8708 <__modsi3+0x4c>
    86e0:	294b883a 	add	r5,r5,r5
    86e4:	31bfffc4 	addi	r6,r6,-1
    86e8:	18c7883a 	add	r3,r3,r3
    86ec:	293ffb36 	bltu	r5,r4,86dc <_gp+0xffff5b6c>
    86f0:	18000526 	beq	r3,zero,8708 <__modsi3+0x4c>
    86f4:	1806d07a 	srli	r3,r3,1
    86f8:	11400136 	bltu	r2,r5,8700 <__modsi3+0x44>
    86fc:	1145c83a 	sub	r2,r2,r5
    8700:	280ad07a 	srli	r5,r5,1
    8704:	183ffb1e 	bne	r3,zero,86f4 <_gp+0xffff5b84>
    8708:	38000126 	beq	r7,zero,8710 <__modsi3+0x54>
    870c:	0085c83a 	sub	r2,zero,r2
    8710:	f800283a 	ret
    8714:	014bc83a 	sub	r5,zero,r5
    8718:	003fec06 	br	86cc <_gp+0xffff5b5c>
    871c:	0109c83a 	sub	r4,zero,r4
    8720:	01c00044 	movi	r7,1
    8724:	003fe706 	br	86c4 <_gp+0xffff5b54>
    8728:	00c00044 	movi	r3,1
    872c:	003ff106 	br	86f4 <_gp+0xffff5b84>

00008730 <__udivsi3>:
    8730:	200d883a 	mov	r6,r4
    8734:	2900152e 	bgeu	r5,r4,878c <__udivsi3+0x5c>
    8738:	28001416 	blt	r5,zero,878c <__udivsi3+0x5c>
    873c:	00800804 	movi	r2,32
    8740:	00c00044 	movi	r3,1
    8744:	00000206 	br	8750 <__udivsi3+0x20>
    8748:	10000e26 	beq	r2,zero,8784 <__udivsi3+0x54>
    874c:	28000516 	blt	r5,zero,8764 <__udivsi3+0x34>
    8750:	294b883a 	add	r5,r5,r5
    8754:	10bfffc4 	addi	r2,r2,-1
    8758:	18c7883a 	add	r3,r3,r3
    875c:	293ffa36 	bltu	r5,r4,8748 <_gp+0xffff5bd8>
    8760:	18000826 	beq	r3,zero,8784 <__udivsi3+0x54>
    8764:	0005883a 	mov	r2,zero
    8768:	31400236 	bltu	r6,r5,8774 <__udivsi3+0x44>
    876c:	314dc83a 	sub	r6,r6,r5
    8770:	10c4b03a 	or	r2,r2,r3
    8774:	1806d07a 	srli	r3,r3,1
    8778:	280ad07a 	srli	r5,r5,1
    877c:	183ffa1e 	bne	r3,zero,8768 <_gp+0xffff5bf8>
    8780:	f800283a 	ret
    8784:	0005883a 	mov	r2,zero
    8788:	f800283a 	ret
    878c:	00c00044 	movi	r3,1
    8790:	003ff406 	br	8764 <_gp+0xffff5bf4>

00008794 <__umodsi3>:
    8794:	2005883a 	mov	r2,r4
    8798:	2900122e 	bgeu	r5,r4,87e4 <__umodsi3+0x50>
    879c:	28001116 	blt	r5,zero,87e4 <__umodsi3+0x50>
    87a0:	01800804 	movi	r6,32
    87a4:	00c00044 	movi	r3,1
    87a8:	00000206 	br	87b4 <__umodsi3+0x20>
    87ac:	30000c26 	beq	r6,zero,87e0 <__umodsi3+0x4c>
    87b0:	28000516 	blt	r5,zero,87c8 <__umodsi3+0x34>
    87b4:	294b883a 	add	r5,r5,r5
    87b8:	31bfffc4 	addi	r6,r6,-1
    87bc:	18c7883a 	add	r3,r3,r3
    87c0:	293ffa36 	bltu	r5,r4,87ac <_gp+0xffff5c3c>
    87c4:	18000626 	beq	r3,zero,87e0 <__umodsi3+0x4c>
    87c8:	1806d07a 	srli	r3,r3,1
    87cc:	11400136 	bltu	r2,r5,87d4 <__umodsi3+0x40>
    87d0:	1145c83a 	sub	r2,r2,r5
    87d4:	280ad07a 	srli	r5,r5,1
    87d8:	183ffb1e 	bne	r3,zero,87c8 <_gp+0xffff5c58>
    87dc:	f800283a 	ret
    87e0:	f800283a 	ret
    87e4:	00c00044 	movi	r3,1
    87e8:	003ff706 	br	87c8 <_gp+0xffff5c58>

000087ec <_printf_r>:
    87ec:	defffd04 	addi	sp,sp,-12
    87f0:	dfc00015 	stw	ra,0(sp)
    87f4:	d9800115 	stw	r6,4(sp)
    87f8:	d9c00215 	stw	r7,8(sp)
    87fc:	20c00217 	ldw	r3,8(r4)
    8800:	01800074 	movhi	r6,1
    8804:	31a38a04 	addi	r6,r6,-29144
    8808:	19800115 	stw	r6,4(r3)
    880c:	280d883a 	mov	r6,r5
    8810:	21400217 	ldw	r5,8(r4)
    8814:	d9c00104 	addi	r7,sp,4
    8818:	00088e00 	call	88e0 <___vfprintf_internal_r>
    881c:	dfc00017 	ldw	ra,0(sp)
    8820:	dec00304 	addi	sp,sp,12
    8824:	f800283a 	ret

00008828 <printf>:
    8828:	defffc04 	addi	sp,sp,-16
    882c:	dfc00015 	stw	ra,0(sp)
    8830:	d9400115 	stw	r5,4(sp)
    8834:	d9800215 	stw	r6,8(sp)
    8838:	d9c00315 	stw	r7,12(sp)
    883c:	00800074 	movhi	r2,1
    8840:	10aadd04 	addi	r2,r2,-21644
    8844:	10800017 	ldw	r2,0(r2)
    8848:	01400074 	movhi	r5,1
    884c:	29638a04 	addi	r5,r5,-29144
    8850:	10c00217 	ldw	r3,8(r2)
    8854:	d9800104 	addi	r6,sp,4
    8858:	19400115 	stw	r5,4(r3)
    885c:	200b883a 	mov	r5,r4
    8860:	11000217 	ldw	r4,8(r2)
    8864:	0008e0c0 	call	8e0c <__vfprintf_internal>
    8868:	dfc00017 	ldw	ra,0(sp)
    886c:	dec00404 	addi	sp,sp,16
    8870:	f800283a 	ret

00008874 <print_repeat>:
    8874:	defffb04 	addi	sp,sp,-20
    8878:	dc800315 	stw	r18,12(sp)
    887c:	dc400215 	stw	r17,8(sp)
    8880:	dc000115 	stw	r16,4(sp)
    8884:	dfc00415 	stw	ra,16(sp)
    8888:	2025883a 	mov	r18,r4
    888c:	2823883a 	mov	r17,r5
    8890:	d9800005 	stb	r6,0(sp)
    8894:	3821883a 	mov	r16,r7
    8898:	04000a0e 	bge	zero,r16,88c4 <print_repeat+0x50>
    889c:	88800117 	ldw	r2,4(r17)
    88a0:	01c00044 	movi	r7,1
    88a4:	d80d883a 	mov	r6,sp
    88a8:	880b883a 	mov	r5,r17
    88ac:	9009883a 	mov	r4,r18
    88b0:	103ee83a 	callr	r2
    88b4:	843fffc4 	addi	r16,r16,-1
    88b8:	103ff726 	beq	r2,zero,8898 <_gp+0xffff5d28>
    88bc:	00bfffc4 	movi	r2,-1
    88c0:	00000106 	br	88c8 <print_repeat+0x54>
    88c4:	0005883a 	mov	r2,zero
    88c8:	dfc00417 	ldw	ra,16(sp)
    88cc:	dc800317 	ldw	r18,12(sp)
    88d0:	dc400217 	ldw	r17,8(sp)
    88d4:	dc000117 	ldw	r16,4(sp)
    88d8:	dec00504 	addi	sp,sp,20
    88dc:	f800283a 	ret

000088e0 <___vfprintf_internal_r>:
    88e0:	deffe504 	addi	sp,sp,-108
    88e4:	d8c00804 	addi	r3,sp,32
    88e8:	ddc01815 	stw	r23,96(sp)
    88ec:	dd801715 	stw	r22,92(sp)
    88f0:	dd401615 	stw	r21,88(sp)
    88f4:	dd001515 	stw	r20,84(sp)
    88f8:	dcc01415 	stw	r19,80(sp)
    88fc:	dc801315 	stw	r18,76(sp)
    8900:	dc401215 	stw	r17,72(sp)
    8904:	dc001115 	stw	r16,68(sp)
    8908:	dfc01a15 	stw	ra,104(sp)
    890c:	df001915 	stw	fp,100(sp)
    8910:	2029883a 	mov	r20,r4
    8914:	2823883a 	mov	r17,r5
    8918:	382d883a 	mov	r22,r7
    891c:	d9800f15 	stw	r6,60(sp)
    8920:	0021883a 	mov	r16,zero
    8924:	d8000e15 	stw	zero,56(sp)
    8928:	d8000a15 	stw	zero,40(sp)
    892c:	002b883a 	mov	r21,zero
    8930:	0027883a 	mov	r19,zero
    8934:	0025883a 	mov	r18,zero
    8938:	d8000c15 	stw	zero,48(sp)
    893c:	d8000b15 	stw	zero,44(sp)
    8940:	002f883a 	mov	r23,zero
    8944:	d8c00915 	stw	r3,36(sp)
    8948:	d8c00f17 	ldw	r3,60(sp)
    894c:	19000003 	ldbu	r4,0(r3)
    8950:	20803fcc 	andi	r2,r4,255
    8954:	1080201c 	xori	r2,r2,128
    8958:	10bfe004 	addi	r2,r2,-128
    895c:	10011e26 	beq	r2,zero,8dd8 <___vfprintf_internal_r+0x4f8>
    8960:	00c00044 	movi	r3,1
    8964:	b8c01426 	beq	r23,r3,89b8 <___vfprintf_internal_r+0xd8>
    8968:	1dc00216 	blt	r3,r23,8974 <___vfprintf_internal_r+0x94>
    896c:	b8000626 	beq	r23,zero,8988 <___vfprintf_internal_r+0xa8>
    8970:	00011506 	br	8dc8 <___vfprintf_internal_r+0x4e8>
    8974:	01400084 	movi	r5,2
    8978:	b9401d26 	beq	r23,r5,89f0 <___vfprintf_internal_r+0x110>
    897c:	014000c4 	movi	r5,3
    8980:	b9402b26 	beq	r23,r5,8a30 <___vfprintf_internal_r+0x150>
    8984:	00011006 	br	8dc8 <___vfprintf_internal_r+0x4e8>
    8988:	01400944 	movi	r5,37
    898c:	1140fc26 	beq	r2,r5,8d80 <___vfprintf_internal_r+0x4a0>
    8990:	88800117 	ldw	r2,4(r17)
    8994:	d9000005 	stb	r4,0(sp)
    8998:	01c00044 	movi	r7,1
    899c:	d80d883a 	mov	r6,sp
    89a0:	880b883a 	mov	r5,r17
    89a4:	a009883a 	mov	r4,r20
    89a8:	103ee83a 	callr	r2
    89ac:	1000d81e 	bne	r2,zero,8d10 <___vfprintf_internal_r+0x430>
    89b0:	84000044 	addi	r16,r16,1
    89b4:	00010406 	br	8dc8 <___vfprintf_internal_r+0x4e8>
    89b8:	01400c04 	movi	r5,48
    89bc:	1140fa26 	beq	r2,r5,8da8 <___vfprintf_internal_r+0x4c8>
    89c0:	01400944 	movi	r5,37
    89c4:	11400a1e 	bne	r2,r5,89f0 <___vfprintf_internal_r+0x110>
    89c8:	d8800005 	stb	r2,0(sp)
    89cc:	88800117 	ldw	r2,4(r17)
    89d0:	b80f883a 	mov	r7,r23
    89d4:	d80d883a 	mov	r6,sp
    89d8:	880b883a 	mov	r5,r17
    89dc:	a009883a 	mov	r4,r20
    89e0:	103ee83a 	callr	r2
    89e4:	1000ca1e 	bne	r2,zero,8d10 <___vfprintf_internal_r+0x430>
    89e8:	84000044 	addi	r16,r16,1
    89ec:	0000f506 	br	8dc4 <___vfprintf_internal_r+0x4e4>
    89f0:	25fff404 	addi	r23,r4,-48
    89f4:	bdc03fcc 	andi	r23,r23,255
    89f8:	00c00244 	movi	r3,9
    89fc:	1dc00936 	bltu	r3,r23,8a24 <___vfprintf_internal_r+0x144>
    8a00:	00bfffc4 	movi	r2,-1
    8a04:	90800426 	beq	r18,r2,8a18 <___vfprintf_internal_r+0x138>
    8a08:	01400284 	movi	r5,10
    8a0c:	9009883a 	mov	r4,r18
    8a10:	0008f540 	call	8f54 <__mulsi3>
    8a14:	00000106 	br	8a1c <___vfprintf_internal_r+0x13c>
    8a18:	0005883a 	mov	r2,zero
    8a1c:	b8a5883a 	add	r18,r23,r2
    8a20:	0000e206 	br	8dac <___vfprintf_internal_r+0x4cc>
    8a24:	01400b84 	movi	r5,46
    8a28:	1140e426 	beq	r2,r5,8dbc <___vfprintf_internal_r+0x4dc>
    8a2c:	05c00084 	movi	r23,2
    8a30:	213ff404 	addi	r4,r4,-48
    8a34:	27003fcc 	andi	fp,r4,255
    8a38:	00c00244 	movi	r3,9
    8a3c:	1f000936 	bltu	r3,fp,8a64 <___vfprintf_internal_r+0x184>
    8a40:	00bfffc4 	movi	r2,-1
    8a44:	98800426 	beq	r19,r2,8a58 <___vfprintf_internal_r+0x178>
    8a48:	01400284 	movi	r5,10
    8a4c:	9809883a 	mov	r4,r19
    8a50:	0008f540 	call	8f54 <__mulsi3>
    8a54:	00000106 	br	8a5c <___vfprintf_internal_r+0x17c>
    8a58:	0005883a 	mov	r2,zero
    8a5c:	e0a7883a 	add	r19,fp,r2
    8a60:	0000d906 	br	8dc8 <___vfprintf_internal_r+0x4e8>
    8a64:	00c01b04 	movi	r3,108
    8a68:	10c0d226 	beq	r2,r3,8db4 <___vfprintf_internal_r+0x4d4>
    8a6c:	013fffc4 	movi	r4,-1
    8a70:	99000226 	beq	r19,r4,8a7c <___vfprintf_internal_r+0x19c>
    8a74:	d8000b15 	stw	zero,44(sp)
    8a78:	00000106 	br	8a80 <___vfprintf_internal_r+0x1a0>
    8a7c:	04c00044 	movi	r19,1
    8a80:	01001a44 	movi	r4,105
    8a84:	11001626 	beq	r2,r4,8ae0 <___vfprintf_internal_r+0x200>
    8a88:	20800916 	blt	r4,r2,8ab0 <___vfprintf_internal_r+0x1d0>
    8a8c:	010018c4 	movi	r4,99
    8a90:	11008826 	beq	r2,r4,8cb4 <___vfprintf_internal_r+0x3d4>
    8a94:	01001904 	movi	r4,100
    8a98:	11001126 	beq	r2,r4,8ae0 <___vfprintf_internal_r+0x200>
    8a9c:	01001604 	movi	r4,88
    8aa0:	1100c81e 	bne	r2,r4,8dc4 <___vfprintf_internal_r+0x4e4>
    8aa4:	00c00044 	movi	r3,1
    8aa8:	d8c00e15 	stw	r3,56(sp)
    8aac:	00001506 	br	8b04 <___vfprintf_internal_r+0x224>
    8ab0:	01001cc4 	movi	r4,115
    8ab4:	11009826 	beq	r2,r4,8d18 <___vfprintf_internal_r+0x438>
    8ab8:	20800416 	blt	r4,r2,8acc <___vfprintf_internal_r+0x1ec>
    8abc:	01001bc4 	movi	r4,111
    8ac0:	1100c01e 	bne	r2,r4,8dc4 <___vfprintf_internal_r+0x4e4>
    8ac4:	05400204 	movi	r21,8
    8ac8:	00000f06 	br	8b08 <___vfprintf_internal_r+0x228>
    8acc:	01001d44 	movi	r4,117
    8ad0:	11000d26 	beq	r2,r4,8b08 <___vfprintf_internal_r+0x228>
    8ad4:	01001e04 	movi	r4,120
    8ad8:	11000a26 	beq	r2,r4,8b04 <___vfprintf_internal_r+0x224>
    8adc:	0000b906 	br	8dc4 <___vfprintf_internal_r+0x4e4>
    8ae0:	d8c00a17 	ldw	r3,40(sp)
    8ae4:	b7000104 	addi	fp,r22,4
    8ae8:	18000726 	beq	r3,zero,8b08 <___vfprintf_internal_r+0x228>
    8aec:	df000d15 	stw	fp,52(sp)
    8af0:	b5c00017 	ldw	r23,0(r22)
    8af4:	b800080e 	bge	r23,zero,8b18 <___vfprintf_internal_r+0x238>
    8af8:	05efc83a 	sub	r23,zero,r23
    8afc:	02400044 	movi	r9,1
    8b00:	00000606 	br	8b1c <___vfprintf_internal_r+0x23c>
    8b04:	05400404 	movi	r21,16
    8b08:	b0c00104 	addi	r3,r22,4
    8b0c:	d8c00d15 	stw	r3,52(sp)
    8b10:	b5c00017 	ldw	r23,0(r22)
    8b14:	d8000a15 	stw	zero,40(sp)
    8b18:	0013883a 	mov	r9,zero
    8b1c:	d839883a 	mov	fp,sp
    8b20:	b8001726 	beq	r23,zero,8b80 <___vfprintf_internal_r+0x2a0>
    8b24:	a80b883a 	mov	r5,r21
    8b28:	b809883a 	mov	r4,r23
    8b2c:	da401015 	stw	r9,64(sp)
    8b30:	00087300 	call	8730 <__udivsi3>
    8b34:	a80b883a 	mov	r5,r21
    8b38:	1009883a 	mov	r4,r2
    8b3c:	102d883a 	mov	r22,r2
    8b40:	0008f540 	call	8f54 <__mulsi3>
    8b44:	b885c83a 	sub	r2,r23,r2
    8b48:	00c00244 	movi	r3,9
    8b4c:	da401017 	ldw	r9,64(sp)
    8b50:	18800216 	blt	r3,r2,8b5c <___vfprintf_internal_r+0x27c>
    8b54:	10800c04 	addi	r2,r2,48
    8b58:	00000506 	br	8b70 <___vfprintf_internal_r+0x290>
    8b5c:	d8c00e17 	ldw	r3,56(sp)
    8b60:	18000226 	beq	r3,zero,8b6c <___vfprintf_internal_r+0x28c>
    8b64:	10800dc4 	addi	r2,r2,55
    8b68:	00000106 	br	8b70 <___vfprintf_internal_r+0x290>
    8b6c:	108015c4 	addi	r2,r2,87
    8b70:	e0800005 	stb	r2,0(fp)
    8b74:	b02f883a 	mov	r23,r22
    8b78:	e7000044 	addi	fp,fp,1
    8b7c:	003fe806 	br	8b20 <_gp+0xffff5fb0>
    8b80:	e6efc83a 	sub	r23,fp,sp
    8b84:	9dc5c83a 	sub	r2,r19,r23
    8b88:	0080090e 	bge	zero,r2,8bb0 <___vfprintf_internal_r+0x2d0>
    8b8c:	e085883a 	add	r2,fp,r2
    8b90:	01400c04 	movi	r5,48
    8b94:	d8c00917 	ldw	r3,36(sp)
    8b98:	e009883a 	mov	r4,fp
    8b9c:	e0c0032e 	bgeu	fp,r3,8bac <___vfprintf_internal_r+0x2cc>
    8ba0:	e7000044 	addi	fp,fp,1
    8ba4:	21400005 	stb	r5,0(r4)
    8ba8:	e0bffa1e 	bne	fp,r2,8b94 <_gp+0xffff6024>
    8bac:	e6efc83a 	sub	r23,fp,sp
    8bb0:	d8c00b17 	ldw	r3,44(sp)
    8bb4:	4dd1883a 	add	r8,r9,r23
    8bb8:	922dc83a 	sub	r22,r18,r8
    8bbc:	18001626 	beq	r3,zero,8c18 <___vfprintf_internal_r+0x338>
    8bc0:	48000a26 	beq	r9,zero,8bec <___vfprintf_internal_r+0x30c>
    8bc4:	00800b44 	movi	r2,45
    8bc8:	d8800805 	stb	r2,32(sp)
    8bcc:	88800117 	ldw	r2,4(r17)
    8bd0:	01c00044 	movi	r7,1
    8bd4:	d9800804 	addi	r6,sp,32
    8bd8:	880b883a 	mov	r5,r17
    8bdc:	a009883a 	mov	r4,r20
    8be0:	103ee83a 	callr	r2
    8be4:	10004a1e 	bne	r2,zero,8d10 <___vfprintf_internal_r+0x430>
    8be8:	84000044 	addi	r16,r16,1
    8bec:	0580070e 	bge	zero,r22,8c0c <___vfprintf_internal_r+0x32c>
    8bf0:	b00f883a 	mov	r7,r22
    8bf4:	01800c04 	movi	r6,48
    8bf8:	880b883a 	mov	r5,r17
    8bfc:	a009883a 	mov	r4,r20
    8c00:	00088740 	call	8874 <print_repeat>
    8c04:	1000421e 	bne	r2,zero,8d10 <___vfprintf_internal_r+0x430>
    8c08:	85a1883a 	add	r16,r16,r22
    8c0c:	e02d883a 	mov	r22,fp
    8c10:	bf2fc83a 	sub	r23,r23,fp
    8c14:	00002006 	br	8c98 <___vfprintf_internal_r+0x3b8>
    8c18:	0580090e 	bge	zero,r22,8c40 <___vfprintf_internal_r+0x360>
    8c1c:	b00f883a 	mov	r7,r22
    8c20:	01800804 	movi	r6,32
    8c24:	880b883a 	mov	r5,r17
    8c28:	a009883a 	mov	r4,r20
    8c2c:	da401015 	stw	r9,64(sp)
    8c30:	00088740 	call	8874 <print_repeat>
    8c34:	da401017 	ldw	r9,64(sp)
    8c38:	1000351e 	bne	r2,zero,8d10 <___vfprintf_internal_r+0x430>
    8c3c:	85a1883a 	add	r16,r16,r22
    8c40:	483ff226 	beq	r9,zero,8c0c <_gp+0xffff609c>
    8c44:	00800b44 	movi	r2,45
    8c48:	d8800805 	stb	r2,32(sp)
    8c4c:	88800117 	ldw	r2,4(r17)
    8c50:	01c00044 	movi	r7,1
    8c54:	d9800804 	addi	r6,sp,32
    8c58:	880b883a 	mov	r5,r17
    8c5c:	a009883a 	mov	r4,r20
    8c60:	103ee83a 	callr	r2
    8c64:	10002a1e 	bne	r2,zero,8d10 <___vfprintf_internal_r+0x430>
    8c68:	84000044 	addi	r16,r16,1
    8c6c:	003fe706 	br	8c0c <_gp+0xffff609c>
    8c70:	b5bfffc4 	addi	r22,r22,-1
    8c74:	b0800003 	ldbu	r2,0(r22)
    8c78:	01c00044 	movi	r7,1
    8c7c:	d9800804 	addi	r6,sp,32
    8c80:	d8800805 	stb	r2,32(sp)
    8c84:	88800117 	ldw	r2,4(r17)
    8c88:	880b883a 	mov	r5,r17
    8c8c:	a009883a 	mov	r4,r20
    8c90:	103ee83a 	callr	r2
    8c94:	10001e1e 	bne	r2,zero,8d10 <___vfprintf_internal_r+0x430>
    8c98:	8585c83a 	sub	r2,r16,r22
    8c9c:	b5c9883a 	add	r4,r22,r23
    8ca0:	e085883a 	add	r2,fp,r2
    8ca4:	013ff216 	blt	zero,r4,8c70 <_gp+0xffff6100>
    8ca8:	1021883a 	mov	r16,r2
    8cac:	dd800d17 	ldw	r22,52(sp)
    8cb0:	00004406 	br	8dc4 <___vfprintf_internal_r+0x4e4>
    8cb4:	00800044 	movi	r2,1
    8cb8:	1480080e 	bge	r2,r18,8cdc <___vfprintf_internal_r+0x3fc>
    8cbc:	95ffffc4 	addi	r23,r18,-1
    8cc0:	b80f883a 	mov	r7,r23
    8cc4:	01800804 	movi	r6,32
    8cc8:	880b883a 	mov	r5,r17
    8ccc:	a009883a 	mov	r4,r20
    8cd0:	00088740 	call	8874 <print_repeat>
    8cd4:	10000e1e 	bne	r2,zero,8d10 <___vfprintf_internal_r+0x430>
    8cd8:	85e1883a 	add	r16,r16,r23
    8cdc:	b0800017 	ldw	r2,0(r22)
    8ce0:	01c00044 	movi	r7,1
    8ce4:	d80d883a 	mov	r6,sp
    8ce8:	d8800005 	stb	r2,0(sp)
    8cec:	88800117 	ldw	r2,4(r17)
    8cf0:	880b883a 	mov	r5,r17
    8cf4:	a009883a 	mov	r4,r20
    8cf8:	b5c00104 	addi	r23,r22,4
    8cfc:	103ee83a 	callr	r2
    8d00:	1000031e 	bne	r2,zero,8d10 <___vfprintf_internal_r+0x430>
    8d04:	84000044 	addi	r16,r16,1
    8d08:	b82d883a 	mov	r22,r23
    8d0c:	00002d06 	br	8dc4 <___vfprintf_internal_r+0x4e4>
    8d10:	00bfffc4 	movi	r2,-1
    8d14:	00003106 	br	8ddc <___vfprintf_internal_r+0x4fc>
    8d18:	b5c00017 	ldw	r23,0(r22)
    8d1c:	b7000104 	addi	fp,r22,4
    8d20:	b809883a 	mov	r4,r23
    8d24:	0008ee00 	call	8ee0 <strlen>
    8d28:	9091c83a 	sub	r8,r18,r2
    8d2c:	102d883a 	mov	r22,r2
    8d30:	0200090e 	bge	zero,r8,8d58 <___vfprintf_internal_r+0x478>
    8d34:	400f883a 	mov	r7,r8
    8d38:	01800804 	movi	r6,32
    8d3c:	880b883a 	mov	r5,r17
    8d40:	a009883a 	mov	r4,r20
    8d44:	da001015 	stw	r8,64(sp)
    8d48:	00088740 	call	8874 <print_repeat>
    8d4c:	da001017 	ldw	r8,64(sp)
    8d50:	103fef1e 	bne	r2,zero,8d10 <_gp+0xffff61a0>
    8d54:	8221883a 	add	r16,r16,r8
    8d58:	88800117 	ldw	r2,4(r17)
    8d5c:	b00f883a 	mov	r7,r22
    8d60:	b80d883a 	mov	r6,r23
    8d64:	880b883a 	mov	r5,r17
    8d68:	a009883a 	mov	r4,r20
    8d6c:	103ee83a 	callr	r2
    8d70:	103fe71e 	bne	r2,zero,8d10 <_gp+0xffff61a0>
    8d74:	85a1883a 	add	r16,r16,r22
    8d78:	e02d883a 	mov	r22,fp
    8d7c:	00001106 	br	8dc4 <___vfprintf_internal_r+0x4e4>
    8d80:	00c00044 	movi	r3,1
    8d84:	04ffffc4 	movi	r19,-1
    8d88:	d8000e15 	stw	zero,56(sp)
    8d8c:	d8c00a15 	stw	r3,40(sp)
    8d90:	05400284 	movi	r21,10
    8d94:	9825883a 	mov	r18,r19
    8d98:	d8000c15 	stw	zero,48(sp)
    8d9c:	d8000b15 	stw	zero,44(sp)
    8da0:	182f883a 	mov	r23,r3
    8da4:	00000806 	br	8dc8 <___vfprintf_internal_r+0x4e8>
    8da8:	ddc00b15 	stw	r23,44(sp)
    8dac:	05c00084 	movi	r23,2
    8db0:	00000506 	br	8dc8 <___vfprintf_internal_r+0x4e8>
    8db4:	00c00044 	movi	r3,1
    8db8:	d8c00c15 	stw	r3,48(sp)
    8dbc:	05c000c4 	movi	r23,3
    8dc0:	00000106 	br	8dc8 <___vfprintf_internal_r+0x4e8>
    8dc4:	002f883a 	mov	r23,zero
    8dc8:	d8c00f17 	ldw	r3,60(sp)
    8dcc:	18c00044 	addi	r3,r3,1
    8dd0:	d8c00f15 	stw	r3,60(sp)
    8dd4:	003edc06 	br	8948 <_gp+0xffff5dd8>
    8dd8:	8005883a 	mov	r2,r16
    8ddc:	dfc01a17 	ldw	ra,104(sp)
    8de0:	df001917 	ldw	fp,100(sp)
    8de4:	ddc01817 	ldw	r23,96(sp)
    8de8:	dd801717 	ldw	r22,92(sp)
    8dec:	dd401617 	ldw	r21,88(sp)
    8df0:	dd001517 	ldw	r20,84(sp)
    8df4:	dcc01417 	ldw	r19,80(sp)
    8df8:	dc801317 	ldw	r18,76(sp)
    8dfc:	dc401217 	ldw	r17,72(sp)
    8e00:	dc001117 	ldw	r16,68(sp)
    8e04:	dec01b04 	addi	sp,sp,108
    8e08:	f800283a 	ret

00008e0c <__vfprintf_internal>:
    8e0c:	00800074 	movhi	r2,1
    8e10:	10aadd04 	addi	r2,r2,-21644
    8e14:	300f883a 	mov	r7,r6
    8e18:	280d883a 	mov	r6,r5
    8e1c:	200b883a 	mov	r5,r4
    8e20:	11000017 	ldw	r4,0(r2)
    8e24:	00088e01 	jmpi	88e0 <___vfprintf_internal_r>

00008e28 <__sfvwrite_small_dev>:
    8e28:	2880000b 	ldhu	r2,0(r5)
    8e2c:	1080020c 	andi	r2,r2,8
    8e30:	10002126 	beq	r2,zero,8eb8 <__sfvwrite_small_dev+0x90>
    8e34:	2880008f 	ldh	r2,2(r5)
    8e38:	defffa04 	addi	sp,sp,-24
    8e3c:	dc000015 	stw	r16,0(sp)
    8e40:	dfc00515 	stw	ra,20(sp)
    8e44:	dd000415 	stw	r20,16(sp)
    8e48:	dcc00315 	stw	r19,12(sp)
    8e4c:	dc800215 	stw	r18,8(sp)
    8e50:	dc400115 	stw	r17,4(sp)
    8e54:	2821883a 	mov	r16,r5
    8e58:	10001216 	blt	r2,zero,8ea4 <__sfvwrite_small_dev+0x7c>
    8e5c:	2027883a 	mov	r19,r4
    8e60:	3025883a 	mov	r18,r6
    8e64:	3823883a 	mov	r17,r7
    8e68:	05010004 	movi	r20,1024
    8e6c:	04400b0e 	bge	zero,r17,8e9c <__sfvwrite_small_dev+0x74>
    8e70:	880f883a 	mov	r7,r17
    8e74:	a440010e 	bge	r20,r17,8e7c <__sfvwrite_small_dev+0x54>
    8e78:	01c10004 	movi	r7,1024
    8e7c:	8140008f 	ldh	r5,2(r16)
    8e80:	900d883a 	mov	r6,r18
    8e84:	9809883a 	mov	r4,r19
    8e88:	0008efc0 	call	8efc <_write_r>
    8e8c:	0080050e 	bge	zero,r2,8ea4 <__sfvwrite_small_dev+0x7c>
    8e90:	88a3c83a 	sub	r17,r17,r2
    8e94:	90a5883a 	add	r18,r18,r2
    8e98:	003ff406 	br	8e6c <_gp+0xffff62fc>
    8e9c:	0005883a 	mov	r2,zero
    8ea0:	00000706 	br	8ec0 <__sfvwrite_small_dev+0x98>
    8ea4:	8080000b 	ldhu	r2,0(r16)
    8ea8:	10801014 	ori	r2,r2,64
    8eac:	8080000d 	sth	r2,0(r16)
    8eb0:	00bfffc4 	movi	r2,-1
    8eb4:	00000206 	br	8ec0 <__sfvwrite_small_dev+0x98>
    8eb8:	00bfffc4 	movi	r2,-1
    8ebc:	f800283a 	ret
    8ec0:	dfc00517 	ldw	ra,20(sp)
    8ec4:	dd000417 	ldw	r20,16(sp)
    8ec8:	dcc00317 	ldw	r19,12(sp)
    8ecc:	dc800217 	ldw	r18,8(sp)
    8ed0:	dc400117 	ldw	r17,4(sp)
    8ed4:	dc000017 	ldw	r16,0(sp)
    8ed8:	dec00604 	addi	sp,sp,24
    8edc:	f800283a 	ret

00008ee0 <strlen>:
    8ee0:	2005883a 	mov	r2,r4
    8ee4:	10c00007 	ldb	r3,0(r2)
    8ee8:	18000226 	beq	r3,zero,8ef4 <strlen+0x14>
    8eec:	10800044 	addi	r2,r2,1
    8ef0:	003ffc06 	br	8ee4 <_gp+0xffff6374>
    8ef4:	1105c83a 	sub	r2,r2,r4
    8ef8:	f800283a 	ret

00008efc <_write_r>:
    8efc:	defffd04 	addi	sp,sp,-12
    8f00:	dc000015 	stw	r16,0(sp)
    8f04:	04000074 	movhi	r16,1
    8f08:	dc400115 	stw	r17,4(sp)
    8f0c:	842b9f04 	addi	r16,r16,-20868
    8f10:	2023883a 	mov	r17,r4
    8f14:	2809883a 	mov	r4,r5
    8f18:	300b883a 	mov	r5,r6
    8f1c:	380d883a 	mov	r6,r7
    8f20:	dfc00215 	stw	ra,8(sp)
    8f24:	80000015 	stw	zero,0(r16)
    8f28:	00091200 	call	9120 <write>
    8f2c:	00ffffc4 	movi	r3,-1
    8f30:	10c0031e 	bne	r2,r3,8f40 <_write_r+0x44>
    8f34:	80c00017 	ldw	r3,0(r16)
    8f38:	18000126 	beq	r3,zero,8f40 <_write_r+0x44>
    8f3c:	88c00015 	stw	r3,0(r17)
    8f40:	dfc00217 	ldw	ra,8(sp)
    8f44:	dc400117 	ldw	r17,4(sp)
    8f48:	dc000017 	ldw	r16,0(sp)
    8f4c:	dec00304 	addi	sp,sp,12
    8f50:	f800283a 	ret

00008f54 <__mulsi3>:
    8f54:	0005883a 	mov	r2,zero
    8f58:	20000726 	beq	r4,zero,8f78 <__mulsi3+0x24>
    8f5c:	20c0004c 	andi	r3,r4,1
    8f60:	2008d07a 	srli	r4,r4,1
    8f64:	18000126 	beq	r3,zero,8f6c <__mulsi3+0x18>
    8f68:	1145883a 	add	r2,r2,r5
    8f6c:	294b883a 	add	r5,r5,r5
    8f70:	203ffa1e 	bne	r4,zero,8f5c <_gp+0xffff63ec>
    8f74:	f800283a 	ret
    8f78:	f800283a 	ret

00008f7c <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    8f7c:	defffc04 	addi	sp,sp,-16
    8f80:	df000315 	stw	fp,12(sp)
    8f84:	df000304 	addi	fp,sp,12
    8f88:	e13ffd15 	stw	r4,-12(fp)
    8f8c:	e17ffe15 	stw	r5,-8(fp)
    8f90:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    8f94:	e0fffe17 	ldw	r3,-8(fp)
    8f98:	e0bffd17 	ldw	r2,-12(fp)
    8f9c:	18800c26 	beq	r3,r2,8fd0 <alt_load_section+0x54>
  {
    while( to != end )
    8fa0:	00000806 	br	8fc4 <alt_load_section+0x48>
    {
      *to++ = *from++;
    8fa4:	e0bffe17 	ldw	r2,-8(fp)
    8fa8:	10c00104 	addi	r3,r2,4
    8fac:	e0fffe15 	stw	r3,-8(fp)
    8fb0:	e0fffd17 	ldw	r3,-12(fp)
    8fb4:	19000104 	addi	r4,r3,4
    8fb8:	e13ffd15 	stw	r4,-12(fp)
    8fbc:	18c00017 	ldw	r3,0(r3)
    8fc0:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    8fc4:	e0fffe17 	ldw	r3,-8(fp)
    8fc8:	e0bfff17 	ldw	r2,-4(fp)
    8fcc:	18bff51e 	bne	r3,r2,8fa4 <_gp+0xffff6434>
    {
      *to++ = *from++;
    }
  }
}
    8fd0:	0001883a 	nop
    8fd4:	e037883a 	mov	sp,fp
    8fd8:	df000017 	ldw	fp,0(sp)
    8fdc:	dec00104 	addi	sp,sp,4
    8fe0:	f800283a 	ret

00008fe4 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    8fe4:	defffe04 	addi	sp,sp,-8
    8fe8:	dfc00115 	stw	ra,4(sp)
    8fec:	df000015 	stw	fp,0(sp)
    8ff0:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    8ff4:	01800074 	movhi	r6,1
    8ff8:	31aae704 	addi	r6,r6,-21604
    8ffc:	01400074 	movhi	r5,1
    9000:	296a2f04 	addi	r5,r5,-22340
    9004:	01000074 	movhi	r4,1
    9008:	212ae704 	addi	r4,r4,-21604
    900c:	0008f7c0 	call	8f7c <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    9010:	01800074 	movhi	r6,1
    9014:	31a08c04 	addi	r6,r6,-32208
    9018:	01400074 	movhi	r5,1
    901c:	29600804 	addi	r5,r5,-32736
    9020:	01000074 	movhi	r4,1
    9024:	21200804 	addi	r4,r4,-32736
    9028:	0008f7c0 	call	8f7c <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    902c:	01800074 	movhi	r6,1
    9030:	31aa2f04 	addi	r6,r6,-22340
    9034:	01400074 	movhi	r5,1
    9038:	296a1d04 	addi	r5,r5,-22412
    903c:	01000074 	movhi	r4,1
    9040:	212a1d04 	addi	r4,r4,-22412
    9044:	0008f7c0 	call	8f7c <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    9048:	00097200 	call	9720 <alt_dcache_flush_all>
  alt_icache_flush_all();
    904c:	000990c0 	call	990c <alt_icache_flush_all>
}
    9050:	0001883a 	nop
    9054:	e037883a 	mov	sp,fp
    9058:	dfc00117 	ldw	ra,4(sp)
    905c:	df000017 	ldw	fp,0(sp)
    9060:	dec00204 	addi	sp,sp,8
    9064:	f800283a 	ret

00009068 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    9068:	defffd04 	addi	sp,sp,-12
    906c:	dfc00215 	stw	ra,8(sp)
    9070:	df000115 	stw	fp,4(sp)
    9074:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    9078:	0009883a 	mov	r4,zero
    907c:	00092540 	call	9254 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
    9080:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    9084:	000928c0 	call	928c <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    9088:	01800074 	movhi	r6,1
    908c:	31aa2204 	addi	r6,r6,-22392
    9090:	01400074 	movhi	r5,1
    9094:	296a2204 	addi	r5,r5,-22392
    9098:	01000074 	movhi	r4,1
    909c:	212a2204 	addi	r4,r4,-22392
    90a0:	0009cb00 	call	9cb0 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    90a4:	000984c0 	call	984c <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    90a8:	01000074 	movhi	r4,1
    90ac:	21262b04 	addi	r4,r4,-26452
    90b0:	000a4f40 	call	a4f4 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    90b4:	d0a0c417 	ldw	r2,-31984(gp)
    90b8:	d0e0c517 	ldw	r3,-31980(gp)
    90bc:	d120c617 	ldw	r4,-31976(gp)
    90c0:	200d883a 	mov	r6,r4
    90c4:	180b883a 	mov	r5,r3
    90c8:	1009883a 	mov	r4,r2
    90cc:	00083880 	call	8388 <main>
    90d0:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    90d4:	01000044 	movi	r4,1
    90d8:	00096480 	call	9648 <close>
  exit (result);
    90dc:	e13fff17 	ldw	r4,-4(fp)
    90e0:	000a5080 	call	a508 <exit>

000090e4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    90e4:	defffe04 	addi	sp,sp,-8
    90e8:	dfc00115 	stw	ra,4(sp)
    90ec:	df000015 	stw	fp,0(sp)
    90f0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    90f4:	d0a00717 	ldw	r2,-32740(gp)
    90f8:	10000326 	beq	r2,zero,9108 <alt_get_errno+0x24>
    90fc:	d0a00717 	ldw	r2,-32740(gp)
    9100:	103ee83a 	callr	r2
    9104:	00000106 	br	910c <alt_get_errno+0x28>
    9108:	d0a0c304 	addi	r2,gp,-31988
}
    910c:	e037883a 	mov	sp,fp
    9110:	dfc00117 	ldw	ra,4(sp)
    9114:	df000017 	ldw	fp,0(sp)
    9118:	dec00204 	addi	sp,sp,8
    911c:	f800283a 	ret

00009120 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    9120:	defff904 	addi	sp,sp,-28
    9124:	dfc00615 	stw	ra,24(sp)
    9128:	df000515 	stw	fp,20(sp)
    912c:	df000504 	addi	fp,sp,20
    9130:	e13ffd15 	stw	r4,-12(fp)
    9134:	e17ffe15 	stw	r5,-8(fp)
    9138:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    913c:	e0bffd17 	ldw	r2,-12(fp)
    9140:	10000816 	blt	r2,zero,9164 <write+0x44>
    9144:	01400304 	movi	r5,12
    9148:	e13ffd17 	ldw	r4,-12(fp)
    914c:	0008f540 	call	8f54 <__mulsi3>
    9150:	1007883a 	mov	r3,r2
    9154:	00800074 	movhi	r2,1
    9158:	10aa7c04 	addi	r2,r2,-22032
    915c:	1885883a 	add	r2,r3,r2
    9160:	00000106 	br	9168 <write+0x48>
    9164:	0005883a 	mov	r2,zero
    9168:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    916c:	e0bffb17 	ldw	r2,-20(fp)
    9170:	10002126 	beq	r2,zero,91f8 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    9174:	e0bffb17 	ldw	r2,-20(fp)
    9178:	10800217 	ldw	r2,8(r2)
    917c:	108000cc 	andi	r2,r2,3
    9180:	10001826 	beq	r2,zero,91e4 <write+0xc4>
    9184:	e0bffb17 	ldw	r2,-20(fp)
    9188:	10800017 	ldw	r2,0(r2)
    918c:	10800617 	ldw	r2,24(r2)
    9190:	10001426 	beq	r2,zero,91e4 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    9194:	e0bffb17 	ldw	r2,-20(fp)
    9198:	10800017 	ldw	r2,0(r2)
    919c:	10800617 	ldw	r2,24(r2)
    91a0:	e0ffff17 	ldw	r3,-4(fp)
    91a4:	180d883a 	mov	r6,r3
    91a8:	e17ffe17 	ldw	r5,-8(fp)
    91ac:	e13ffb17 	ldw	r4,-20(fp)
    91b0:	103ee83a 	callr	r2
    91b4:	e0bffc15 	stw	r2,-16(fp)
    91b8:	e0bffc17 	ldw	r2,-16(fp)
    91bc:	1000070e 	bge	r2,zero,91dc <write+0xbc>
      {
        ALT_ERRNO = -rval;
    91c0:	00090e40 	call	90e4 <alt_get_errno>
    91c4:	1007883a 	mov	r3,r2
    91c8:	e0bffc17 	ldw	r2,-16(fp)
    91cc:	0085c83a 	sub	r2,zero,r2
    91d0:	18800015 	stw	r2,0(r3)
        return -1;
    91d4:	00bfffc4 	movi	r2,-1
    91d8:	00000c06 	br	920c <write+0xec>
      }
      return rval;
    91dc:	e0bffc17 	ldw	r2,-16(fp)
    91e0:	00000a06 	br	920c <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
    91e4:	00090e40 	call	90e4 <alt_get_errno>
    91e8:	1007883a 	mov	r3,r2
    91ec:	00800344 	movi	r2,13
    91f0:	18800015 	stw	r2,0(r3)
    91f4:	00000406 	br	9208 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    91f8:	00090e40 	call	90e4 <alt_get_errno>
    91fc:	1007883a 	mov	r3,r2
    9200:	00801444 	movi	r2,81
    9204:	18800015 	stw	r2,0(r3)
  }
  return -1;
    9208:	00bfffc4 	movi	r2,-1
}
    920c:	e037883a 	mov	sp,fp
    9210:	dfc00117 	ldw	ra,4(sp)
    9214:	df000017 	ldw	fp,0(sp)
    9218:	dec00204 	addi	sp,sp,8
    921c:	f800283a 	ret

00009220 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    9220:	defffd04 	addi	sp,sp,-12
    9224:	dfc00215 	stw	ra,8(sp)
    9228:	df000115 	stw	fp,4(sp)
    922c:	df000104 	addi	fp,sp,4
    9230:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    9234:	d1600404 	addi	r5,gp,-32752
    9238:	e13fff17 	ldw	r4,-4(fp)
    923c:	00097a80 	call	97a8 <alt_dev_llist_insert>
}
    9240:	e037883a 	mov	sp,fp
    9244:	dfc00117 	ldw	ra,4(sp)
    9248:	df000017 	ldw	fp,0(sp)
    924c:	dec00204 	addi	sp,sp,8
    9250:	f800283a 	ret

00009254 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    9254:	defffd04 	addi	sp,sp,-12
    9258:	dfc00215 	stw	ra,8(sp)
    925c:	df000115 	stw	fp,4(sp)
    9260:	df000104 	addi	fp,sp,4
    9264:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
    9268:	000a1d80 	call	a1d8 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    926c:	00800044 	movi	r2,1
    9270:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    9274:	0001883a 	nop
    9278:	e037883a 	mov	sp,fp
    927c:	dfc00117 	ldw	ra,4(sp)
    9280:	df000017 	ldw	fp,0(sp)
    9284:	dec00204 	addi	sp,sp,8
    9288:	f800283a 	ret

0000928c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    928c:	defffe04 	addi	sp,sp,-8
    9290:	dfc00115 	stw	ra,4(sp)
    9294:	df000015 	stw	fp,0(sp)
    9298:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( SYS_TIMER, sys_timer);
    929c:	01c0fa04 	movi	r7,1000
    92a0:	000d883a 	mov	r6,zero
    92a4:	000b883a 	mov	r5,zero
    92a8:	01000074 	movhi	r4,1
    92ac:	21040004 	addi	r4,r4,4096
    92b0:	00095900 	call	9590 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
    92b4:	01000074 	movhi	r4,1
    92b8:	212a6704 	addi	r4,r4,-22116
    92bc:	00092200 	call	9220 <alt_dev_reg>
}
    92c0:	0001883a 	nop
    92c4:	e037883a 	mov	sp,fp
    92c8:	dfc00117 	ldw	ra,4(sp)
    92cc:	df000017 	ldw	fp,0(sp)
    92d0:	dec00204 	addi	sp,sp,8
    92d4:	f800283a 	ret

000092d8 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    92d8:	defffa04 	addi	sp,sp,-24
    92dc:	dfc00515 	stw	ra,20(sp)
    92e0:	df000415 	stw	fp,16(sp)
    92e4:	df000404 	addi	fp,sp,16
    92e8:	e13ffd15 	stw	r4,-12(fp)
    92ec:	e17ffe15 	stw	r5,-8(fp)
    92f0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    92f4:	e0bffd17 	ldw	r2,-12(fp)
    92f8:	10800017 	ldw	r2,0(r2)
    92fc:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    9300:	e0bffc17 	ldw	r2,-16(fp)
    9304:	10c00a04 	addi	r3,r2,40
    9308:	e0bffd17 	ldw	r2,-12(fp)
    930c:	10800217 	ldw	r2,8(r2)
    9310:	100f883a 	mov	r7,r2
    9314:	e1bfff17 	ldw	r6,-4(fp)
    9318:	e17ffe17 	ldw	r5,-8(fp)
    931c:	1809883a 	mov	r4,r3
    9320:	00093980 	call	9398 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    9324:	e037883a 	mov	sp,fp
    9328:	dfc00117 	ldw	ra,4(sp)
    932c:	df000017 	ldw	fp,0(sp)
    9330:	dec00204 	addi	sp,sp,8
    9334:	f800283a 	ret

00009338 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    9338:	defffa04 	addi	sp,sp,-24
    933c:	dfc00515 	stw	ra,20(sp)
    9340:	df000415 	stw	fp,16(sp)
    9344:	df000404 	addi	fp,sp,16
    9348:	e13ffd15 	stw	r4,-12(fp)
    934c:	e17ffe15 	stw	r5,-8(fp)
    9350:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    9354:	e0bffd17 	ldw	r2,-12(fp)
    9358:	10800017 	ldw	r2,0(r2)
    935c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    9360:	e0bffc17 	ldw	r2,-16(fp)
    9364:	10c00a04 	addi	r3,r2,40
    9368:	e0bffd17 	ldw	r2,-12(fp)
    936c:	10800217 	ldw	r2,8(r2)
    9370:	100f883a 	mov	r7,r2
    9374:	e1bfff17 	ldw	r6,-4(fp)
    9378:	e17ffe17 	ldw	r5,-8(fp)
    937c:	1809883a 	mov	r4,r3
    9380:	00094840 	call	9484 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    9384:	e037883a 	mov	sp,fp
    9388:	dfc00117 	ldw	ra,4(sp)
    938c:	df000017 	ldw	fp,0(sp)
    9390:	dec00204 	addi	sp,sp,8
    9394:	f800283a 	ret

00009398 <altera_avalon_jtag_uart_read>:
 */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
    9398:	defff704 	addi	sp,sp,-36
    939c:	df000815 	stw	fp,32(sp)
    93a0:	df000804 	addi	fp,sp,32
    93a4:	e13ffc15 	stw	r4,-16(fp)
    93a8:	e17ffd15 	stw	r5,-12(fp)
    93ac:	e1bffe15 	stw	r6,-8(fp)
    93b0:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
    93b4:	e0bffc17 	ldw	r2,-16(fp)
    93b8:	10800017 	ldw	r2,0(r2)
    93bc:	e0bff915 	stw	r2,-28(fp)

  char * ptr = buffer;
    93c0:	e0bffd17 	ldw	r2,-12(fp)
    93c4:	e0bff815 	stw	r2,-32(fp)
  char * end = buffer + space;
    93c8:	e0bffe17 	ldw	r2,-8(fp)
    93cc:	e0fffd17 	ldw	r3,-12(fp)
    93d0:	1885883a 	add	r2,r3,r2
    93d4:	e0bffa15 	stw	r2,-24(fp)

  while (ptr < end)
    93d8:	00001206 	br	9424 <altera_avalon_jtag_uart_read+0x8c>
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    93dc:	e0bff917 	ldw	r2,-28(fp)
    93e0:	10800037 	ldwio	r2,0(r2)
    93e4:	e0bffb15 	stw	r2,-20(fp)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
    93e8:	e0bffb17 	ldw	r2,-20(fp)
    93ec:	10a0000c 	andi	r2,r2,32768
    93f0:	10000626 	beq	r2,zero,940c <altera_avalon_jtag_uart_read+0x74>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    93f4:	e0bff817 	ldw	r2,-32(fp)
    93f8:	10c00044 	addi	r3,r2,1
    93fc:	e0fff815 	stw	r3,-32(fp)
    9400:	e0fffb17 	ldw	r3,-20(fp)
    9404:	10c00005 	stb	r3,0(r2)
    9408:	00000606 	br	9424 <altera_avalon_jtag_uart_read+0x8c>
    else if (ptr != buffer)
    940c:	e0fff817 	ldw	r3,-32(fp)
    9410:	e0bffd17 	ldw	r2,-12(fp)
    9414:	1880071e 	bne	r3,r2,9434 <altera_avalon_jtag_uart_read+0x9c>
      break;
    else if(flags & O_NONBLOCK)
    9418:	e0bfff17 	ldw	r2,-4(fp)
    941c:	1090000c 	andi	r2,r2,16384
    9420:	1000061e 	bne	r2,zero,943c <altera_avalon_jtag_uart_read+0xa4>
  unsigned int base = sp->base;

  char * ptr = buffer;
  char * end = buffer + space;

  while (ptr < end)
    9424:	e0fff817 	ldw	r3,-32(fp)
    9428:	e0bffa17 	ldw	r2,-24(fp)
    942c:	18bfeb36 	bltu	r3,r2,93dc <_gp+0xffff686c>
    9430:	00000306 	br	9440 <altera_avalon_jtag_uart_read+0xa8>
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    else if (ptr != buffer)
      break;
    9434:	0001883a 	nop
    9438:	00000106 	br	9440 <altera_avalon_jtag_uart_read+0xa8>
    else if(flags & O_NONBLOCK)
      break;   
    943c:	0001883a 	nop
    
  }

  if (ptr != buffer)
    9440:	e0fff817 	ldw	r3,-32(fp)
    9444:	e0bffd17 	ldw	r2,-12(fp)
    9448:	18800426 	beq	r3,r2,945c <altera_avalon_jtag_uart_read+0xc4>
    return ptr - buffer;
    944c:	e0fff817 	ldw	r3,-32(fp)
    9450:	e0bffd17 	ldw	r2,-12(fp)
    9454:	1885c83a 	sub	r2,r3,r2
    9458:	00000606 	br	9474 <altera_avalon_jtag_uart_read+0xdc>
  else if (flags & O_NONBLOCK)
    945c:	e0bfff17 	ldw	r2,-4(fp)
    9460:	1090000c 	andi	r2,r2,16384
    9464:	10000226 	beq	r2,zero,9470 <altera_avalon_jtag_uart_read+0xd8>
    return -EWOULDBLOCK;
    9468:	00bffd44 	movi	r2,-11
    946c:	00000106 	br	9474 <altera_avalon_jtag_uart_read+0xdc>
  else
    return -EIO;
    9470:	00bffec4 	movi	r2,-5
}
    9474:	e037883a 	mov	sp,fp
    9478:	df000017 	ldw	fp,0(sp)
    947c:	dec00104 	addi	sp,sp,4
    9480:	f800283a 	ret

00009484 <altera_avalon_jtag_uart_write>:
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    9484:	defff904 	addi	sp,sp,-28
    9488:	df000615 	stw	fp,24(sp)
    948c:	df000604 	addi	fp,sp,24
    9490:	e13ffc15 	stw	r4,-16(fp)
    9494:	e17ffd15 	stw	r5,-12(fp)
    9498:	e1bffe15 	stw	r6,-8(fp)
    949c:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
    94a0:	e0bffc17 	ldw	r2,-16(fp)
    94a4:	10800017 	ldw	r2,0(r2)
    94a8:	e0bffa15 	stw	r2,-24(fp)

  const char * end = ptr + count;
    94ac:	e0bffe17 	ldw	r2,-8(fp)
    94b0:	e0fffd17 	ldw	r3,-12(fp)
    94b4:	1885883a 	add	r2,r3,r2
    94b8:	e0bffb15 	stw	r2,-20(fp)

  while (ptr < end)
    94bc:	00000e06 	br	94f8 <altera_avalon_jtag_uart_write+0x74>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    94c0:	e0bffa17 	ldw	r2,-24(fp)
    94c4:	10800104 	addi	r2,r2,4
    94c8:	10800037 	ldwio	r2,0(r2)
    94cc:	10bfffec 	andhi	r2,r2,65535
    94d0:	10000926 	beq	r2,zero,94f8 <altera_avalon_jtag_uart_write+0x74>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
    94d4:	e0fffa17 	ldw	r3,-24(fp)
    94d8:	e0bffd17 	ldw	r2,-12(fp)
    94dc:	11000044 	addi	r4,r2,1
    94e0:	e13ffd15 	stw	r4,-12(fp)
    94e4:	10800003 	ldbu	r2,0(r2)
    94e8:	10803fcc 	andi	r2,r2,255
    94ec:	1080201c 	xori	r2,r2,128
    94f0:	10bfe004 	addi	r2,r2,-128
    94f4:	18800035 	stwio	r2,0(r3)
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
    94f8:	e0fffd17 	ldw	r3,-12(fp)
    94fc:	e0bffb17 	ldw	r2,-20(fp)
    9500:	18bfef36 	bltu	r3,r2,94c0 <_gp+0xffff6950>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
    9504:	e0bffe17 	ldw	r2,-8(fp)
}
    9508:	e037883a 	mov	sp,fp
    950c:	df000017 	ldw	fp,0(sp)
    9510:	dec00104 	addi	sp,sp,4
    9514:	f800283a 	ret

00009518 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
    9518:	defffa04 	addi	sp,sp,-24
    951c:	dfc00515 	stw	ra,20(sp)
    9520:	df000415 	stw	fp,16(sp)
    9524:	df000404 	addi	fp,sp,16
    9528:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
    952c:	0007883a 	mov	r3,zero
    9530:	e0bfff17 	ldw	r2,-4(fp)
    9534:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
    9538:	e0bfff17 	ldw	r2,-4(fp)
    953c:	10800104 	addi	r2,r2,4
    9540:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    9544:	0005303a 	rdctl	r2,status
    9548:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    954c:	e0fffd17 	ldw	r3,-12(fp)
    9550:	00bfff84 	movi	r2,-2
    9554:	1884703a 	and	r2,r3,r2
    9558:	1001703a 	wrctl	status,r2
  
  return context;
    955c:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
    9560:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
    9564:	000a0d00 	call	a0d0 <alt_tick>
    9568:	e0bffc17 	ldw	r2,-16(fp)
    956c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    9570:	e0bffe17 	ldw	r2,-8(fp)
    9574:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
    9578:	0001883a 	nop
    957c:	e037883a 	mov	sp,fp
    9580:	dfc00117 	ldw	ra,4(sp)
    9584:	df000017 	ldw	fp,0(sp)
    9588:	dec00204 	addi	sp,sp,8
    958c:	f800283a 	ret

00009590 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
    9590:	defff804 	addi	sp,sp,-32
    9594:	dfc00715 	stw	ra,28(sp)
    9598:	df000615 	stw	fp,24(sp)
    959c:	df000604 	addi	fp,sp,24
    95a0:	e13ffc15 	stw	r4,-16(fp)
    95a4:	e17ffd15 	stw	r5,-12(fp)
    95a8:	e1bffe15 	stw	r6,-8(fp)
    95ac:	e1ffff15 	stw	r7,-4(fp)
    95b0:	e0bfff17 	ldw	r2,-4(fp)
    95b4:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
    95b8:	d0a0c817 	ldw	r2,-31968(gp)
    95bc:	1000021e 	bne	r2,zero,95c8 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
    95c0:	e0bffb17 	ldw	r2,-20(fp)
    95c4:	d0a0c815 	stw	r2,-31968(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
    95c8:	e0bffc17 	ldw	r2,-16(fp)
    95cc:	10800104 	addi	r2,r2,4
    95d0:	00c001c4 	movi	r3,7
    95d4:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
    95d8:	d8000015 	stw	zero,0(sp)
    95dc:	e1fffc17 	ldw	r7,-16(fp)
    95e0:	01800074 	movhi	r6,1
    95e4:	31a54604 	addi	r6,r6,-27368
    95e8:	e17ffe17 	ldw	r5,-8(fp)
    95ec:	e13ffd17 	ldw	r4,-12(fp)
    95f0:	000992c0 	call	992c <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
    95f4:	0001883a 	nop
    95f8:	e037883a 	mov	sp,fp
    95fc:	dfc00117 	ldw	ra,4(sp)
    9600:	df000017 	ldw	fp,0(sp)
    9604:	dec00204 	addi	sp,sp,8
    9608:	f800283a 	ret

0000960c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    960c:	defffe04 	addi	sp,sp,-8
    9610:	dfc00115 	stw	ra,4(sp)
    9614:	df000015 	stw	fp,0(sp)
    9618:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    961c:	d0a00717 	ldw	r2,-32740(gp)
    9620:	10000326 	beq	r2,zero,9630 <alt_get_errno+0x24>
    9624:	d0a00717 	ldw	r2,-32740(gp)
    9628:	103ee83a 	callr	r2
    962c:	00000106 	br	9634 <alt_get_errno+0x28>
    9630:	d0a0c304 	addi	r2,gp,-31988
}
    9634:	e037883a 	mov	sp,fp
    9638:	dfc00117 	ldw	ra,4(sp)
    963c:	df000017 	ldw	fp,0(sp)
    9640:	dec00204 	addi	sp,sp,8
    9644:	f800283a 	ret

00009648 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    9648:	defffb04 	addi	sp,sp,-20
    964c:	dfc00415 	stw	ra,16(sp)
    9650:	df000315 	stw	fp,12(sp)
    9654:	df000304 	addi	fp,sp,12
    9658:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    965c:	e0bfff17 	ldw	r2,-4(fp)
    9660:	10000816 	blt	r2,zero,9684 <close+0x3c>
    9664:	01400304 	movi	r5,12
    9668:	e13fff17 	ldw	r4,-4(fp)
    966c:	0008f540 	call	8f54 <__mulsi3>
    9670:	1007883a 	mov	r3,r2
    9674:	00800074 	movhi	r2,1
    9678:	10aa7c04 	addi	r2,r2,-22032
    967c:	1885883a 	add	r2,r3,r2
    9680:	00000106 	br	9688 <close+0x40>
    9684:	0005883a 	mov	r2,zero
    9688:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
    968c:	e0bffd17 	ldw	r2,-12(fp)
    9690:	10001926 	beq	r2,zero,96f8 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    9694:	e0bffd17 	ldw	r2,-12(fp)
    9698:	10800017 	ldw	r2,0(r2)
    969c:	10800417 	ldw	r2,16(r2)
    96a0:	10000626 	beq	r2,zero,96bc <close+0x74>
    96a4:	e0bffd17 	ldw	r2,-12(fp)
    96a8:	10800017 	ldw	r2,0(r2)
    96ac:	10800417 	ldw	r2,16(r2)
    96b0:	e13ffd17 	ldw	r4,-12(fp)
    96b4:	103ee83a 	callr	r2
    96b8:	00000106 	br	96c0 <close+0x78>
    96bc:	0005883a 	mov	r2,zero
    96c0:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    96c4:	e13fff17 	ldw	r4,-4(fp)
    96c8:	0009fb00 	call	9fb0 <alt_release_fd>
    if (rval < 0)
    96cc:	e0bffe17 	ldw	r2,-8(fp)
    96d0:	1000070e 	bge	r2,zero,96f0 <close+0xa8>
    {
      ALT_ERRNO = -rval;
    96d4:	000960c0 	call	960c <alt_get_errno>
    96d8:	1007883a 	mov	r3,r2
    96dc:	e0bffe17 	ldw	r2,-8(fp)
    96e0:	0085c83a 	sub	r2,zero,r2
    96e4:	18800015 	stw	r2,0(r3)
      return -1;
    96e8:	00bfffc4 	movi	r2,-1
    96ec:	00000706 	br	970c <close+0xc4>
    }
    return 0;
    96f0:	0005883a 	mov	r2,zero
    96f4:	00000506 	br	970c <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    96f8:	000960c0 	call	960c <alt_get_errno>
    96fc:	1007883a 	mov	r3,r2
    9700:	00801444 	movi	r2,81
    9704:	18800015 	stw	r2,0(r3)
    return -1;
    9708:	00bfffc4 	movi	r2,-1
  }
}
    970c:	e037883a 	mov	sp,fp
    9710:	dfc00117 	ldw	ra,4(sp)
    9714:	df000017 	ldw	fp,0(sp)
    9718:	dec00204 	addi	sp,sp,8
    971c:	f800283a 	ret

00009720 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    9720:	deffff04 	addi	sp,sp,-4
    9724:	df000015 	stw	fp,0(sp)
    9728:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    972c:	0001883a 	nop
    9730:	e037883a 	mov	sp,fp
    9734:	df000017 	ldw	fp,0(sp)
    9738:	dec00104 	addi	sp,sp,4
    973c:	f800283a 	ret

00009740 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    9740:	defffc04 	addi	sp,sp,-16
    9744:	df000315 	stw	fp,12(sp)
    9748:	df000304 	addi	fp,sp,12
    974c:	e13ffd15 	stw	r4,-12(fp)
    9750:	e17ffe15 	stw	r5,-8(fp)
    9754:	e1bfff15 	stw	r6,-4(fp)
  return len;
    9758:	e0bfff17 	ldw	r2,-4(fp)
}
    975c:	e037883a 	mov	sp,fp
    9760:	df000017 	ldw	fp,0(sp)
    9764:	dec00104 	addi	sp,sp,4
    9768:	f800283a 	ret

0000976c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    976c:	defffe04 	addi	sp,sp,-8
    9770:	dfc00115 	stw	ra,4(sp)
    9774:	df000015 	stw	fp,0(sp)
    9778:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    977c:	d0a00717 	ldw	r2,-32740(gp)
    9780:	10000326 	beq	r2,zero,9790 <alt_get_errno+0x24>
    9784:	d0a00717 	ldw	r2,-32740(gp)
    9788:	103ee83a 	callr	r2
    978c:	00000106 	br	9794 <alt_get_errno+0x28>
    9790:	d0a0c304 	addi	r2,gp,-31988
}
    9794:	e037883a 	mov	sp,fp
    9798:	dfc00117 	ldw	ra,4(sp)
    979c:	df000017 	ldw	fp,0(sp)
    97a0:	dec00204 	addi	sp,sp,8
    97a4:	f800283a 	ret

000097a8 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    97a8:	defffa04 	addi	sp,sp,-24
    97ac:	dfc00515 	stw	ra,20(sp)
    97b0:	df000415 	stw	fp,16(sp)
    97b4:	df000404 	addi	fp,sp,16
    97b8:	e13ffe15 	stw	r4,-8(fp)
    97bc:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    97c0:	e0bffe17 	ldw	r2,-8(fp)
    97c4:	10000326 	beq	r2,zero,97d4 <alt_dev_llist_insert+0x2c>
    97c8:	e0bffe17 	ldw	r2,-8(fp)
    97cc:	10800217 	ldw	r2,8(r2)
    97d0:	1000061e 	bne	r2,zero,97ec <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
    97d4:	000976c0 	call	976c <alt_get_errno>
    97d8:	1007883a 	mov	r3,r2
    97dc:	00800584 	movi	r2,22
    97e0:	18800015 	stw	r2,0(r3)
    return -EINVAL;
    97e4:	00bffa84 	movi	r2,-22
    97e8:	00001306 	br	9838 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
    97ec:	e0bffe17 	ldw	r2,-8(fp)
    97f0:	e0ffff17 	ldw	r3,-4(fp)
    97f4:	e0fffc15 	stw	r3,-16(fp)
    97f8:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    97fc:	e0bffd17 	ldw	r2,-12(fp)
    9800:	e0fffc17 	ldw	r3,-16(fp)
    9804:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    9808:	e0bffc17 	ldw	r2,-16(fp)
    980c:	10c00017 	ldw	r3,0(r2)
    9810:	e0bffd17 	ldw	r2,-12(fp)
    9814:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    9818:	e0bffc17 	ldw	r2,-16(fp)
    981c:	10800017 	ldw	r2,0(r2)
    9820:	e0fffd17 	ldw	r3,-12(fp)
    9824:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    9828:	e0bffc17 	ldw	r2,-16(fp)
    982c:	e0fffd17 	ldw	r3,-12(fp)
    9830:	10c00015 	stw	r3,0(r2)

  return 0;  
    9834:	0005883a 	mov	r2,zero
}
    9838:	e037883a 	mov	sp,fp
    983c:	dfc00117 	ldw	ra,4(sp)
    9840:	df000017 	ldw	fp,0(sp)
    9844:	dec00204 	addi	sp,sp,8
    9848:	f800283a 	ret

0000984c <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
    984c:	defffd04 	addi	sp,sp,-12
    9850:	dfc00215 	stw	ra,8(sp)
    9854:	df000115 	stw	fp,4(sp)
    9858:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    985c:	00800074 	movhi	r2,1
    9860:	10aa1c04 	addi	r2,r2,-22416
    9864:	e0bfff15 	stw	r2,-4(fp)
    9868:	00000606 	br	9884 <_do_ctors+0x38>
        (*ctor) (); 
    986c:	e0bfff17 	ldw	r2,-4(fp)
    9870:	10800017 	ldw	r2,0(r2)
    9874:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    9878:	e0bfff17 	ldw	r2,-4(fp)
    987c:	10bfff04 	addi	r2,r2,-4
    9880:	e0bfff15 	stw	r2,-4(fp)
    9884:	e0ffff17 	ldw	r3,-4(fp)
    9888:	00800074 	movhi	r2,1
    988c:	10aa1d04 	addi	r2,r2,-22412
    9890:	18bff62e 	bgeu	r3,r2,986c <_gp+0xffff6cfc>
        (*ctor) (); 
}
    9894:	0001883a 	nop
    9898:	e037883a 	mov	sp,fp
    989c:	dfc00117 	ldw	ra,4(sp)
    98a0:	df000017 	ldw	fp,0(sp)
    98a4:	dec00204 	addi	sp,sp,8
    98a8:	f800283a 	ret

000098ac <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
    98ac:	defffd04 	addi	sp,sp,-12
    98b0:	dfc00215 	stw	ra,8(sp)
    98b4:	df000115 	stw	fp,4(sp)
    98b8:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    98bc:	00800074 	movhi	r2,1
    98c0:	10aa1c04 	addi	r2,r2,-22416
    98c4:	e0bfff15 	stw	r2,-4(fp)
    98c8:	00000606 	br	98e4 <_do_dtors+0x38>
        (*dtor) (); 
    98cc:	e0bfff17 	ldw	r2,-4(fp)
    98d0:	10800017 	ldw	r2,0(r2)
    98d4:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    98d8:	e0bfff17 	ldw	r2,-4(fp)
    98dc:	10bfff04 	addi	r2,r2,-4
    98e0:	e0bfff15 	stw	r2,-4(fp)
    98e4:	e0ffff17 	ldw	r3,-4(fp)
    98e8:	00800074 	movhi	r2,1
    98ec:	10aa1d04 	addi	r2,r2,-22412
    98f0:	18bff62e 	bgeu	r3,r2,98cc <_gp+0xffff6d5c>
        (*dtor) (); 
}
    98f4:	0001883a 	nop
    98f8:	e037883a 	mov	sp,fp
    98fc:	dfc00117 	ldw	ra,4(sp)
    9900:	df000017 	ldw	fp,0(sp)
    9904:	dec00204 	addi	sp,sp,8
    9908:	f800283a 	ret

0000990c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    990c:	deffff04 	addi	sp,sp,-4
    9910:	df000015 	stw	fp,0(sp)
    9914:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
    9918:	0001883a 	nop
    991c:	e037883a 	mov	sp,fp
    9920:	df000017 	ldw	fp,0(sp)
    9924:	dec00104 	addi	sp,sp,4
    9928:	f800283a 	ret

0000992c <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    992c:	defff904 	addi	sp,sp,-28
    9930:	dfc00615 	stw	ra,24(sp)
    9934:	df000515 	stw	fp,20(sp)
    9938:	df000504 	addi	fp,sp,20
    993c:	e13ffc15 	stw	r4,-16(fp)
    9940:	e17ffd15 	stw	r5,-12(fp)
    9944:	e1bffe15 	stw	r6,-8(fp)
    9948:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
    994c:	e0800217 	ldw	r2,8(fp)
    9950:	d8800015 	stw	r2,0(sp)
    9954:	e1ffff17 	ldw	r7,-4(fp)
    9958:	e1bffe17 	ldw	r6,-8(fp)
    995c:	e17ffd17 	ldw	r5,-12(fp)
    9960:	e13ffc17 	ldw	r4,-16(fp)
    9964:	0009adc0 	call	9adc <alt_iic_isr_register>
}  
    9968:	e037883a 	mov	sp,fp
    996c:	dfc00117 	ldw	ra,4(sp)
    9970:	df000017 	ldw	fp,0(sp)
    9974:	dec00204 	addi	sp,sp,8
    9978:	f800283a 	ret

0000997c <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    997c:	defff904 	addi	sp,sp,-28
    9980:	df000615 	stw	fp,24(sp)
    9984:	df000604 	addi	fp,sp,24
    9988:	e13ffe15 	stw	r4,-8(fp)
    998c:	e17fff15 	stw	r5,-4(fp)
    9990:	e0bfff17 	ldw	r2,-4(fp)
    9994:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    9998:	0005303a 	rdctl	r2,status
    999c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    99a0:	e0fffb17 	ldw	r3,-20(fp)
    99a4:	00bfff84 	movi	r2,-2
    99a8:	1884703a 	and	r2,r3,r2
    99ac:	1001703a 	wrctl	status,r2
  
  return context;
    99b0:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    99b4:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
    99b8:	00c00044 	movi	r3,1
    99bc:	e0bffa17 	ldw	r2,-24(fp)
    99c0:	1884983a 	sll	r2,r3,r2
    99c4:	1007883a 	mov	r3,r2
    99c8:	d0a0c717 	ldw	r2,-31972(gp)
    99cc:	1884b03a 	or	r2,r3,r2
    99d0:	d0a0c715 	stw	r2,-31972(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    99d4:	d0a0c717 	ldw	r2,-31972(gp)
    99d8:	100170fa 	wrctl	ienable,r2
    99dc:	e0bffc17 	ldw	r2,-16(fp)
    99e0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    99e4:	e0bffd17 	ldw	r2,-12(fp)
    99e8:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    99ec:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
    99f0:	0001883a 	nop
}
    99f4:	e037883a 	mov	sp,fp
    99f8:	df000017 	ldw	fp,0(sp)
    99fc:	dec00104 	addi	sp,sp,4
    9a00:	f800283a 	ret

00009a04 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    9a04:	defff904 	addi	sp,sp,-28
    9a08:	df000615 	stw	fp,24(sp)
    9a0c:	df000604 	addi	fp,sp,24
    9a10:	e13ffe15 	stw	r4,-8(fp)
    9a14:	e17fff15 	stw	r5,-4(fp)
    9a18:	e0bfff17 	ldw	r2,-4(fp)
    9a1c:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    9a20:	0005303a 	rdctl	r2,status
    9a24:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    9a28:	e0fffb17 	ldw	r3,-20(fp)
    9a2c:	00bfff84 	movi	r2,-2
    9a30:	1884703a 	and	r2,r3,r2
    9a34:	1001703a 	wrctl	status,r2
  
  return context;
    9a38:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    9a3c:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
    9a40:	00c00044 	movi	r3,1
    9a44:	e0bffa17 	ldw	r2,-24(fp)
    9a48:	1884983a 	sll	r2,r3,r2
    9a4c:	0084303a 	nor	r2,zero,r2
    9a50:	1007883a 	mov	r3,r2
    9a54:	d0a0c717 	ldw	r2,-31972(gp)
    9a58:	1884703a 	and	r2,r3,r2
    9a5c:	d0a0c715 	stw	r2,-31972(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    9a60:	d0a0c717 	ldw	r2,-31972(gp)
    9a64:	100170fa 	wrctl	ienable,r2
    9a68:	e0bffc17 	ldw	r2,-16(fp)
    9a6c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    9a70:	e0bffd17 	ldw	r2,-12(fp)
    9a74:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    9a78:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
    9a7c:	0001883a 	nop
}
    9a80:	e037883a 	mov	sp,fp
    9a84:	df000017 	ldw	fp,0(sp)
    9a88:	dec00104 	addi	sp,sp,4
    9a8c:	f800283a 	ret

00009a90 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    9a90:	defffc04 	addi	sp,sp,-16
    9a94:	df000315 	stw	fp,12(sp)
    9a98:	df000304 	addi	fp,sp,12
    9a9c:	e13ffe15 	stw	r4,-8(fp)
    9aa0:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
    9aa4:	000530fa 	rdctl	r2,ienable
    9aa8:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
    9aac:	00c00044 	movi	r3,1
    9ab0:	e0bfff17 	ldw	r2,-4(fp)
    9ab4:	1884983a 	sll	r2,r3,r2
    9ab8:	1007883a 	mov	r3,r2
    9abc:	e0bffd17 	ldw	r2,-12(fp)
    9ac0:	1884703a 	and	r2,r3,r2
    9ac4:	1004c03a 	cmpne	r2,r2,zero
    9ac8:	10803fcc 	andi	r2,r2,255
}
    9acc:	e037883a 	mov	sp,fp
    9ad0:	df000017 	ldw	fp,0(sp)
    9ad4:	dec00104 	addi	sp,sp,4
    9ad8:	f800283a 	ret

00009adc <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    9adc:	defff504 	addi	sp,sp,-44
    9ae0:	dfc00a15 	stw	ra,40(sp)
    9ae4:	df000915 	stw	fp,36(sp)
    9ae8:	df000904 	addi	fp,sp,36
    9aec:	e13ffc15 	stw	r4,-16(fp)
    9af0:	e17ffd15 	stw	r5,-12(fp)
    9af4:	e1bffe15 	stw	r6,-8(fp)
    9af8:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
    9afc:	00bffa84 	movi	r2,-22
    9b00:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
    9b04:	e0bffd17 	ldw	r2,-12(fp)
    9b08:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
    9b0c:	e0bff817 	ldw	r2,-32(fp)
    9b10:	10800808 	cmpgei	r2,r2,32
    9b14:	1000271e 	bne	r2,zero,9bb4 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    9b18:	0005303a 	rdctl	r2,status
    9b1c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    9b20:	e0fffb17 	ldw	r3,-20(fp)
    9b24:	00bfff84 	movi	r2,-2
    9b28:	1884703a 	and	r2,r3,r2
    9b2c:	1001703a 	wrctl	status,r2
  
  return context;
    9b30:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
    9b34:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
    9b38:	00800074 	movhi	r2,1
    9b3c:	10aba704 	addi	r2,r2,-20836
    9b40:	e0fff817 	ldw	r3,-32(fp)
    9b44:	180690fa 	slli	r3,r3,3
    9b48:	10c5883a 	add	r2,r2,r3
    9b4c:	e0fffe17 	ldw	r3,-8(fp)
    9b50:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
    9b54:	00800074 	movhi	r2,1
    9b58:	10aba704 	addi	r2,r2,-20836
    9b5c:	e0fff817 	ldw	r3,-32(fp)
    9b60:	180690fa 	slli	r3,r3,3
    9b64:	10c5883a 	add	r2,r2,r3
    9b68:	10800104 	addi	r2,r2,4
    9b6c:	e0ffff17 	ldw	r3,-4(fp)
    9b70:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
    9b74:	e0bffe17 	ldw	r2,-8(fp)
    9b78:	10000526 	beq	r2,zero,9b90 <alt_iic_isr_register+0xb4>
    9b7c:	e0bff817 	ldw	r2,-32(fp)
    9b80:	100b883a 	mov	r5,r2
    9b84:	e13ffc17 	ldw	r4,-16(fp)
    9b88:	000997c0 	call	997c <alt_ic_irq_enable>
    9b8c:	00000406 	br	9ba0 <alt_iic_isr_register+0xc4>
    9b90:	e0bff817 	ldw	r2,-32(fp)
    9b94:	100b883a 	mov	r5,r2
    9b98:	e13ffc17 	ldw	r4,-16(fp)
    9b9c:	0009a040 	call	9a04 <alt_ic_irq_disable>
    9ba0:	e0bff715 	stw	r2,-36(fp)
    9ba4:	e0bffa17 	ldw	r2,-24(fp)
    9ba8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    9bac:	e0bff917 	ldw	r2,-28(fp)
    9bb0:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
    9bb4:	e0bff717 	ldw	r2,-36(fp)
}
    9bb8:	e037883a 	mov	sp,fp
    9bbc:	dfc00117 	ldw	ra,4(sp)
    9bc0:	df000017 	ldw	fp,0(sp)
    9bc4:	dec00204 	addi	sp,sp,8
    9bc8:	f800283a 	ret

00009bcc <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    9bcc:	defff804 	addi	sp,sp,-32
    9bd0:	dfc00715 	stw	ra,28(sp)
    9bd4:	df000615 	stw	fp,24(sp)
    9bd8:	dc000515 	stw	r16,20(sp)
    9bdc:	df000604 	addi	fp,sp,24
    9be0:	e13ffb15 	stw	r4,-20(fp)
    9be4:	e17ffc15 	stw	r5,-16(fp)
    9be8:	e1bffd15 	stw	r6,-12(fp)
    9bec:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
    9bf0:	e1bffe17 	ldw	r6,-8(fp)
    9bf4:	e17ffd17 	ldw	r5,-12(fp)
    9bf8:	e13ffc17 	ldw	r4,-16(fp)
    9bfc:	0009e540 	call	9e54 <open>
    9c00:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
    9c04:	e0bffa17 	ldw	r2,-24(fp)
    9c08:	10002216 	blt	r2,zero,9c94 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
    9c0c:	04000074 	movhi	r16,1
    9c10:	842a7c04 	addi	r16,r16,-22032
    9c14:	e0bffa17 	ldw	r2,-24(fp)
    9c18:	01400304 	movi	r5,12
    9c1c:	1009883a 	mov	r4,r2
    9c20:	0008f540 	call	8f54 <__mulsi3>
    9c24:	8085883a 	add	r2,r16,r2
    9c28:	10c00017 	ldw	r3,0(r2)
    9c2c:	e0bffb17 	ldw	r2,-20(fp)
    9c30:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    9c34:	04000074 	movhi	r16,1
    9c38:	842a7c04 	addi	r16,r16,-22032
    9c3c:	e0bffa17 	ldw	r2,-24(fp)
    9c40:	01400304 	movi	r5,12
    9c44:	1009883a 	mov	r4,r2
    9c48:	0008f540 	call	8f54 <__mulsi3>
    9c4c:	8085883a 	add	r2,r16,r2
    9c50:	10800104 	addi	r2,r2,4
    9c54:	10c00017 	ldw	r3,0(r2)
    9c58:	e0bffb17 	ldw	r2,-20(fp)
    9c5c:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    9c60:	04000074 	movhi	r16,1
    9c64:	842a7c04 	addi	r16,r16,-22032
    9c68:	e0bffa17 	ldw	r2,-24(fp)
    9c6c:	01400304 	movi	r5,12
    9c70:	1009883a 	mov	r4,r2
    9c74:	0008f540 	call	8f54 <__mulsi3>
    9c78:	8085883a 	add	r2,r16,r2
    9c7c:	10800204 	addi	r2,r2,8
    9c80:	10c00017 	ldw	r3,0(r2)
    9c84:	e0bffb17 	ldw	r2,-20(fp)
    9c88:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
    9c8c:	e13ffa17 	ldw	r4,-24(fp)
    9c90:	0009fb00 	call	9fb0 <alt_release_fd>
  }
} 
    9c94:	0001883a 	nop
    9c98:	e6ffff04 	addi	sp,fp,-4
    9c9c:	dfc00217 	ldw	ra,8(sp)
    9ca0:	df000117 	ldw	fp,4(sp)
    9ca4:	dc000017 	ldw	r16,0(sp)
    9ca8:	dec00304 	addi	sp,sp,12
    9cac:	f800283a 	ret

00009cb0 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    9cb0:	defffb04 	addi	sp,sp,-20
    9cb4:	dfc00415 	stw	ra,16(sp)
    9cb8:	df000315 	stw	fp,12(sp)
    9cbc:	df000304 	addi	fp,sp,12
    9cc0:	e13ffd15 	stw	r4,-12(fp)
    9cc4:	e17ffe15 	stw	r5,-8(fp)
    9cc8:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    9ccc:	01c07fc4 	movi	r7,511
    9cd0:	01800044 	movi	r6,1
    9cd4:	e17ffd17 	ldw	r5,-12(fp)
    9cd8:	01000074 	movhi	r4,1
    9cdc:	212a7f04 	addi	r4,r4,-22020
    9ce0:	0009bcc0 	call	9bcc <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    9ce4:	01c07fc4 	movi	r7,511
    9ce8:	000d883a 	mov	r6,zero
    9cec:	e17ffe17 	ldw	r5,-8(fp)
    9cf0:	01000074 	movhi	r4,1
    9cf4:	212a7c04 	addi	r4,r4,-22032
    9cf8:	0009bcc0 	call	9bcc <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    9cfc:	01c07fc4 	movi	r7,511
    9d00:	01800044 	movi	r6,1
    9d04:	e17fff17 	ldw	r5,-4(fp)
    9d08:	01000074 	movhi	r4,1
    9d0c:	212a8204 	addi	r4,r4,-22008
    9d10:	0009bcc0 	call	9bcc <alt_open_fd>
}  
    9d14:	0001883a 	nop
    9d18:	e037883a 	mov	sp,fp
    9d1c:	dfc00117 	ldw	ra,4(sp)
    9d20:	df000017 	ldw	fp,0(sp)
    9d24:	dec00204 	addi	sp,sp,8
    9d28:	f800283a 	ret

00009d2c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    9d2c:	defffe04 	addi	sp,sp,-8
    9d30:	dfc00115 	stw	ra,4(sp)
    9d34:	df000015 	stw	fp,0(sp)
    9d38:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    9d3c:	d0a00717 	ldw	r2,-32740(gp)
    9d40:	10000326 	beq	r2,zero,9d50 <alt_get_errno+0x24>
    9d44:	d0a00717 	ldw	r2,-32740(gp)
    9d48:	103ee83a 	callr	r2
    9d4c:	00000106 	br	9d54 <alt_get_errno+0x28>
    9d50:	d0a0c304 	addi	r2,gp,-31988
}
    9d54:	e037883a 	mov	sp,fp
    9d58:	dfc00117 	ldw	ra,4(sp)
    9d5c:	df000017 	ldw	fp,0(sp)
    9d60:	dec00204 	addi	sp,sp,8
    9d64:	f800283a 	ret

00009d68 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
    9d68:	defffb04 	addi	sp,sp,-20
    9d6c:	dfc00415 	stw	ra,16(sp)
    9d70:	df000315 	stw	fp,12(sp)
    9d74:	dc000215 	stw	r16,8(sp)
    9d78:	df000304 	addi	fp,sp,12
    9d7c:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    9d80:	e0bffe17 	ldw	r2,-8(fp)
    9d84:	10800217 	ldw	r2,8(r2)
    9d88:	10d00034 	orhi	r3,r2,16384
    9d8c:	e0bffe17 	ldw	r2,-8(fp)
    9d90:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    9d94:	e03ffd15 	stw	zero,-12(fp)
    9d98:	00002306 	br	9e28 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    9d9c:	04000074 	movhi	r16,1
    9da0:	842a7c04 	addi	r16,r16,-22032
    9da4:	e0bffd17 	ldw	r2,-12(fp)
    9da8:	01400304 	movi	r5,12
    9dac:	1009883a 	mov	r4,r2
    9db0:	0008f540 	call	8f54 <__mulsi3>
    9db4:	8085883a 	add	r2,r16,r2
    9db8:	10c00017 	ldw	r3,0(r2)
    9dbc:	e0bffe17 	ldw	r2,-8(fp)
    9dc0:	10800017 	ldw	r2,0(r2)
    9dc4:	1880151e 	bne	r3,r2,9e1c <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    9dc8:	04000074 	movhi	r16,1
    9dcc:	842a7c04 	addi	r16,r16,-22032
    9dd0:	e0bffd17 	ldw	r2,-12(fp)
    9dd4:	01400304 	movi	r5,12
    9dd8:	1009883a 	mov	r4,r2
    9ddc:	0008f540 	call	8f54 <__mulsi3>
    9de0:	8085883a 	add	r2,r16,r2
    9de4:	10800204 	addi	r2,r2,8
    9de8:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    9dec:	10000b0e 	bge	r2,zero,9e1c <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    9df0:	01400304 	movi	r5,12
    9df4:	e13ffd17 	ldw	r4,-12(fp)
    9df8:	0008f540 	call	8f54 <__mulsi3>
    9dfc:	1007883a 	mov	r3,r2
    9e00:	00800074 	movhi	r2,1
    9e04:	10aa7c04 	addi	r2,r2,-22032
    9e08:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    9e0c:	e0bffe17 	ldw	r2,-8(fp)
    9e10:	18800226 	beq	r3,r2,9e1c <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
    9e14:	00bffcc4 	movi	r2,-13
    9e18:	00000806 	br	9e3c <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    9e1c:	e0bffd17 	ldw	r2,-12(fp)
    9e20:	10800044 	addi	r2,r2,1
    9e24:	e0bffd15 	stw	r2,-12(fp)
    9e28:	d0a00617 	ldw	r2,-32744(gp)
    9e2c:	1007883a 	mov	r3,r2
    9e30:	e0bffd17 	ldw	r2,-12(fp)
    9e34:	18bfd92e 	bgeu	r3,r2,9d9c <_gp+0xffff722c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
    9e38:	0005883a 	mov	r2,zero
}
    9e3c:	e6ffff04 	addi	sp,fp,-4
    9e40:	dfc00217 	ldw	ra,8(sp)
    9e44:	df000117 	ldw	fp,4(sp)
    9e48:	dc000017 	ldw	r16,0(sp)
    9e4c:	dec00304 	addi	sp,sp,12
    9e50:	f800283a 	ret

00009e54 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    9e54:	defff604 	addi	sp,sp,-40
    9e58:	dfc00915 	stw	ra,36(sp)
    9e5c:	df000815 	stw	fp,32(sp)
    9e60:	df000804 	addi	fp,sp,32
    9e64:	e13ffd15 	stw	r4,-12(fp)
    9e68:	e17ffe15 	stw	r5,-8(fp)
    9e6c:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
    9e70:	00bfffc4 	movi	r2,-1
    9e74:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
    9e78:	00bffb44 	movi	r2,-19
    9e7c:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
    9e80:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    9e84:	d1600404 	addi	r5,gp,-32752
    9e88:	e13ffd17 	ldw	r4,-12(fp)
    9e8c:	000a1fc0 	call	a1fc <alt_find_dev>
    9e90:	e0bff815 	stw	r2,-32(fp)
    9e94:	e0bff817 	ldw	r2,-32(fp)
    9e98:	1000051e 	bne	r2,zero,9eb0 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    9e9c:	e13ffd17 	ldw	r4,-12(fp)
    9ea0:	000a28c0 	call	a28c <alt_find_file>
    9ea4:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
    9ea8:	00800044 	movi	r2,1
    9eac:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    9eb0:	e0bff817 	ldw	r2,-32(fp)
    9eb4:	10002b26 	beq	r2,zero,9f64 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
    9eb8:	e13ff817 	ldw	r4,-32(fp)
    9ebc:	000a3940 	call	a394 <alt_get_fd>
    9ec0:	e0bff915 	stw	r2,-28(fp)
    9ec4:	e0bff917 	ldw	r2,-28(fp)
    9ec8:	1000030e 	bge	r2,zero,9ed8 <open+0x84>
    {
      status = index;
    9ecc:	e0bff917 	ldw	r2,-28(fp)
    9ed0:	e0bffa15 	stw	r2,-24(fp)
    9ed4:	00002506 	br	9f6c <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
    9ed8:	01400304 	movi	r5,12
    9edc:	e13ff917 	ldw	r4,-28(fp)
    9ee0:	0008f540 	call	8f54 <__mulsi3>
    9ee4:	1007883a 	mov	r3,r2
    9ee8:	00800074 	movhi	r2,1
    9eec:	10aa7c04 	addi	r2,r2,-22032
    9ef0:	1885883a 	add	r2,r3,r2
    9ef4:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    9ef8:	e0fffe17 	ldw	r3,-8(fp)
    9efc:	00900034 	movhi	r2,16384
    9f00:	10bfffc4 	addi	r2,r2,-1
    9f04:	1886703a 	and	r3,r3,r2
    9f08:	e0bffc17 	ldw	r2,-16(fp)
    9f0c:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
    9f10:	e0bffb17 	ldw	r2,-20(fp)
    9f14:	1000051e 	bne	r2,zero,9f2c <open+0xd8>
    9f18:	e13ffc17 	ldw	r4,-16(fp)
    9f1c:	0009d680 	call	9d68 <alt_file_locked>
    9f20:	e0bffa15 	stw	r2,-24(fp)
    9f24:	e0bffa17 	ldw	r2,-24(fp)
    9f28:	10001016 	blt	r2,zero,9f6c <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    9f2c:	e0bff817 	ldw	r2,-32(fp)
    9f30:	10800317 	ldw	r2,12(r2)
    9f34:	10000826 	beq	r2,zero,9f58 <open+0x104>
    9f38:	e0bff817 	ldw	r2,-32(fp)
    9f3c:	10800317 	ldw	r2,12(r2)
    9f40:	e1ffff17 	ldw	r7,-4(fp)
    9f44:	e1bffe17 	ldw	r6,-8(fp)
    9f48:	e17ffd17 	ldw	r5,-12(fp)
    9f4c:	e13ffc17 	ldw	r4,-16(fp)
    9f50:	103ee83a 	callr	r2
    9f54:	00000106 	br	9f5c <open+0x108>
    9f58:	0005883a 	mov	r2,zero
    9f5c:	e0bffa15 	stw	r2,-24(fp)
    9f60:	00000206 	br	9f6c <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
    9f64:	00bffb44 	movi	r2,-19
    9f68:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    9f6c:	e0bffa17 	ldw	r2,-24(fp)
    9f70:	1000090e 	bge	r2,zero,9f98 <open+0x144>
  {
    alt_release_fd (index);  
    9f74:	e13ff917 	ldw	r4,-28(fp)
    9f78:	0009fb00 	call	9fb0 <alt_release_fd>
    ALT_ERRNO = -status;
    9f7c:	0009d2c0 	call	9d2c <alt_get_errno>
    9f80:	1007883a 	mov	r3,r2
    9f84:	e0bffa17 	ldw	r2,-24(fp)
    9f88:	0085c83a 	sub	r2,zero,r2
    9f8c:	18800015 	stw	r2,0(r3)
    return -1;
    9f90:	00bfffc4 	movi	r2,-1
    9f94:	00000106 	br	9f9c <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
    9f98:	e0bff917 	ldw	r2,-28(fp)
}
    9f9c:	e037883a 	mov	sp,fp
    9fa0:	dfc00117 	ldw	ra,4(sp)
    9fa4:	df000017 	ldw	fp,0(sp)
    9fa8:	dec00204 	addi	sp,sp,8
    9fac:	f800283a 	ret

00009fb0 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    9fb0:	defffc04 	addi	sp,sp,-16
    9fb4:	dfc00315 	stw	ra,12(sp)
    9fb8:	df000215 	stw	fp,8(sp)
    9fbc:	dc000115 	stw	r16,4(sp)
    9fc0:	df000204 	addi	fp,sp,8
    9fc4:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
    9fc8:	e0bffe17 	ldw	r2,-8(fp)
    9fcc:	108000d0 	cmplti	r2,r2,3
    9fd0:	1000111e 	bne	r2,zero,a018 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
    9fd4:	04000074 	movhi	r16,1
    9fd8:	842a7c04 	addi	r16,r16,-22032
    9fdc:	e0bffe17 	ldw	r2,-8(fp)
    9fe0:	01400304 	movi	r5,12
    9fe4:	1009883a 	mov	r4,r2
    9fe8:	0008f540 	call	8f54 <__mulsi3>
    9fec:	8085883a 	add	r2,r16,r2
    9ff0:	10800204 	addi	r2,r2,8
    9ff4:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    9ff8:	04000074 	movhi	r16,1
    9ffc:	842a7c04 	addi	r16,r16,-22032
    a000:	e0bffe17 	ldw	r2,-8(fp)
    a004:	01400304 	movi	r5,12
    a008:	1009883a 	mov	r4,r2
    a00c:	0008f540 	call	8f54 <__mulsi3>
    a010:	8085883a 	add	r2,r16,r2
    a014:	10000015 	stw	zero,0(r2)
  }
}
    a018:	0001883a 	nop
    a01c:	e6ffff04 	addi	sp,fp,-4
    a020:	dfc00217 	ldw	ra,8(sp)
    a024:	df000117 	ldw	fp,4(sp)
    a028:	dc000017 	ldw	r16,0(sp)
    a02c:	dec00304 	addi	sp,sp,12
    a030:	f800283a 	ret

0000a034 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
    a034:	defffa04 	addi	sp,sp,-24
    a038:	df000515 	stw	fp,20(sp)
    a03c:	df000504 	addi	fp,sp,20
    a040:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    a044:	0005303a 	rdctl	r2,status
    a048:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    a04c:	e0fffc17 	ldw	r3,-16(fp)
    a050:	00bfff84 	movi	r2,-2
    a054:	1884703a 	and	r2,r3,r2
    a058:	1001703a 	wrctl	status,r2
  
  return context;
    a05c:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
    a060:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
    a064:	e0bfff17 	ldw	r2,-4(fp)
    a068:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
    a06c:	e0bffd17 	ldw	r2,-12(fp)
    a070:	10800017 	ldw	r2,0(r2)
    a074:	e0fffd17 	ldw	r3,-12(fp)
    a078:	18c00117 	ldw	r3,4(r3)
    a07c:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
    a080:	e0bffd17 	ldw	r2,-12(fp)
    a084:	10800117 	ldw	r2,4(r2)
    a088:	e0fffd17 	ldw	r3,-12(fp)
    a08c:	18c00017 	ldw	r3,0(r3)
    a090:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
    a094:	e0bffd17 	ldw	r2,-12(fp)
    a098:	e0fffd17 	ldw	r3,-12(fp)
    a09c:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
    a0a0:	e0bffd17 	ldw	r2,-12(fp)
    a0a4:	e0fffd17 	ldw	r3,-12(fp)
    a0a8:	10c00015 	stw	r3,0(r2)
    a0ac:	e0bffb17 	ldw	r2,-20(fp)
    a0b0:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    a0b4:	e0bffe17 	ldw	r2,-8(fp)
    a0b8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
    a0bc:	0001883a 	nop
    a0c0:	e037883a 	mov	sp,fp
    a0c4:	df000017 	ldw	fp,0(sp)
    a0c8:	dec00104 	addi	sp,sp,4
    a0cc:	f800283a 	ret

0000a0d0 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
    a0d0:	defffb04 	addi	sp,sp,-20
    a0d4:	dfc00415 	stw	ra,16(sp)
    a0d8:	df000315 	stw	fp,12(sp)
    a0dc:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
    a0e0:	d0a00917 	ldw	r2,-32732(gp)
    a0e4:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
    a0e8:	d0a0c917 	ldw	r2,-31964(gp)
    a0ec:	10800044 	addi	r2,r2,1
    a0f0:	d0a0c915 	stw	r2,-31964(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    a0f4:	00002e06 	br	a1b0 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
    a0f8:	e0bffd17 	ldw	r2,-12(fp)
    a0fc:	10800017 	ldw	r2,0(r2)
    a100:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
    a104:	e0bffd17 	ldw	r2,-12(fp)
    a108:	10800403 	ldbu	r2,16(r2)
    a10c:	10803fcc 	andi	r2,r2,255
    a110:	10000426 	beq	r2,zero,a124 <alt_tick+0x54>
    a114:	d0a0c917 	ldw	r2,-31964(gp)
    a118:	1000021e 	bne	r2,zero,a124 <alt_tick+0x54>
    {
      alarm->rollover = 0;
    a11c:	e0bffd17 	ldw	r2,-12(fp)
    a120:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
    a124:	e0bffd17 	ldw	r2,-12(fp)
    a128:	10800217 	ldw	r2,8(r2)
    a12c:	d0e0c917 	ldw	r3,-31964(gp)
    a130:	18801d36 	bltu	r3,r2,a1a8 <alt_tick+0xd8>
    a134:	e0bffd17 	ldw	r2,-12(fp)
    a138:	10800403 	ldbu	r2,16(r2)
    a13c:	10803fcc 	andi	r2,r2,255
    a140:	1000191e 	bne	r2,zero,a1a8 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
    a144:	e0bffd17 	ldw	r2,-12(fp)
    a148:	10800317 	ldw	r2,12(r2)
    a14c:	e0fffd17 	ldw	r3,-12(fp)
    a150:	18c00517 	ldw	r3,20(r3)
    a154:	1809883a 	mov	r4,r3
    a158:	103ee83a 	callr	r2
    a15c:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
    a160:	e0bfff17 	ldw	r2,-4(fp)
    a164:	1000031e 	bne	r2,zero,a174 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
    a168:	e13ffd17 	ldw	r4,-12(fp)
    a16c:	000a0340 	call	a034 <alt_alarm_stop>
    a170:	00000d06 	br	a1a8 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
    a174:	e0bffd17 	ldw	r2,-12(fp)
    a178:	10c00217 	ldw	r3,8(r2)
    a17c:	e0bfff17 	ldw	r2,-4(fp)
    a180:	1887883a 	add	r3,r3,r2
    a184:	e0bffd17 	ldw	r2,-12(fp)
    a188:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
    a18c:	e0bffd17 	ldw	r2,-12(fp)
    a190:	10c00217 	ldw	r3,8(r2)
    a194:	d0a0c917 	ldw	r2,-31964(gp)
    a198:	1880032e 	bgeu	r3,r2,a1a8 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
    a19c:	e0bffd17 	ldw	r2,-12(fp)
    a1a0:	00c00044 	movi	r3,1
    a1a4:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
    a1a8:	e0bffe17 	ldw	r2,-8(fp)
    a1ac:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    a1b0:	e0fffd17 	ldw	r3,-12(fp)
    a1b4:	d0a00904 	addi	r2,gp,-32732
    a1b8:	18bfcf1e 	bne	r3,r2,a0f8 <_gp+0xffff7588>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
    a1bc:	0001883a 	nop
}
    a1c0:	0001883a 	nop
    a1c4:	e037883a 	mov	sp,fp
    a1c8:	dfc00117 	ldw	ra,4(sp)
    a1cc:	df000017 	ldw	fp,0(sp)
    a1d0:	dec00204 	addi	sp,sp,8
    a1d4:	f800283a 	ret

0000a1d8 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    a1d8:	deffff04 	addi	sp,sp,-4
    a1dc:	df000015 	stw	fp,0(sp)
    a1e0:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
    a1e4:	000170fa 	wrctl	ienable,zero
}
    a1e8:	0001883a 	nop
    a1ec:	e037883a 	mov	sp,fp
    a1f0:	df000017 	ldw	fp,0(sp)
    a1f4:	dec00104 	addi	sp,sp,4
    a1f8:	f800283a 	ret

0000a1fc <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    a1fc:	defffa04 	addi	sp,sp,-24
    a200:	dfc00515 	stw	ra,20(sp)
    a204:	df000415 	stw	fp,16(sp)
    a208:	df000404 	addi	fp,sp,16
    a20c:	e13ffe15 	stw	r4,-8(fp)
    a210:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
    a214:	e0bfff17 	ldw	r2,-4(fp)
    a218:	10800017 	ldw	r2,0(r2)
    a21c:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
    a220:	e13ffe17 	ldw	r4,-8(fp)
    a224:	0008ee00 	call	8ee0 <strlen>
    a228:	10800044 	addi	r2,r2,1
    a22c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    a230:	00000d06 	br	a268 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    a234:	e0bffc17 	ldw	r2,-16(fp)
    a238:	10800217 	ldw	r2,8(r2)
    a23c:	e0fffd17 	ldw	r3,-12(fp)
    a240:	180d883a 	mov	r6,r3
    a244:	e17ffe17 	ldw	r5,-8(fp)
    a248:	1009883a 	mov	r4,r2
    a24c:	000a5280 	call	a528 <memcmp>
    a250:	1000021e 	bne	r2,zero,a25c <alt_find_dev+0x60>
    {
      /* match found */

      return next;
    a254:	e0bffc17 	ldw	r2,-16(fp)
    a258:	00000706 	br	a278 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
    a25c:	e0bffc17 	ldw	r2,-16(fp)
    a260:	10800017 	ldw	r2,0(r2)
    a264:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    a268:	e0fffc17 	ldw	r3,-16(fp)
    a26c:	e0bfff17 	ldw	r2,-4(fp)
    a270:	18bff01e 	bne	r3,r2,a234 <_gp+0xffff76c4>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
    a274:	0005883a 	mov	r2,zero
}
    a278:	e037883a 	mov	sp,fp
    a27c:	dfc00117 	ldw	ra,4(sp)
    a280:	df000017 	ldw	fp,0(sp)
    a284:	dec00204 	addi	sp,sp,8
    a288:	f800283a 	ret

0000a28c <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    a28c:	defffb04 	addi	sp,sp,-20
    a290:	dfc00415 	stw	ra,16(sp)
    a294:	df000315 	stw	fp,12(sp)
    a298:	df000304 	addi	fp,sp,12
    a29c:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    a2a0:	d0a00217 	ldw	r2,-32760(gp)
    a2a4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    a2a8:	00003106 	br	a370 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
    a2ac:	e0bffd17 	ldw	r2,-12(fp)
    a2b0:	10800217 	ldw	r2,8(r2)
    a2b4:	1009883a 	mov	r4,r2
    a2b8:	0008ee00 	call	8ee0 <strlen>
    a2bc:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
    a2c0:	e0bffd17 	ldw	r2,-12(fp)
    a2c4:	10c00217 	ldw	r3,8(r2)
    a2c8:	e0bffe17 	ldw	r2,-8(fp)
    a2cc:	10bfffc4 	addi	r2,r2,-1
    a2d0:	1885883a 	add	r2,r3,r2
    a2d4:	10800003 	ldbu	r2,0(r2)
    a2d8:	10803fcc 	andi	r2,r2,255
    a2dc:	1080201c 	xori	r2,r2,128
    a2e0:	10bfe004 	addi	r2,r2,-128
    a2e4:	10800bd8 	cmpnei	r2,r2,47
    a2e8:	1000031e 	bne	r2,zero,a2f8 <alt_find_file+0x6c>
    {
      len -= 1;
    a2ec:	e0bffe17 	ldw	r2,-8(fp)
    a2f0:	10bfffc4 	addi	r2,r2,-1
    a2f4:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    a2f8:	e0bffe17 	ldw	r2,-8(fp)
    a2fc:	e0ffff17 	ldw	r3,-4(fp)
    a300:	1885883a 	add	r2,r3,r2
    a304:	10800003 	ldbu	r2,0(r2)
    a308:	10803fcc 	andi	r2,r2,255
    a30c:	1080201c 	xori	r2,r2,128
    a310:	10bfe004 	addi	r2,r2,-128
    a314:	10800be0 	cmpeqi	r2,r2,47
    a318:	1000081e 	bne	r2,zero,a33c <alt_find_file+0xb0>
    a31c:	e0bffe17 	ldw	r2,-8(fp)
    a320:	e0ffff17 	ldw	r3,-4(fp)
    a324:	1885883a 	add	r2,r3,r2
    a328:	10800003 	ldbu	r2,0(r2)
    a32c:	10803fcc 	andi	r2,r2,255
    a330:	1080201c 	xori	r2,r2,128
    a334:	10bfe004 	addi	r2,r2,-128
    a338:	10000a1e 	bne	r2,zero,a364 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    a33c:	e0bffd17 	ldw	r2,-12(fp)
    a340:	10800217 	ldw	r2,8(r2)
    a344:	e0fffe17 	ldw	r3,-8(fp)
    a348:	180d883a 	mov	r6,r3
    a34c:	e17fff17 	ldw	r5,-4(fp)
    a350:	1009883a 	mov	r4,r2
    a354:	000a5280 	call	a528 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    a358:	1000021e 	bne	r2,zero,a364 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
    a35c:	e0bffd17 	ldw	r2,-12(fp)
    a360:	00000706 	br	a380 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
    a364:	e0bffd17 	ldw	r2,-12(fp)
    a368:	10800017 	ldw	r2,0(r2)
    a36c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    a370:	e0fffd17 	ldw	r3,-12(fp)
    a374:	d0a00204 	addi	r2,gp,-32760
    a378:	18bfcc1e 	bne	r3,r2,a2ac <_gp+0xffff773c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
    a37c:	0005883a 	mov	r2,zero
}
    a380:	e037883a 	mov	sp,fp
    a384:	dfc00117 	ldw	ra,4(sp)
    a388:	df000017 	ldw	fp,0(sp)
    a38c:	dec00204 	addi	sp,sp,8
    a390:	f800283a 	ret

0000a394 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    a394:	defffa04 	addi	sp,sp,-24
    a398:	dfc00515 	stw	ra,20(sp)
    a39c:	df000415 	stw	fp,16(sp)
    a3a0:	dc000315 	stw	r16,12(sp)
    a3a4:	df000404 	addi	fp,sp,16
    a3a8:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
    a3ac:	00bffa04 	movi	r2,-24
    a3b0:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    a3b4:	e03ffc15 	stw	zero,-16(fp)
    a3b8:	00001d06 	br	a430 <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
    a3bc:	04000074 	movhi	r16,1
    a3c0:	842a7c04 	addi	r16,r16,-22032
    a3c4:	e0bffc17 	ldw	r2,-16(fp)
    a3c8:	01400304 	movi	r5,12
    a3cc:	1009883a 	mov	r4,r2
    a3d0:	0008f540 	call	8f54 <__mulsi3>
    a3d4:	8085883a 	add	r2,r16,r2
    a3d8:	10800017 	ldw	r2,0(r2)
    a3dc:	1000111e 	bne	r2,zero,a424 <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
    a3e0:	04000074 	movhi	r16,1
    a3e4:	842a7c04 	addi	r16,r16,-22032
    a3e8:	e0bffc17 	ldw	r2,-16(fp)
    a3ec:	01400304 	movi	r5,12
    a3f0:	1009883a 	mov	r4,r2
    a3f4:	0008f540 	call	8f54 <__mulsi3>
    a3f8:	8085883a 	add	r2,r16,r2
    a3fc:	e0fffe17 	ldw	r3,-8(fp)
    a400:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
    a404:	d0e00617 	ldw	r3,-32744(gp)
    a408:	e0bffc17 	ldw	r2,-16(fp)
    a40c:	1880020e 	bge	r3,r2,a418 <alt_get_fd+0x84>
      {
        alt_max_fd = i;
    a410:	e0bffc17 	ldw	r2,-16(fp)
    a414:	d0a00615 	stw	r2,-32744(gp)
      }
      rc = i;
    a418:	e0bffc17 	ldw	r2,-16(fp)
    a41c:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
    a420:	00000606 	br	a43c <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    a424:	e0bffc17 	ldw	r2,-16(fp)
    a428:	10800044 	addi	r2,r2,1
    a42c:	e0bffc15 	stw	r2,-16(fp)
    a430:	e0bffc17 	ldw	r2,-16(fp)
    a434:	10800810 	cmplti	r2,r2,32
    a438:	103fe01e 	bne	r2,zero,a3bc <_gp+0xffff784c>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
    a43c:	e0bffd17 	ldw	r2,-12(fp)
}
    a440:	e6ffff04 	addi	sp,fp,-4
    a444:	dfc00217 	ldw	ra,8(sp)
    a448:	df000117 	ldw	fp,4(sp)
    a44c:	dc000017 	ldw	r16,0(sp)
    a450:	dec00304 	addi	sp,sp,12
    a454:	f800283a 	ret

0000a458 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
    a458:	defffe04 	addi	sp,sp,-8
    a45c:	df000115 	stw	fp,4(sp)
    a460:	df000104 	addi	fp,sp,4
    a464:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
    a468:	e0bfff17 	ldw	r2,-4(fp)
    a46c:	10bffe84 	addi	r2,r2,-6
    a470:	10c00428 	cmpgeui	r3,r2,16
    a474:	18001a1e 	bne	r3,zero,a4e0 <alt_exception_cause_generated_bad_addr+0x88>
    a478:	100690ba 	slli	r3,r2,2
    a47c:	00800074 	movhi	r2,1
    a480:	10a92404 	addi	r2,r2,-23408
    a484:	1885883a 	add	r2,r3,r2
    a488:	10800017 	ldw	r2,0(r2)
    a48c:	1000683a 	jmp	r2
    a490:	0000a4d0 	cmplti	zero,zero,659
    a494:	0000a4d0 	cmplti	zero,zero,659
    a498:	0000a4e0 	cmpeqi	zero,zero,659
    a49c:	0000a4e0 	cmpeqi	zero,zero,659
    a4a0:	0000a4e0 	cmpeqi	zero,zero,659
    a4a4:	0000a4d0 	cmplti	zero,zero,659
    a4a8:	0000a4d8 	cmpnei	zero,zero,659
    a4ac:	0000a4e0 	cmpeqi	zero,zero,659
    a4b0:	0000a4d0 	cmplti	zero,zero,659
    a4b4:	0000a4d0 	cmplti	zero,zero,659
    a4b8:	0000a4e0 	cmpeqi	zero,zero,659
    a4bc:	0000a4d0 	cmplti	zero,zero,659
    a4c0:	0000a4d8 	cmpnei	zero,zero,659
    a4c4:	0000a4e0 	cmpeqi	zero,zero,659
    a4c8:	0000a4e0 	cmpeqi	zero,zero,659
    a4cc:	0000a4d0 	cmplti	zero,zero,659
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
    a4d0:	00800044 	movi	r2,1
    a4d4:	00000306 	br	a4e4 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
    a4d8:	0005883a 	mov	r2,zero
    a4dc:	00000106 	br	a4e4 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
    a4e0:	0005883a 	mov	r2,zero
  }
}
    a4e4:	e037883a 	mov	sp,fp
    a4e8:	df000017 	ldw	fp,0(sp)
    a4ec:	dec00104 	addi	sp,sp,4
    a4f0:	f800283a 	ret

0000a4f4 <atexit>:
    a4f4:	200b883a 	mov	r5,r4
    a4f8:	000f883a 	mov	r7,zero
    a4fc:	000d883a 	mov	r6,zero
    a500:	0009883a 	mov	r4,zero
    a504:	000a5581 	jmpi	a558 <__register_exitproc>

0000a508 <exit>:
    a508:	defffe04 	addi	sp,sp,-8
    a50c:	000b883a 	mov	r5,zero
    a510:	dc000015 	stw	r16,0(sp)
    a514:	dfc00115 	stw	ra,4(sp)
    a518:	2021883a 	mov	r16,r4
    a51c:	000a6b00 	call	a6b0 <__call_exitprocs>
    a520:	8009883a 	mov	r4,r16
    a524:	000a8400 	call	a840 <_exit>

0000a528 <memcmp>:
    a528:	218d883a 	add	r6,r4,r6
    a52c:	21800826 	beq	r4,r6,a550 <memcmp+0x28>
    a530:	20800003 	ldbu	r2,0(r4)
    a534:	28c00003 	ldbu	r3,0(r5)
    a538:	10c00226 	beq	r2,r3,a544 <memcmp+0x1c>
    a53c:	10c5c83a 	sub	r2,r2,r3
    a540:	f800283a 	ret
    a544:	21000044 	addi	r4,r4,1
    a548:	29400044 	addi	r5,r5,1
    a54c:	003ff706 	br	a52c <_gp+0xffff79bc>
    a550:	0005883a 	mov	r2,zero
    a554:	f800283a 	ret

0000a558 <__register_exitproc>:
    a558:	00800074 	movhi	r2,1
    a55c:	10aadc04 	addi	r2,r2,-21648
    a560:	10c00017 	ldw	r3,0(r2)
    a564:	defff904 	addi	sp,sp,-28
    a568:	dc000015 	stw	r16,0(sp)
    a56c:	1c000c17 	ldw	r16,48(r3)
    a570:	dd400515 	stw	r21,20(sp)
    a574:	dd000415 	stw	r20,16(sp)
    a578:	dcc00315 	stw	r19,12(sp)
    a57c:	dc800215 	stw	r18,8(sp)
    a580:	dc400115 	stw	r17,4(sp)
    a584:	dfc00615 	stw	ra,24(sp)
    a588:	202b883a 	mov	r21,r4
    a58c:	2823883a 	mov	r17,r5
    a590:	3027883a 	mov	r19,r6
    a594:	3825883a 	mov	r18,r7
    a598:	1029883a 	mov	r20,r2
    a59c:	8000021e 	bne	r16,zero,a5a8 <__register_exitproc+0x50>
    a5a0:	1c000d04 	addi	r16,r3,52
    a5a4:	1c000c15 	stw	r16,48(r3)
    a5a8:	80800117 	ldw	r2,4(r16)
    a5ac:	00c007c4 	movi	r3,31
    a5b0:	1880110e 	bge	r3,r2,a5f8 <__register_exitproc+0xa0>
    a5b4:	00800034 	movhi	r2,0
    a5b8:	10800004 	addi	r2,r2,0
    a5bc:	1000021e 	bne	r2,zero,a5c8 <__register_exitproc+0x70>
    a5c0:	00bfffc4 	movi	r2,-1
    a5c4:	00003106 	br	a68c <__register_exitproc+0x134>
    a5c8:	01002304 	movi	r4,140
    a5cc:	00000000 	call	0 <__alt_mem_onchip_memory-0x8000>
    a5d0:	1021883a 	mov	r16,r2
    a5d4:	103ffa26 	beq	r2,zero,a5c0 <_gp+0xffff7a50>
    a5d8:	10000115 	stw	zero,4(r2)
    a5dc:	a0800017 	ldw	r2,0(r20)
    a5e0:	10c00c17 	ldw	r3,48(r2)
    a5e4:	80c00015 	stw	r3,0(r16)
    a5e8:	14000c15 	stw	r16,48(r2)
    a5ec:	80002215 	stw	zero,136(r16)
    a5f0:	a8001d26 	beq	r21,zero,a668 <__register_exitproc+0x110>
    a5f4:	00000606 	br	a610 <__register_exitproc+0xb8>
    a5f8:	a8001b26 	beq	r21,zero,a668 <__register_exitproc+0x110>
    a5fc:	80802217 	ldw	r2,136(r16)
    a600:	1000091e 	bne	r2,zero,a628 <__register_exitproc+0xd0>
    a604:	00800034 	movhi	r2,0
    a608:	10800004 	addi	r2,r2,0
    a60c:	103fec26 	beq	r2,zero,a5c0 <_gp+0xffff7a50>
    a610:	01004204 	movi	r4,264
    a614:	00000000 	call	0 <__alt_mem_onchip_memory-0x8000>
    a618:	103fe926 	beq	r2,zero,a5c0 <_gp+0xffff7a50>
    a61c:	10004015 	stw	zero,256(r2)
    a620:	10004115 	stw	zero,260(r2)
    a624:	80802215 	stw	r2,136(r16)
    a628:	81400117 	ldw	r5,4(r16)
    a62c:	01000044 	movi	r4,1
    a630:	2947883a 	add	r3,r5,r5
    a634:	18c7883a 	add	r3,r3,r3
    a638:	10c7883a 	add	r3,r2,r3
    a63c:	1cc00015 	stw	r19,0(r3)
    a640:	2148983a 	sll	r4,r4,r5
    a644:	11404017 	ldw	r5,256(r2)
    a648:	290ab03a 	or	r5,r5,r4
    a64c:	11404015 	stw	r5,256(r2)
    a650:	1c802015 	stw	r18,128(r3)
    a654:	00c00084 	movi	r3,2
    a658:	a8c0031e 	bne	r21,r3,a668 <__register_exitproc+0x110>
    a65c:	10c04117 	ldw	r3,260(r2)
    a660:	1908b03a 	or	r4,r3,r4
    a664:	11004115 	stw	r4,260(r2)
    a668:	80800117 	ldw	r2,4(r16)
    a66c:	10c00044 	addi	r3,r2,1
    a670:	10800084 	addi	r2,r2,2
    a674:	1085883a 	add	r2,r2,r2
    a678:	1085883a 	add	r2,r2,r2
    a67c:	80c00115 	stw	r3,4(r16)
    a680:	80a1883a 	add	r16,r16,r2
    a684:	84400015 	stw	r17,0(r16)
    a688:	0005883a 	mov	r2,zero
    a68c:	dfc00617 	ldw	ra,24(sp)
    a690:	dd400517 	ldw	r21,20(sp)
    a694:	dd000417 	ldw	r20,16(sp)
    a698:	dcc00317 	ldw	r19,12(sp)
    a69c:	dc800217 	ldw	r18,8(sp)
    a6a0:	dc400117 	ldw	r17,4(sp)
    a6a4:	dc000017 	ldw	r16,0(sp)
    a6a8:	dec00704 	addi	sp,sp,28
    a6ac:	f800283a 	ret

0000a6b0 <__call_exitprocs>:
    a6b0:	defff504 	addi	sp,sp,-44
    a6b4:	dd000515 	stw	r20,20(sp)
    a6b8:	05000074 	movhi	r20,1
    a6bc:	dc800315 	stw	r18,12(sp)
    a6c0:	dfc00a15 	stw	ra,40(sp)
    a6c4:	df000915 	stw	fp,36(sp)
    a6c8:	ddc00815 	stw	r23,32(sp)
    a6cc:	dd800715 	stw	r22,28(sp)
    a6d0:	dd400615 	stw	r21,24(sp)
    a6d4:	dcc00415 	stw	r19,16(sp)
    a6d8:	dc400215 	stw	r17,8(sp)
    a6dc:	dc000115 	stw	r16,4(sp)
    a6e0:	d9000015 	stw	r4,0(sp)
    a6e4:	2825883a 	mov	r18,r5
    a6e8:	a52adc04 	addi	r20,r20,-21648
    a6ec:	a4400017 	ldw	r17,0(r20)
    a6f0:	8cc00c17 	ldw	r19,48(r17)
    a6f4:	8c400c04 	addi	r17,r17,48
    a6f8:	98004526 	beq	r19,zero,a810 <__call_exitprocs+0x160>
    a6fc:	9c000117 	ldw	r16,4(r19)
    a700:	00900034 	movhi	r2,16384
    a704:	10bfffc4 	addi	r2,r2,-1
    a708:	9d402217 	ldw	r21,136(r19)
    a70c:	85bfffc4 	addi	r22,r16,-1
    a710:	80a1883a 	add	r16,r16,r2
    a714:	8421883a 	add	r16,r16,r16
    a718:	8421883a 	add	r16,r16,r16
    a71c:	ac2f883a 	add	r23,r21,r16
    a720:	84000204 	addi	r16,r16,8
    a724:	9c21883a 	add	r16,r19,r16
    a728:	b0002716 	blt	r22,zero,a7c8 <__call_exitprocs+0x118>
    a72c:	90000726 	beq	r18,zero,a74c <__call_exitprocs+0x9c>
    a730:	a800041e 	bne	r21,zero,a744 <__call_exitprocs+0x94>
    a734:	b5bfffc4 	addi	r22,r22,-1
    a738:	bdffff04 	addi	r23,r23,-4
    a73c:	843fff04 	addi	r16,r16,-4
    a740:	003ff906 	br	a728 <_gp+0xffff7bb8>
    a744:	b9002017 	ldw	r4,128(r23)
    a748:	913ffa1e 	bne	r18,r4,a734 <_gp+0xffff7bc4>
    a74c:	99000117 	ldw	r4,4(r19)
    a750:	82000017 	ldw	r8,0(r16)
    a754:	213fffc4 	addi	r4,r4,-1
    a758:	b100021e 	bne	r22,r4,a764 <__call_exitprocs+0xb4>
    a75c:	9d800115 	stw	r22,4(r19)
    a760:	00000106 	br	a768 <__call_exitprocs+0xb8>
    a764:	80000015 	stw	zero,0(r16)
    a768:	403ff226 	beq	r8,zero,a734 <_gp+0xffff7bc4>
    a76c:	9f000117 	ldw	fp,4(r19)
    a770:	a8000526 	beq	r21,zero,a788 <__call_exitprocs+0xd8>
    a774:	00800044 	movi	r2,1
    a778:	1592983a 	sll	r9,r2,r22
    a77c:	a9404017 	ldw	r5,256(r21)
    a780:	494a703a 	and	r5,r9,r5
    a784:	2800021e 	bne	r5,zero,a790 <__call_exitprocs+0xe0>
    a788:	403ee83a 	callr	r8
    a78c:	00000906 	br	a7b4 <__call_exitprocs+0x104>
    a790:	a9004117 	ldw	r4,260(r21)
    a794:	4908703a 	and	r4,r9,r4
    a798:	2000041e 	bne	r4,zero,a7ac <__call_exitprocs+0xfc>
    a79c:	b9400017 	ldw	r5,0(r23)
    a7a0:	d9000017 	ldw	r4,0(sp)
    a7a4:	403ee83a 	callr	r8
    a7a8:	00000206 	br	a7b4 <__call_exitprocs+0x104>
    a7ac:	b9000017 	ldw	r4,0(r23)
    a7b0:	403ee83a 	callr	r8
    a7b4:	99000117 	ldw	r4,4(r19)
    a7b8:	e13fcc1e 	bne	fp,r4,a6ec <_gp+0xffff7b7c>
    a7bc:	89000017 	ldw	r4,0(r17)
    a7c0:	993fdc26 	beq	r19,r4,a734 <_gp+0xffff7bc4>
    a7c4:	003fc906 	br	a6ec <_gp+0xffff7b7c>
    a7c8:	00800034 	movhi	r2,0
    a7cc:	10800004 	addi	r2,r2,0
    a7d0:	10000f26 	beq	r2,zero,a810 <__call_exitprocs+0x160>
    a7d4:	99400117 	ldw	r5,4(r19)
    a7d8:	99000017 	ldw	r4,0(r19)
    a7dc:	2800091e 	bne	r5,zero,a804 <__call_exitprocs+0x154>
    a7e0:	20000826 	beq	r4,zero,a804 <__call_exitprocs+0x154>
    a7e4:	89000015 	stw	r4,0(r17)
    a7e8:	a8000226 	beq	r21,zero,a7f4 <__call_exitprocs+0x144>
    a7ec:	a809883a 	mov	r4,r21
    a7f0:	00000000 	call	0 <__alt_mem_onchip_memory-0x8000>
    a7f4:	9809883a 	mov	r4,r19
    a7f8:	00000000 	call	0 <__alt_mem_onchip_memory-0x8000>
    a7fc:	8cc00017 	ldw	r19,0(r17)
    a800:	003fbd06 	br	a6f8 <_gp+0xffff7b88>
    a804:	9823883a 	mov	r17,r19
    a808:	2027883a 	mov	r19,r4
    a80c:	003fba06 	br	a6f8 <_gp+0xffff7b88>
    a810:	dfc00a17 	ldw	ra,40(sp)
    a814:	df000917 	ldw	fp,36(sp)
    a818:	ddc00817 	ldw	r23,32(sp)
    a81c:	dd800717 	ldw	r22,28(sp)
    a820:	dd400617 	ldw	r21,24(sp)
    a824:	dd000517 	ldw	r20,20(sp)
    a828:	dcc00417 	ldw	r19,16(sp)
    a82c:	dc800317 	ldw	r18,12(sp)
    a830:	dc400217 	ldw	r17,8(sp)
    a834:	dc000117 	ldw	r16,4(sp)
    a838:	dec00b04 	addi	sp,sp,44
    a83c:	f800283a 	ret

0000a840 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
    a840:	defffd04 	addi	sp,sp,-12
    a844:	df000215 	stw	fp,8(sp)
    a848:	df000204 	addi	fp,sp,8
    a84c:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
    a850:	0001883a 	nop
    a854:	e0bfff17 	ldw	r2,-4(fp)
    a858:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
    a85c:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    a860:	10000226 	beq	r2,zero,a86c <_exit+0x2c>
    ALT_SIM_FAIL();
    a864:	002af070 	cmpltui	zero,zero,43969
    a868:	00000106 	br	a870 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
    a86c:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
    a870:	003fff06 	br	a870 <_gp+0xffff7d00>
