
gp2.elf:     file format elf32-littlenios2
gp2.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00008230

Program Header:
    LOAD off    0x00001000 vaddr 0x00008000 paddr 0x00008000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00008020 paddr 0x00008020 align 2**12
         filesz 0x000028d0 memsz 0x000028d0 flags r-x
    LOAD off    0x000038f0 vaddr 0x0000a8f0 paddr 0x0000abd0 align 2**12
         filesz 0x000002e0 memsz 0x000002e0 flags rw-
    LOAD off    0x00003eb0 vaddr 0x0000aeb0 paddr 0x0000aeb0 align 2**12
         filesz 0x00000000 memsz 0x00000120 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00008000  00008000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  00008020  00008020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00002678  00008230  00008230  00001230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000048  0000a8a8  0000a8a8  000038a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000002e0  0000a8f0  0000abd0  000038f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000120  0000aeb0  0000aeb0  00003eb0  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory 00000000  0000afd0  0000afd0  00003bd0  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00003bd0  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000630  00000000  00000000  00003bf8  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00007d24  00000000  00000000  00004228  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00002c12  00000000  00000000  0000bf4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00003076  00000000  00000000  0000eb5e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000bb4  00000000  00000000  00011bd4  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00001e0d  00000000  00000000  00012788  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00001543  00000000  00000000  00014595  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  00015ad8  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000002a8  00000000  00000000  00015ae8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  000177ee  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  000177f1  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  000177f4  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  000177f5  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  000177f6  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    0000000b  00000000  00000000  00017801  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  0001780c  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 00000007  00000000  00000000  00017817  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 0000002a  00000000  00000000  0001781e  2**0
                  CONTENTS, READONLY
 26 .jdi          00004688  00000000  00000000  00017848  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     00071566  00000000  00000000  0001bed0  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00008000 l    d  .entry	00000000 .entry
00008020 l    d  .exceptions	00000000 .exceptions
00008230 l    d  .text	00000000 .text
0000a8a8 l    d  .rodata	00000000 .rodata
0000a8f0 l    d  .rwdata	00000000 .rwdata
0000aeb0 l    d  .bss	00000000 .bss
0000afd0 l    d  .onchip_memory	00000000 .onchip_memory
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../gp2_bsp//obj/HAL/src/crt0.o
00008268 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 gp2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 vfprintf.c
000088a8 l     F .text	0000006c print_repeat
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
0000a8f0 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_load.c
00008fb0 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_write.c
00009118 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00009254 l     F .text	00000034 alt_dev_reg
0000a9d0 l     O .rwdata	0000002c jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0000954c l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_close.c
00009640 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00009774 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
000097a0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00009c00 l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00009d60 l     F .text	0000003c alt_get_errno
00009d9c l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
0000aecc g     O .bss	00000004 alt_instruction_exception_handler
0000909c g     F .text	0000007c alt_main
0000aed0 g     O .bss	00000100 alt_irq
0000abd0 g       *ABS*	00000000 __flash_rwdata_start
0000885c g     F .text	0000004c printf
0000a20c g     F .text	00000024 altera_nios2_gen2_irq_init
00008000 g     F .entry	0000000c __reset
00008020 g       *ABS*	00000000 __flash_exceptions_start
0000aeb0 g     O .bss	00000004 errno
0000aeb8 g     O .bss	00000004 alt_argv
00012ba4 g       *ABS*	00000000 _gp
0000aa24 g     O .rwdata	00000180 alt_fd_list
0000a230 g     F .text	00000090 alt_find_dev
00009ce4 g     F .text	0000007c alt_io_redirect
0000a8a8 g       *ABS*	00000000 __DTOR_END__
0000a48c g     F .text	0000009c alt_exception_cause_generated_bad_addr
000093cc g     F .text	000000ec altera_avalon_jtag_uart_read
00008820 g     F .text	0000003c _printf_r
00008764 g     F .text	00000064 .hidden __udivsi3
0000826c g     F .text	0000011c display7
0000abbc g     O .rwdata	00000004 alt_max_fd
0000aba4 g     O .rwdata	00000004 _global_impure_ptr
0000afd0 g       *ABS*	00000000 __bss_end
00009b10 g     F .text	000000f0 alt_iic_isr_register
0000a104 g     F .text	00000108 alt_tick
00009ac4 g     F .text	0000004c alt_ic_irq_enabled
0000a068 g     F .text	0000009c alt_alarm_stop
0000aec0 g     O .bss	00000004 alt_irq_active
000080fc g     F .exceptions	000000d4 alt_irq_handler
0000a9fc g     O .rwdata	00000028 alt_dev_null
00009754 g     F .text	00000020 alt_dcache_flush_all
0000abd0 g       *ABS*	00000000 __ram_rwdata_end
00008000 g       *ABS*	00000000 __alt_mem_onchip_memory
0000abb4 g     O .rwdata	00000008 alt_dev_list
00009154 g     F .text	00000100 write
0000a8f0 g       *ABS*	00000000 __ram_rodata_end
000087c8 g     F .text	00000058 .hidden __umodsi3
0000afd0 g       *ABS*	00000000 end
000081d0 g     F .exceptions	00000060 alt_instruction_exception_entry
0000a8a8 g       *ABS*	00000000 __CTOR_LIST__
0000d000 g       *ABS*	00000000 __alt_stack_pointer
000095c4 g     F .text	0000007c alt_avalon_timer_sc_init
000094b8 g     F .text	00000094 altera_avalon_jtag_uart_write
00008914 g     F .text	0000052c ___vfprintf_internal_r
0000a6e4 g     F .text	00000190 __call_exitprocs
00008230 g     F .text	0000003c _start
0000aec4 g     O .bss	00000004 _alt_tick_rate
0000aec8 g     O .bss	00000004 _alt_nticks
000092c0 g     F .text	0000004c alt_sys_init
0000a58c g     F .text	00000158 __register_exitproc
00008f88 g     F .text	00000028 .hidden __mulsi3
0000a8f0 g       *ABS*	00000000 __ram_rwdata_start
0000a8a8 g       *ABS*	00000000 __ram_rodata_start
0000930c g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0000a3c8 g     F .text	000000c4 alt_get_fd
0000a55c g     F .text	00000030 memcmp
0000afd0 g       *ABS*	00000000 __alt_stack_base
0000a2c0 g     F .text	00000108 alt_find_file
000097dc g     F .text	000000a4 alt_dev_llist_insert
00008e5c g     F .text	000000b8 __sfvwrite_small_dev
0000aeb0 g       *ABS*	00000000 __bss_start
00008388 g     F .text	000002e4 main
0000aebc g     O .bss	00000004 alt_envp
0000936c g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0000abc0 g     O .rwdata	00000004 alt_errno
0000866c g     F .text	00000084 .hidden __divsi3
0000a8a8 g       *ABS*	00000000 __CTOR_END__
0000a8a8 g       *ABS*	00000000 __flash_rodata_start
0000a8a8 g       *ABS*	00000000 __DTOR_LIST__
00009288 g     F .text	00000038 alt_irq_init
00009fe4 g     F .text	00000084 alt_release_fd
0000a528 g     F .text	00000014 atexit
00008f30 g     F .text	00000058 _write_r
0000aba8 g     O .rwdata	00000004 _impure_ptr
0000aeb4 g     O .bss	00000004 alt_argc
000098e0 g     F .text	00000060 _do_dtors
00008020 g       .exceptions	00000000 alt_irq_entry
0000abac g     O .rwdata	00000008 alt_fs_list
00008020 g       *ABS*	00000000 __ram_exceptions_start
00009960 g     F .text	00000050 alt_ic_isr_register
0000abd0 g       *ABS*	00000000 _edata
0000afd0 g       *ABS*	00000000 _end
00008230 g       *ABS*	00000000 __ram_exceptions_end
00009a38 g     F .text	0000008c alt_ic_irq_disable
0000a53c g     F .text	00000020 exit
000086f0 g     F .text	00000074 .hidden __modsi3
0000d000 g       *ABS*	00000000 __alt_data_end
00008020 g     F .exceptions	00000000 alt_exception
0000a874 g     F .text	00000034 _exit
00008f14 g     F .text	0000001c strlen
00009e88 g     F .text	0000015c open
00009940 g     F .text	00000020 alt_icache_flush_all
0000abc4 g     O .rwdata	00000004 alt_priority_mask
000099b0 g     F .text	00000088 alt_ic_irq_enable
00008e40 g     F .text	0000001c __vfprintf_internal
0000abc8 g     O .rwdata	00000008 alt_alarm_list
00009880 g     F .text	00000060 _do_ctors
0000967c g     F .text	000000d8 close
00009018 g     F .text	00000084 alt_load



Disassembly of section .entry:

00008000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
    8000:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
    8004:	08608c14 	ori	at,at,33328
    jmp r1
    8008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00008020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
    8020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
    8024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
    8028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
    802c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
    8030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
    8034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
    8038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
    803c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
    8040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
    8044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
    8048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
    804c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
    8050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
    8054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
    8058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
    805c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
    8060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
    8064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
    8068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
    806c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
    8070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
    8074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
    8078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
    807c:	10000326 	beq	r2,zero,808c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
    8080:	20000226 	beq	r4,zero,808c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
    8084:	00080fc0 	call	80fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
    8088:	00000706 	br	80a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
    808c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
    8090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
    8094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
    8098:	00081d00 	call	81d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
    809c:	1000021e 	bne	r2,zero,80a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
    80a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
    80a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
    80a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
    80ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
    80b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
    80b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
    80b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
    80bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
    80c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
    80c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
    80c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
    80cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
    80d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
    80d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
    80d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
    80dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
    80e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
    80e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
    80e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
    80ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
    80f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
    80f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
    80f8:	ef80083a 	eret

000080fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
    80fc:	defff904 	addi	sp,sp,-28
    8100:	dfc00615 	stw	ra,24(sp)
    8104:	df000515 	stw	fp,20(sp)
    8108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
    810c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
    8110:	0005313a 	rdctl	r2,ipending
    8114:	e0bffe15 	stw	r2,-8(fp)

  return active;
    8118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
    811c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
    8120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
    8124:	00800044 	movi	r2,1
    8128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
    812c:	e0fffb17 	ldw	r3,-20(fp)
    8130:	e0bffc17 	ldw	r2,-16(fp)
    8134:	1884703a 	and	r2,r3,r2
    8138:	10001426 	beq	r2,zero,818c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
    813c:	00800074 	movhi	r2,1
    8140:	10abb404 	addi	r2,r2,-20784
    8144:	e0fffd17 	ldw	r3,-12(fp)
    8148:	180690fa 	slli	r3,r3,3
    814c:	10c5883a 	add	r2,r2,r3
    8150:	10c00017 	ldw	r3,0(r2)
    8154:	00800074 	movhi	r2,1
    8158:	10abb404 	addi	r2,r2,-20784
    815c:	e13ffd17 	ldw	r4,-12(fp)
    8160:	200890fa 	slli	r4,r4,3
    8164:	1105883a 	add	r2,r2,r4
    8168:	10800104 	addi	r2,r2,4
    816c:	10800017 	ldw	r2,0(r2)
    8170:	1009883a 	mov	r4,r2
    8174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
    8178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
    817c:	0005313a 	rdctl	r2,ipending
    8180:	e0bfff15 	stw	r2,-4(fp)

  return active;
    8184:	e0bfff17 	ldw	r2,-4(fp)
    8188:	00000706 	br	81a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
    818c:	e0bffc17 	ldw	r2,-16(fp)
    8190:	1085883a 	add	r2,r2,r2
    8194:	e0bffc15 	stw	r2,-16(fp)
      i++;
    8198:	e0bffd17 	ldw	r2,-12(fp)
    819c:	10800044 	addi	r2,r2,1
    81a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
    81a4:	003fe106 	br	812c <_gp+0xffff5588>

    active = alt_irq_pending ();
    81a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
    81ac:	e0bffb17 	ldw	r2,-20(fp)
    81b0:	103fdb1e 	bne	r2,zero,8120 <_gp+0xffff557c>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
    81b4:	0001883a 	nop
}
    81b8:	0001883a 	nop
    81bc:	e037883a 	mov	sp,fp
    81c0:	dfc00117 	ldw	ra,4(sp)
    81c4:	df000017 	ldw	fp,0(sp)
    81c8:	dec00204 	addi	sp,sp,8
    81cc:	f800283a 	ret

000081d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
    81d0:	defffb04 	addi	sp,sp,-20
    81d4:	dfc00415 	stw	ra,16(sp)
    81d8:	df000315 	stw	fp,12(sp)
    81dc:	df000304 	addi	fp,sp,12
    81e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
    81e4:	00bfffc4 	movi	r2,-1
    81e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
    81ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
    81f0:	d0a0ca17 	ldw	r2,-31960(gp)
    81f4:	10000726 	beq	r2,zero,8214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
    81f8:	d0a0ca17 	ldw	r2,-31960(gp)
    81fc:	e0fffd17 	ldw	r3,-12(fp)
    8200:	e1bffe17 	ldw	r6,-8(fp)
    8204:	e17fff17 	ldw	r5,-4(fp)
    8208:	1809883a 	mov	r4,r3
    820c:	103ee83a 	callr	r2
    8210:	00000206 	br	821c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
    8214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
    8218:	0005883a 	mov	r2,zero
}
    821c:	e037883a 	mov	sp,fp
    8220:	dfc00117 	ldw	ra,4(sp)
    8224:	df000017 	ldw	fp,0(sp)
    8228:	dec00204 	addi	sp,sp,8
    822c:	f800283a 	ret

Disassembly of section .text:

00008230 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    8230:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
    8234:	def40014 	ori	sp,sp,53248
    movhi gp, %hi(_gp)
    8238:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
    823c:	d68ae914 	ori	gp,gp,11172
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    8240:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    8244:	10abac14 	ori	r2,r2,44720

    movhi r3, %hi(__bss_end)
    8248:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    824c:	18ebf414 	ori	r3,r3,45008

    beq r2, r3, 1f
    8250:	10c00326 	beq	r2,r3,8260 <_start+0x30>

0:
    stw zero, (r2)
    8254:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    8258:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    825c:	10fffd36 	bltu	r2,r3,8254 <_gp+0xffff56b0>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
    8260:	00090180 	call	9018 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    8264:	000909c0 	call	909c <alt_main>

00008268 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    8268:	003fff06 	br	8268 <_gp+0xffff56c4>

0000826c <display7>:
#include "system.h"
#include "altera_avalon_pio_regs.h"
#include <inttypes.h>

void display7(int address, int number)
{
    826c:	defffc04 	addi	sp,sp,-16
    8270:	df000315 	stw	fp,12(sp)
    8274:	df000304 	addi	fp,sp,12
    8278:	e13ffe15 	stw	r4,-8(fp)
    827c:	e17fff15 	stw	r5,-4(fp)
	int hex = 0x0000000;
    8280:	e03ffd15 	stw	zero,-12(fp)
	if (number == 0)
    8284:	e0bfff17 	ldw	r2,-4(fp)
    8288:	1000031e 	bne	r2,zero,8298 <display7+0x2c>
		hex = 64;
    828c:	00801004 	movi	r2,64
    8290:	e0bffd15 	stw	r2,-12(fp)
    8294:	00003406 	br	8368 <display7+0xfc>
	else if (number == 1)
    8298:	e0bfff17 	ldw	r2,-4(fp)
    829c:	10800058 	cmpnei	r2,r2,1
    82a0:	1000031e 	bne	r2,zero,82b0 <display7+0x44>
		hex = 121;
    82a4:	00801e44 	movi	r2,121
    82a8:	e0bffd15 	stw	r2,-12(fp)
    82ac:	00002e06 	br	8368 <display7+0xfc>
	else if (number == 2)
    82b0:	e0bfff17 	ldw	r2,-4(fp)
    82b4:	10800098 	cmpnei	r2,r2,2
    82b8:	1000031e 	bne	r2,zero,82c8 <display7+0x5c>
		hex = 36;
    82bc:	00800904 	movi	r2,36
    82c0:	e0bffd15 	stw	r2,-12(fp)
    82c4:	00002806 	br	8368 <display7+0xfc>
	else if (number == 3)
    82c8:	e0bfff17 	ldw	r2,-4(fp)
    82cc:	108000d8 	cmpnei	r2,r2,3
    82d0:	1000031e 	bne	r2,zero,82e0 <display7+0x74>
		hex = 48;
    82d4:	00800c04 	movi	r2,48
    82d8:	e0bffd15 	stw	r2,-12(fp)
    82dc:	00002206 	br	8368 <display7+0xfc>
	else if (number == 4)
    82e0:	e0bfff17 	ldw	r2,-4(fp)
    82e4:	10800118 	cmpnei	r2,r2,4
    82e8:	1000031e 	bne	r2,zero,82f8 <display7+0x8c>
		hex = 25;
    82ec:	00800644 	movi	r2,25
    82f0:	e0bffd15 	stw	r2,-12(fp)
    82f4:	00001c06 	br	8368 <display7+0xfc>
	else if (number == 5)
    82f8:	e0bfff17 	ldw	r2,-4(fp)
    82fc:	10800158 	cmpnei	r2,r2,5
    8300:	1000031e 	bne	r2,zero,8310 <display7+0xa4>
		hex = 18;
    8304:	00800484 	movi	r2,18
    8308:	e0bffd15 	stw	r2,-12(fp)
    830c:	00001606 	br	8368 <display7+0xfc>
	else if (number == 6)
    8310:	e0bfff17 	ldw	r2,-4(fp)
    8314:	10800198 	cmpnei	r2,r2,6
    8318:	1000031e 	bne	r2,zero,8328 <display7+0xbc>
		hex = 2;
    831c:	00800084 	movi	r2,2
    8320:	e0bffd15 	stw	r2,-12(fp)
    8324:	00001006 	br	8368 <display7+0xfc>
	else if (number == 7)
    8328:	e0bfff17 	ldw	r2,-4(fp)
    832c:	108001d8 	cmpnei	r2,r2,7
    8330:	1000031e 	bne	r2,zero,8340 <display7+0xd4>
		hex = 120;
    8334:	00801e04 	movi	r2,120
    8338:	e0bffd15 	stw	r2,-12(fp)
    833c:	00000a06 	br	8368 <display7+0xfc>
	else if (number == 8)
    8340:	e0bfff17 	ldw	r2,-4(fp)
    8344:	10800218 	cmpnei	r2,r2,8
    8348:	1000021e 	bne	r2,zero,8354 <display7+0xe8>
		hex = 0;
    834c:	e03ffd15 	stw	zero,-12(fp)
    8350:	00000506 	br	8368 <display7+0xfc>
	else if (number == 9)
    8354:	e0bfff17 	ldw	r2,-4(fp)
    8358:	10800258 	cmpnei	r2,r2,9
    835c:	1000021e 	bne	r2,zero,8368 <display7+0xfc>
		hex = 16;
    8360:	00800404 	movi	r2,16
    8364:	e0bffd15 	stw	r2,-12(fp)


	IOWR_ALTERA_AVALON_PIO_DATA(address, hex);
    8368:	e0bffe17 	ldw	r2,-8(fp)
    836c:	e0fffd17 	ldw	r3,-12(fp)
    8370:	10c00035 	stwio	r3,0(r2)
}
    8374:	0001883a 	nop
    8378:	e037883a 	mov	sp,fp
    837c:	df000017 	ldw	fp,0(sp)
    8380:	dec00104 	addi	sp,sp,4
    8384:	f800283a 	ret

00008388 <main>:

int main()
{
    8388:	defff104 	addi	sp,sp,-60
    838c:	dfc00e15 	stw	ra,56(sp)
    8390:	df000d15 	stw	fp,52(sp)
    8394:	dc400c15 	stw	r17,48(sp)
    8398:	dc000b15 	stw	r16,44(sp)
    839c:	df000d04 	addi	fp,sp,52
	uint64_t peakValue = 0;
    83a0:	e03ff315 	stw	zero,-52(fp)
    83a4:	e03ff415 	stw	zero,-48(fp)
	uint8_t sent = 0;
    83a8:	e03ff505 	stb	zero,-44(fp)
	uint64_t count = 0;
    83ac:	e03ff615 	stw	zero,-40(fp)
    83b0:	e03ff715 	stw	zero,-36(fp)
	uint8_t incomplete_half = 0;
    83b4:	e03ff805 	stb	zero,-32(fp)
	IOWR_ALTERA_AVALON_PIO_DATA(HEX0_BASE, 0);
    83b8:	0007883a 	mov	r3,zero
    83bc:	00800074 	movhi	r2,1
    83c0:	10842c04 	addi	r2,r2,4272
    83c4:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_PIO_DATA(HEX1_BASE, 0);
    83c8:	0007883a 	mov	r3,zero
    83cc:	00800074 	movhi	r2,1
    83d0:	10842804 	addi	r2,r2,4256
    83d4:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_PIO_DATA(HEX2_BASE, 0);
    83d8:	0007883a 	mov	r3,zero
    83dc:	00800074 	movhi	r2,1
    83e0:	10842404 	addi	r2,r2,4240
    83e4:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_PIO_DATA(HEX3_BASE, 0);
    83e8:	0007883a 	mov	r3,zero
    83ec:	00800074 	movhi	r2,1
    83f0:	10842004 	addi	r2,r2,4224
    83f4:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_PIO_DATA(HEX4_BASE, 0);
    83f8:	0007883a 	mov	r3,zero
    83fc:	00800074 	movhi	r2,1
    8400:	10841c04 	addi	r2,r2,4208
    8404:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_PIO_DATA(HEX5_BASE, 0);
    8408:	0007883a 	mov	r3,zero
    840c:	00800074 	movhi	r2,1
    8410:	10841804 	addi	r2,r2,4192
    8414:	10c00035 	stwio	r3,0(r2)
	while(1)
	{
		volatile uint32_t recvData = IORD_ALTERA_AVALON_PIO_DATA(TDMA_RECV_DATA_BASE);
    8418:	00800074 	movhi	r2,1
    841c:	10841004 	addi	r2,r2,4160
    8420:	10800037 	ldwio	r2,0(r2)
    8424:	e0bffd15 	stw	r2,-12(fp)
		if ((((recvData >> 28) & 0xF) == 0b1000)) // Is Data Packet
    8428:	e0bffd17 	ldw	r2,-12(fp)
    842c:	1004d73a 	srli	r2,r2,28
    8430:	10800218 	cmpnei	r2,r2,8
    8434:	103ff81e 	bne	r2,zero,8418 <_gp+0xffff5874>
		{
			uint16_t id = ((recvData >> 20) & 0xF);
    8438:	e0bffd17 	ldw	r2,-12(fp)
    843c:	1004d53a 	srli	r2,r2,20
    8440:	108003cc 	andi	r2,r2,15
    8444:	e0bff88d 	sth	r2,-30(fp)
			if (id == 0b0111 && sent == 0) // From Peak Detecting
    8448:	e0bff88b 	ldhu	r2,-30(fp)
    844c:	108001d8 	cmpnei	r2,r2,7
    8450:	10003c1e 	bne	r2,zero,8544 <main+0x1bc>
    8454:	e0bff503 	ldbu	r2,-44(fp)
    8458:	10003a1e 	bne	r2,zero,8544 <main+0x1bc>
			{
				uint8_t peakDetected = (recvData >> 18) & 1; // 18
    845c:	e0bffd17 	ldw	r2,-12(fp)
    8460:	1004d4ba 	srli	r2,r2,18
    8464:	1080004c 	andi	r2,r2,1
    8468:	e0bff905 	stb	r2,-28(fp)
				uint32_t corrCount = recvData & (0x3FFFF); // 17 downto 0
    846c:	e0fffd17 	ldw	r3,-12(fp)
    8470:	00800134 	movhi	r2,4
    8474:	10bfffc4 	addi	r2,r2,-1
    8478:	1884703a 	and	r2,r3,r2
    847c:	e0bffa15 	stw	r2,-24(fp)
				display7(HEX0_BASE, corrCount % 10);
    8480:	e0bffa17 	ldw	r2,-24(fp)
    8484:	01400284 	movi	r5,10
    8488:	1009883a 	mov	r4,r2
    848c:	00087c80 	call	87c8 <__umodsi3>
    8490:	100b883a 	mov	r5,r2
    8494:	01000074 	movhi	r4,1
    8498:	21042c04 	addi	r4,r4,4272
    849c:	000826c0 	call	826c <display7>
				display7(HEX1_BASE, corrCount / 10 % 10);
    84a0:	e0bffa17 	ldw	r2,-24(fp)
    84a4:	01400284 	movi	r5,10
    84a8:	1009883a 	mov	r4,r2
    84ac:	00087640 	call	8764 <__udivsi3>
    84b0:	01400284 	movi	r5,10
    84b4:	1009883a 	mov	r4,r2
    84b8:	00087c80 	call	87c8 <__umodsi3>
    84bc:	100b883a 	mov	r5,r2
    84c0:	01000074 	movhi	r4,1
    84c4:	21042804 	addi	r4,r4,4256
    84c8:	000826c0 	call	826c <display7>
				display7(HEX2_BASE, corrCount / 100 % 10);
    84cc:	e0bffa17 	ldw	r2,-24(fp)
    84d0:	01401904 	movi	r5,100
    84d4:	1009883a 	mov	r4,r2
    84d8:	00087640 	call	8764 <__udivsi3>
    84dc:	01400284 	movi	r5,10
    84e0:	1009883a 	mov	r4,r2
    84e4:	00087c80 	call	87c8 <__umodsi3>
    84e8:	100b883a 	mov	r5,r2
    84ec:	01000074 	movhi	r4,1
    84f0:	21042404 	addi	r4,r4,4240
    84f4:	000826c0 	call	826c <display7>
				//printf("-----------------");
				//printf("corrCount = %" PRIu32 "\n", corrCount);

				if (peakDetected == 1) // A Peak is Detected, Request Peak Value
    84f8:	e0bff903 	ldbu	r2,-28(fp)
    84fc:	10800058 	cmpnei	r2,r2,1
    8500:	1000581e 	bne	r2,zero,8664 <main+0x2dc>
				{
					IOWR_ALTERA_AVALON_PIO_DATA(HEX3_BASE, 15);
    8504:	00c003c4 	movi	r3,15
    8508:	00800074 	movhi	r2,1
    850c:	10842004 	addi	r2,r2,4224
    8510:	10c00035 	stwio	r3,0(r2)
					IOWR_ALTERA_AVALON_PIO_DATA(TDMA_SEND_ADDR_BASE, 0b0100); // To Peak Detector
    8514:	00c00104 	movi	r3,4
    8518:	00800074 	movhi	r2,1
    851c:	10840c04 	addi	r2,r2,4144
    8520:	10c00035 	stwio	r3,0(r2)
					IOWR_ALTERA_AVALON_PIO_DATA(TDMA_SEND_DATA_BASE, (0b1000 << 28) | (0b0110 << 20) | 0b11); // 1000 (31~28), 0110 (23~20), 11 (1~0)
    8524:	00e01834 	movhi	r3,32864
    8528:	18c000c4 	addi	r3,r3,3
    852c:	00800074 	movhi	r2,1
    8530:	10840804 	addi	r2,r2,4128
    8534:	10c00035 	stwio	r3,0(r2)
					sent = 1;
    8538:	00800044 	movi	r2,1
    853c:	e0bff505 	stb	r2,-44(fp)
		volatile uint32_t recvData = IORD_ALTERA_AVALON_PIO_DATA(TDMA_RECV_DATA_BASE);
		if ((((recvData >> 28) & 0xF) == 0b1000)) // Is Data Packet
		{
			uint16_t id = ((recvData >> 20) & 0xF);
			if (id == 0b0111 && sent == 0) // From Peak Detecting
			{
    8540:	00004806 	br	8664 <main+0x2dc>
					IOWR_ALTERA_AVALON_PIO_DATA(TDMA_SEND_ADDR_BASE, 0b0100); // To Peak Detector
					IOWR_ALTERA_AVALON_PIO_DATA(TDMA_SEND_DATA_BASE, (0b1000 << 28) | (0b0110 << 20) | 0b11); // 1000 (31~28), 0110 (23~20), 11 (1~0)
					sent = 1;
				}
			}
			else if (id == 0b1000) // From Peak Value
    8544:	e0bff88b 	ldhu	r2,-30(fp)
    8548:	10800218 	cmpnei	r2,r2,8
    854c:	103fb21e 	bne	r2,zero,8418 <_gp+0xffff5874>
			{
				uint16_t half = ((recvData >> 18) & 1);
    8550:	e0bffd17 	ldw	r2,-12(fp)
    8554:	1004d4ba 	srli	r2,r2,18
    8558:	1080004c 	andi	r2,r2,1
    855c:	e0bffb0d 	sth	r2,-20(fp)
				uint32_t value = (recvData & 0x3FFFF);
    8560:	e0fffd17 	ldw	r3,-12(fp)
    8564:	00800134 	movhi	r2,4
    8568:	10bfffc4 	addi	r2,r2,-1
    856c:	1884703a 	and	r2,r3,r2
    8570:	e0bffc15 	stw	r2,-16(fp)
				if (half == 0 && incomplete_half == 0) // First Half
    8574:	e0bffb0b 	ldhu	r2,-20(fp)
    8578:	10000d1e 	bne	r2,zero,85b0 <main+0x228>
    857c:	e0bff803 	ldbu	r2,-32(fp)
    8580:	10000b1e 	bne	r2,zero,85b0 <main+0x228>
				{
					IOWR_ALTERA_AVALON_PIO_DATA(HEX4_BASE, 15);
    8584:	00c003c4 	movi	r3,15
    8588:	00800074 	movhi	r2,1
    858c:	10841c04 	addi	r2,r2,4208
    8590:	10c00035 	stwio	r3,0(r2)
					peakValue = (value << 18); // 17 downto 0 -> 35 downto 18
    8594:	e0bffc17 	ldw	r2,-16(fp)
    8598:	100494ba 	slli	r2,r2,18
    859c:	e0bff315 	stw	r2,-52(fp)
    85a0:	e03ff415 	stw	zero,-48(fp)
					incomplete_half = 1;
    85a4:	00800044 	movi	r2,1
    85a8:	e0bff805 	stb	r2,-32(fp)
    85ac:	00002e06 	br	8668 <main+0x2e0>
				}
				else if (half == 1 && incomplete_half == 1) // Second Half
    85b0:	e0bffb0b 	ldhu	r2,-20(fp)
    85b4:	10800058 	cmpnei	r2,r2,1
    85b8:	103f971e 	bne	r2,zero,8418 <_gp+0xffff5874>
    85bc:	e0bff803 	ldbu	r2,-32(fp)
    85c0:	10800058 	cmpnei	r2,r2,1
    85c4:	103f941e 	bne	r2,zero,8418 <_gp+0xffff5874>
				{
					IOWR_ALTERA_AVALON_PIO_DATA(HEX5_BASE, 15);
    85c8:	00c003c4 	movi	r3,15
    85cc:	00800074 	movhi	r2,1
    85d0:	10841804 	addi	r2,r2,4192
    85d4:	10c00035 	stwio	r3,0(r2)
					peakValue |= value; // 17 downto 0 -> 17 downto 0
    85d8:	e0bffc17 	ldw	r2,-16(fp)
    85dc:	1021883a 	mov	r16,r2
    85e0:	0023883a 	mov	r17,zero
    85e4:	e0bff317 	ldw	r2,-52(fp)
    85e8:	1404b03a 	or	r2,r2,r16
    85ec:	e0bff315 	stw	r2,-52(fp)
    85f0:	e0bff417 	ldw	r2,-48(fp)
    85f4:	1444b03a 	or	r2,r2,r17
    85f8:	e0bff415 	stw	r2,-48(fp)
					if (count < 5)
    85fc:	e0bff717 	ldw	r2,-36(fp)
    8600:	10000a1e 	bne	r2,zero,862c <main+0x2a4>
    8604:	e0bff717 	ldw	r2,-36(fp)
    8608:	1000031e 	bne	r2,zero,8618 <main+0x290>
    860c:	e0bff617 	ldw	r2,-40(fp)
    8610:	10800168 	cmpgeui	r2,r2,5
    8614:	1000051e 	bne	r2,zero,862c <main+0x2a4>
						printf("Peak Value = %" PRIu64 "\n", peakValue);
    8618:	e17ff317 	ldw	r5,-52(fp)
    861c:	e1bff417 	ldw	r6,-48(fp)
    8620:	01000074 	movhi	r4,1
    8624:	212a2a04 	addi	r4,r4,-22360
    8628:	000885c0 	call	885c <printf>
					sent = 0;
    862c:	e03ff505 	stb	zero,-44(fp)
					count++;
    8630:	e13ff617 	ldw	r4,-40(fp)
    8634:	e17ff717 	ldw	r5,-36(fp)
    8638:	01800044 	movi	r6,1
    863c:	000f883a 	mov	r7,zero
    8640:	2185883a 	add	r2,r4,r6
    8644:	1111803a 	cmpltu	r8,r2,r4
    8648:	29c7883a 	add	r3,r5,r7
    864c:	40c9883a 	add	r4,r8,r3
    8650:	2007883a 	mov	r3,r4
    8654:	e0bff615 	stw	r2,-40(fp)
    8658:	e0fff715 	stw	r3,-36(fp)
					incomplete_half = 0;
    865c:	e03ff805 	stb	zero,-32(fp)
    8660:	003f6d06 	br	8418 <_gp+0xffff5874>
		volatile uint32_t recvData = IORD_ALTERA_AVALON_PIO_DATA(TDMA_RECV_DATA_BASE);
		if ((((recvData >> 28) & 0xF) == 0b1000)) // Is Data Packet
		{
			uint16_t id = ((recvData >> 20) & 0xF);
			if (id == 0b0111 && sent == 0) // From Peak Detecting
			{
    8664:	0001883a 	nop
					count++;
					incomplete_half = 0;
				}
			}
		}
	}
    8668:	003f6b06 	br	8418 <_gp+0xffff5874>

0000866c <__divsi3>:
    866c:	20001b16 	blt	r4,zero,86dc <__divsi3+0x70>
    8670:	000f883a 	mov	r7,zero
    8674:	28001616 	blt	r5,zero,86d0 <__divsi3+0x64>
    8678:	200d883a 	mov	r6,r4
    867c:	29001a2e 	bgeu	r5,r4,86e8 <__divsi3+0x7c>
    8680:	00800804 	movi	r2,32
    8684:	00c00044 	movi	r3,1
    8688:	00000106 	br	8690 <__divsi3+0x24>
    868c:	10000d26 	beq	r2,zero,86c4 <__divsi3+0x58>
    8690:	294b883a 	add	r5,r5,r5
    8694:	10bfffc4 	addi	r2,r2,-1
    8698:	18c7883a 	add	r3,r3,r3
    869c:	293ffb36 	bltu	r5,r4,868c <_gp+0xffff5ae8>
    86a0:	0005883a 	mov	r2,zero
    86a4:	18000726 	beq	r3,zero,86c4 <__divsi3+0x58>
    86a8:	0005883a 	mov	r2,zero
    86ac:	31400236 	bltu	r6,r5,86b8 <__divsi3+0x4c>
    86b0:	314dc83a 	sub	r6,r6,r5
    86b4:	10c4b03a 	or	r2,r2,r3
    86b8:	1806d07a 	srli	r3,r3,1
    86bc:	280ad07a 	srli	r5,r5,1
    86c0:	183ffa1e 	bne	r3,zero,86ac <_gp+0xffff5b08>
    86c4:	38000126 	beq	r7,zero,86cc <__divsi3+0x60>
    86c8:	0085c83a 	sub	r2,zero,r2
    86cc:	f800283a 	ret
    86d0:	014bc83a 	sub	r5,zero,r5
    86d4:	39c0005c 	xori	r7,r7,1
    86d8:	003fe706 	br	8678 <_gp+0xffff5ad4>
    86dc:	0109c83a 	sub	r4,zero,r4
    86e0:	01c00044 	movi	r7,1
    86e4:	003fe306 	br	8674 <_gp+0xffff5ad0>
    86e8:	00c00044 	movi	r3,1
    86ec:	003fee06 	br	86a8 <_gp+0xffff5b04>

000086f0 <__modsi3>:
    86f0:	20001716 	blt	r4,zero,8750 <__modsi3+0x60>
    86f4:	000f883a 	mov	r7,zero
    86f8:	2005883a 	mov	r2,r4
    86fc:	28001216 	blt	r5,zero,8748 <__modsi3+0x58>
    8700:	2900162e 	bgeu	r5,r4,875c <__modsi3+0x6c>
    8704:	01800804 	movi	r6,32
    8708:	00c00044 	movi	r3,1
    870c:	00000106 	br	8714 <__modsi3+0x24>
    8710:	30000a26 	beq	r6,zero,873c <__modsi3+0x4c>
    8714:	294b883a 	add	r5,r5,r5
    8718:	31bfffc4 	addi	r6,r6,-1
    871c:	18c7883a 	add	r3,r3,r3
    8720:	293ffb36 	bltu	r5,r4,8710 <_gp+0xffff5b6c>
    8724:	18000526 	beq	r3,zero,873c <__modsi3+0x4c>
    8728:	1806d07a 	srli	r3,r3,1
    872c:	11400136 	bltu	r2,r5,8734 <__modsi3+0x44>
    8730:	1145c83a 	sub	r2,r2,r5
    8734:	280ad07a 	srli	r5,r5,1
    8738:	183ffb1e 	bne	r3,zero,8728 <_gp+0xffff5b84>
    873c:	38000126 	beq	r7,zero,8744 <__modsi3+0x54>
    8740:	0085c83a 	sub	r2,zero,r2
    8744:	f800283a 	ret
    8748:	014bc83a 	sub	r5,zero,r5
    874c:	003fec06 	br	8700 <_gp+0xffff5b5c>
    8750:	0109c83a 	sub	r4,zero,r4
    8754:	01c00044 	movi	r7,1
    8758:	003fe706 	br	86f8 <_gp+0xffff5b54>
    875c:	00c00044 	movi	r3,1
    8760:	003ff106 	br	8728 <_gp+0xffff5b84>

00008764 <__udivsi3>:
    8764:	200d883a 	mov	r6,r4
    8768:	2900152e 	bgeu	r5,r4,87c0 <__udivsi3+0x5c>
    876c:	28001416 	blt	r5,zero,87c0 <__udivsi3+0x5c>
    8770:	00800804 	movi	r2,32
    8774:	00c00044 	movi	r3,1
    8778:	00000206 	br	8784 <__udivsi3+0x20>
    877c:	10000e26 	beq	r2,zero,87b8 <__udivsi3+0x54>
    8780:	28000516 	blt	r5,zero,8798 <__udivsi3+0x34>
    8784:	294b883a 	add	r5,r5,r5
    8788:	10bfffc4 	addi	r2,r2,-1
    878c:	18c7883a 	add	r3,r3,r3
    8790:	293ffa36 	bltu	r5,r4,877c <_gp+0xffff5bd8>
    8794:	18000826 	beq	r3,zero,87b8 <__udivsi3+0x54>
    8798:	0005883a 	mov	r2,zero
    879c:	31400236 	bltu	r6,r5,87a8 <__udivsi3+0x44>
    87a0:	314dc83a 	sub	r6,r6,r5
    87a4:	10c4b03a 	or	r2,r2,r3
    87a8:	1806d07a 	srli	r3,r3,1
    87ac:	280ad07a 	srli	r5,r5,1
    87b0:	183ffa1e 	bne	r3,zero,879c <_gp+0xffff5bf8>
    87b4:	f800283a 	ret
    87b8:	0005883a 	mov	r2,zero
    87bc:	f800283a 	ret
    87c0:	00c00044 	movi	r3,1
    87c4:	003ff406 	br	8798 <_gp+0xffff5bf4>

000087c8 <__umodsi3>:
    87c8:	2005883a 	mov	r2,r4
    87cc:	2900122e 	bgeu	r5,r4,8818 <__umodsi3+0x50>
    87d0:	28001116 	blt	r5,zero,8818 <__umodsi3+0x50>
    87d4:	01800804 	movi	r6,32
    87d8:	00c00044 	movi	r3,1
    87dc:	00000206 	br	87e8 <__umodsi3+0x20>
    87e0:	30000c26 	beq	r6,zero,8814 <__umodsi3+0x4c>
    87e4:	28000516 	blt	r5,zero,87fc <__umodsi3+0x34>
    87e8:	294b883a 	add	r5,r5,r5
    87ec:	31bfffc4 	addi	r6,r6,-1
    87f0:	18c7883a 	add	r3,r3,r3
    87f4:	293ffa36 	bltu	r5,r4,87e0 <_gp+0xffff5c3c>
    87f8:	18000626 	beq	r3,zero,8814 <__umodsi3+0x4c>
    87fc:	1806d07a 	srli	r3,r3,1
    8800:	11400136 	bltu	r2,r5,8808 <__umodsi3+0x40>
    8804:	1145c83a 	sub	r2,r2,r5
    8808:	280ad07a 	srli	r5,r5,1
    880c:	183ffb1e 	bne	r3,zero,87fc <_gp+0xffff5c58>
    8810:	f800283a 	ret
    8814:	f800283a 	ret
    8818:	00c00044 	movi	r3,1
    881c:	003ff706 	br	87fc <_gp+0xffff5c58>

00008820 <_printf_r>:
    8820:	defffd04 	addi	sp,sp,-12
    8824:	dfc00015 	stw	ra,0(sp)
    8828:	d9800115 	stw	r6,4(sp)
    882c:	d9c00215 	stw	r7,8(sp)
    8830:	20c00217 	ldw	r3,8(r4)
    8834:	01800074 	movhi	r6,1
    8838:	31a39704 	addi	r6,r6,-29092
    883c:	19800115 	stw	r6,4(r3)
    8840:	280d883a 	mov	r6,r5
    8844:	21400217 	ldw	r5,8(r4)
    8848:	d9c00104 	addi	r7,sp,4
    884c:	00089140 	call	8914 <___vfprintf_internal_r>
    8850:	dfc00017 	ldw	ra,0(sp)
    8854:	dec00304 	addi	sp,sp,12
    8858:	f800283a 	ret

0000885c <printf>:
    885c:	defffc04 	addi	sp,sp,-16
    8860:	dfc00015 	stw	ra,0(sp)
    8864:	d9400115 	stw	r5,4(sp)
    8868:	d9800215 	stw	r6,8(sp)
    886c:	d9c00315 	stw	r7,12(sp)
    8870:	00800074 	movhi	r2,1
    8874:	10aaea04 	addi	r2,r2,-21592
    8878:	10800017 	ldw	r2,0(r2)
    887c:	01400074 	movhi	r5,1
    8880:	29639704 	addi	r5,r5,-29092
    8884:	10c00217 	ldw	r3,8(r2)
    8888:	d9800104 	addi	r6,sp,4
    888c:	19400115 	stw	r5,4(r3)
    8890:	200b883a 	mov	r5,r4
    8894:	11000217 	ldw	r4,8(r2)
    8898:	0008e400 	call	8e40 <__vfprintf_internal>
    889c:	dfc00017 	ldw	ra,0(sp)
    88a0:	dec00404 	addi	sp,sp,16
    88a4:	f800283a 	ret

000088a8 <print_repeat>:
    88a8:	defffb04 	addi	sp,sp,-20
    88ac:	dc800315 	stw	r18,12(sp)
    88b0:	dc400215 	stw	r17,8(sp)
    88b4:	dc000115 	stw	r16,4(sp)
    88b8:	dfc00415 	stw	ra,16(sp)
    88bc:	2025883a 	mov	r18,r4
    88c0:	2823883a 	mov	r17,r5
    88c4:	d9800005 	stb	r6,0(sp)
    88c8:	3821883a 	mov	r16,r7
    88cc:	04000a0e 	bge	zero,r16,88f8 <print_repeat+0x50>
    88d0:	88800117 	ldw	r2,4(r17)
    88d4:	01c00044 	movi	r7,1
    88d8:	d80d883a 	mov	r6,sp
    88dc:	880b883a 	mov	r5,r17
    88e0:	9009883a 	mov	r4,r18
    88e4:	103ee83a 	callr	r2
    88e8:	843fffc4 	addi	r16,r16,-1
    88ec:	103ff726 	beq	r2,zero,88cc <_gp+0xffff5d28>
    88f0:	00bfffc4 	movi	r2,-1
    88f4:	00000106 	br	88fc <print_repeat+0x54>
    88f8:	0005883a 	mov	r2,zero
    88fc:	dfc00417 	ldw	ra,16(sp)
    8900:	dc800317 	ldw	r18,12(sp)
    8904:	dc400217 	ldw	r17,8(sp)
    8908:	dc000117 	ldw	r16,4(sp)
    890c:	dec00504 	addi	sp,sp,20
    8910:	f800283a 	ret

00008914 <___vfprintf_internal_r>:
    8914:	deffe504 	addi	sp,sp,-108
    8918:	d8c00804 	addi	r3,sp,32
    891c:	ddc01815 	stw	r23,96(sp)
    8920:	dd801715 	stw	r22,92(sp)
    8924:	dd401615 	stw	r21,88(sp)
    8928:	dd001515 	stw	r20,84(sp)
    892c:	dcc01415 	stw	r19,80(sp)
    8930:	dc801315 	stw	r18,76(sp)
    8934:	dc401215 	stw	r17,72(sp)
    8938:	dc001115 	stw	r16,68(sp)
    893c:	dfc01a15 	stw	ra,104(sp)
    8940:	df001915 	stw	fp,100(sp)
    8944:	2029883a 	mov	r20,r4
    8948:	2823883a 	mov	r17,r5
    894c:	382d883a 	mov	r22,r7
    8950:	d9800f15 	stw	r6,60(sp)
    8954:	0021883a 	mov	r16,zero
    8958:	d8000e15 	stw	zero,56(sp)
    895c:	d8000a15 	stw	zero,40(sp)
    8960:	002b883a 	mov	r21,zero
    8964:	0027883a 	mov	r19,zero
    8968:	0025883a 	mov	r18,zero
    896c:	d8000c15 	stw	zero,48(sp)
    8970:	d8000b15 	stw	zero,44(sp)
    8974:	002f883a 	mov	r23,zero
    8978:	d8c00915 	stw	r3,36(sp)
    897c:	d8c00f17 	ldw	r3,60(sp)
    8980:	19000003 	ldbu	r4,0(r3)
    8984:	20803fcc 	andi	r2,r4,255
    8988:	1080201c 	xori	r2,r2,128
    898c:	10bfe004 	addi	r2,r2,-128
    8990:	10011e26 	beq	r2,zero,8e0c <___vfprintf_internal_r+0x4f8>
    8994:	00c00044 	movi	r3,1
    8998:	b8c01426 	beq	r23,r3,89ec <___vfprintf_internal_r+0xd8>
    899c:	1dc00216 	blt	r3,r23,89a8 <___vfprintf_internal_r+0x94>
    89a0:	b8000626 	beq	r23,zero,89bc <___vfprintf_internal_r+0xa8>
    89a4:	00011506 	br	8dfc <___vfprintf_internal_r+0x4e8>
    89a8:	01400084 	movi	r5,2
    89ac:	b9401d26 	beq	r23,r5,8a24 <___vfprintf_internal_r+0x110>
    89b0:	014000c4 	movi	r5,3
    89b4:	b9402b26 	beq	r23,r5,8a64 <___vfprintf_internal_r+0x150>
    89b8:	00011006 	br	8dfc <___vfprintf_internal_r+0x4e8>
    89bc:	01400944 	movi	r5,37
    89c0:	1140fc26 	beq	r2,r5,8db4 <___vfprintf_internal_r+0x4a0>
    89c4:	88800117 	ldw	r2,4(r17)
    89c8:	d9000005 	stb	r4,0(sp)
    89cc:	01c00044 	movi	r7,1
    89d0:	d80d883a 	mov	r6,sp
    89d4:	880b883a 	mov	r5,r17
    89d8:	a009883a 	mov	r4,r20
    89dc:	103ee83a 	callr	r2
    89e0:	1000d81e 	bne	r2,zero,8d44 <___vfprintf_internal_r+0x430>
    89e4:	84000044 	addi	r16,r16,1
    89e8:	00010406 	br	8dfc <___vfprintf_internal_r+0x4e8>
    89ec:	01400c04 	movi	r5,48
    89f0:	1140fa26 	beq	r2,r5,8ddc <___vfprintf_internal_r+0x4c8>
    89f4:	01400944 	movi	r5,37
    89f8:	11400a1e 	bne	r2,r5,8a24 <___vfprintf_internal_r+0x110>
    89fc:	d8800005 	stb	r2,0(sp)
    8a00:	88800117 	ldw	r2,4(r17)
    8a04:	b80f883a 	mov	r7,r23
    8a08:	d80d883a 	mov	r6,sp
    8a0c:	880b883a 	mov	r5,r17
    8a10:	a009883a 	mov	r4,r20
    8a14:	103ee83a 	callr	r2
    8a18:	1000ca1e 	bne	r2,zero,8d44 <___vfprintf_internal_r+0x430>
    8a1c:	84000044 	addi	r16,r16,1
    8a20:	0000f506 	br	8df8 <___vfprintf_internal_r+0x4e4>
    8a24:	25fff404 	addi	r23,r4,-48
    8a28:	bdc03fcc 	andi	r23,r23,255
    8a2c:	00c00244 	movi	r3,9
    8a30:	1dc00936 	bltu	r3,r23,8a58 <___vfprintf_internal_r+0x144>
    8a34:	00bfffc4 	movi	r2,-1
    8a38:	90800426 	beq	r18,r2,8a4c <___vfprintf_internal_r+0x138>
    8a3c:	01400284 	movi	r5,10
    8a40:	9009883a 	mov	r4,r18
    8a44:	0008f880 	call	8f88 <__mulsi3>
    8a48:	00000106 	br	8a50 <___vfprintf_internal_r+0x13c>
    8a4c:	0005883a 	mov	r2,zero
    8a50:	b8a5883a 	add	r18,r23,r2
    8a54:	0000e206 	br	8de0 <___vfprintf_internal_r+0x4cc>
    8a58:	01400b84 	movi	r5,46
    8a5c:	1140e426 	beq	r2,r5,8df0 <___vfprintf_internal_r+0x4dc>
    8a60:	05c00084 	movi	r23,2
    8a64:	213ff404 	addi	r4,r4,-48
    8a68:	27003fcc 	andi	fp,r4,255
    8a6c:	00c00244 	movi	r3,9
    8a70:	1f000936 	bltu	r3,fp,8a98 <___vfprintf_internal_r+0x184>
    8a74:	00bfffc4 	movi	r2,-1
    8a78:	98800426 	beq	r19,r2,8a8c <___vfprintf_internal_r+0x178>
    8a7c:	01400284 	movi	r5,10
    8a80:	9809883a 	mov	r4,r19
    8a84:	0008f880 	call	8f88 <__mulsi3>
    8a88:	00000106 	br	8a90 <___vfprintf_internal_r+0x17c>
    8a8c:	0005883a 	mov	r2,zero
    8a90:	e0a7883a 	add	r19,fp,r2
    8a94:	0000d906 	br	8dfc <___vfprintf_internal_r+0x4e8>
    8a98:	00c01b04 	movi	r3,108
    8a9c:	10c0d226 	beq	r2,r3,8de8 <___vfprintf_internal_r+0x4d4>
    8aa0:	013fffc4 	movi	r4,-1
    8aa4:	99000226 	beq	r19,r4,8ab0 <___vfprintf_internal_r+0x19c>
    8aa8:	d8000b15 	stw	zero,44(sp)
    8aac:	00000106 	br	8ab4 <___vfprintf_internal_r+0x1a0>
    8ab0:	04c00044 	movi	r19,1
    8ab4:	01001a44 	movi	r4,105
    8ab8:	11001626 	beq	r2,r4,8b14 <___vfprintf_internal_r+0x200>
    8abc:	20800916 	blt	r4,r2,8ae4 <___vfprintf_internal_r+0x1d0>
    8ac0:	010018c4 	movi	r4,99
    8ac4:	11008826 	beq	r2,r4,8ce8 <___vfprintf_internal_r+0x3d4>
    8ac8:	01001904 	movi	r4,100
    8acc:	11001126 	beq	r2,r4,8b14 <___vfprintf_internal_r+0x200>
    8ad0:	01001604 	movi	r4,88
    8ad4:	1100c81e 	bne	r2,r4,8df8 <___vfprintf_internal_r+0x4e4>
    8ad8:	00c00044 	movi	r3,1
    8adc:	d8c00e15 	stw	r3,56(sp)
    8ae0:	00001506 	br	8b38 <___vfprintf_internal_r+0x224>
    8ae4:	01001cc4 	movi	r4,115
    8ae8:	11009826 	beq	r2,r4,8d4c <___vfprintf_internal_r+0x438>
    8aec:	20800416 	blt	r4,r2,8b00 <___vfprintf_internal_r+0x1ec>
    8af0:	01001bc4 	movi	r4,111
    8af4:	1100c01e 	bne	r2,r4,8df8 <___vfprintf_internal_r+0x4e4>
    8af8:	05400204 	movi	r21,8
    8afc:	00000f06 	br	8b3c <___vfprintf_internal_r+0x228>
    8b00:	01001d44 	movi	r4,117
    8b04:	11000d26 	beq	r2,r4,8b3c <___vfprintf_internal_r+0x228>
    8b08:	01001e04 	movi	r4,120
    8b0c:	11000a26 	beq	r2,r4,8b38 <___vfprintf_internal_r+0x224>
    8b10:	0000b906 	br	8df8 <___vfprintf_internal_r+0x4e4>
    8b14:	d8c00a17 	ldw	r3,40(sp)
    8b18:	b7000104 	addi	fp,r22,4
    8b1c:	18000726 	beq	r3,zero,8b3c <___vfprintf_internal_r+0x228>
    8b20:	df000d15 	stw	fp,52(sp)
    8b24:	b5c00017 	ldw	r23,0(r22)
    8b28:	b800080e 	bge	r23,zero,8b4c <___vfprintf_internal_r+0x238>
    8b2c:	05efc83a 	sub	r23,zero,r23
    8b30:	02400044 	movi	r9,1
    8b34:	00000606 	br	8b50 <___vfprintf_internal_r+0x23c>
    8b38:	05400404 	movi	r21,16
    8b3c:	b0c00104 	addi	r3,r22,4
    8b40:	d8c00d15 	stw	r3,52(sp)
    8b44:	b5c00017 	ldw	r23,0(r22)
    8b48:	d8000a15 	stw	zero,40(sp)
    8b4c:	0013883a 	mov	r9,zero
    8b50:	d839883a 	mov	fp,sp
    8b54:	b8001726 	beq	r23,zero,8bb4 <___vfprintf_internal_r+0x2a0>
    8b58:	a80b883a 	mov	r5,r21
    8b5c:	b809883a 	mov	r4,r23
    8b60:	da401015 	stw	r9,64(sp)
    8b64:	00087640 	call	8764 <__udivsi3>
    8b68:	a80b883a 	mov	r5,r21
    8b6c:	1009883a 	mov	r4,r2
    8b70:	102d883a 	mov	r22,r2
    8b74:	0008f880 	call	8f88 <__mulsi3>
    8b78:	b885c83a 	sub	r2,r23,r2
    8b7c:	00c00244 	movi	r3,9
    8b80:	da401017 	ldw	r9,64(sp)
    8b84:	18800216 	blt	r3,r2,8b90 <___vfprintf_internal_r+0x27c>
    8b88:	10800c04 	addi	r2,r2,48
    8b8c:	00000506 	br	8ba4 <___vfprintf_internal_r+0x290>
    8b90:	d8c00e17 	ldw	r3,56(sp)
    8b94:	18000226 	beq	r3,zero,8ba0 <___vfprintf_internal_r+0x28c>
    8b98:	10800dc4 	addi	r2,r2,55
    8b9c:	00000106 	br	8ba4 <___vfprintf_internal_r+0x290>
    8ba0:	108015c4 	addi	r2,r2,87
    8ba4:	e0800005 	stb	r2,0(fp)
    8ba8:	b02f883a 	mov	r23,r22
    8bac:	e7000044 	addi	fp,fp,1
    8bb0:	003fe806 	br	8b54 <_gp+0xffff5fb0>
    8bb4:	e6efc83a 	sub	r23,fp,sp
    8bb8:	9dc5c83a 	sub	r2,r19,r23
    8bbc:	0080090e 	bge	zero,r2,8be4 <___vfprintf_internal_r+0x2d0>
    8bc0:	e085883a 	add	r2,fp,r2
    8bc4:	01400c04 	movi	r5,48
    8bc8:	d8c00917 	ldw	r3,36(sp)
    8bcc:	e009883a 	mov	r4,fp
    8bd0:	e0c0032e 	bgeu	fp,r3,8be0 <___vfprintf_internal_r+0x2cc>
    8bd4:	e7000044 	addi	fp,fp,1
    8bd8:	21400005 	stb	r5,0(r4)
    8bdc:	e0bffa1e 	bne	fp,r2,8bc8 <_gp+0xffff6024>
    8be0:	e6efc83a 	sub	r23,fp,sp
    8be4:	d8c00b17 	ldw	r3,44(sp)
    8be8:	4dd1883a 	add	r8,r9,r23
    8bec:	922dc83a 	sub	r22,r18,r8
    8bf0:	18001626 	beq	r3,zero,8c4c <___vfprintf_internal_r+0x338>
    8bf4:	48000a26 	beq	r9,zero,8c20 <___vfprintf_internal_r+0x30c>
    8bf8:	00800b44 	movi	r2,45
    8bfc:	d8800805 	stb	r2,32(sp)
    8c00:	88800117 	ldw	r2,4(r17)
    8c04:	01c00044 	movi	r7,1
    8c08:	d9800804 	addi	r6,sp,32
    8c0c:	880b883a 	mov	r5,r17
    8c10:	a009883a 	mov	r4,r20
    8c14:	103ee83a 	callr	r2
    8c18:	10004a1e 	bne	r2,zero,8d44 <___vfprintf_internal_r+0x430>
    8c1c:	84000044 	addi	r16,r16,1
    8c20:	0580070e 	bge	zero,r22,8c40 <___vfprintf_internal_r+0x32c>
    8c24:	b00f883a 	mov	r7,r22
    8c28:	01800c04 	movi	r6,48
    8c2c:	880b883a 	mov	r5,r17
    8c30:	a009883a 	mov	r4,r20
    8c34:	00088a80 	call	88a8 <print_repeat>
    8c38:	1000421e 	bne	r2,zero,8d44 <___vfprintf_internal_r+0x430>
    8c3c:	85a1883a 	add	r16,r16,r22
    8c40:	e02d883a 	mov	r22,fp
    8c44:	bf2fc83a 	sub	r23,r23,fp
    8c48:	00002006 	br	8ccc <___vfprintf_internal_r+0x3b8>
    8c4c:	0580090e 	bge	zero,r22,8c74 <___vfprintf_internal_r+0x360>
    8c50:	b00f883a 	mov	r7,r22
    8c54:	01800804 	movi	r6,32
    8c58:	880b883a 	mov	r5,r17
    8c5c:	a009883a 	mov	r4,r20
    8c60:	da401015 	stw	r9,64(sp)
    8c64:	00088a80 	call	88a8 <print_repeat>
    8c68:	da401017 	ldw	r9,64(sp)
    8c6c:	1000351e 	bne	r2,zero,8d44 <___vfprintf_internal_r+0x430>
    8c70:	85a1883a 	add	r16,r16,r22
    8c74:	483ff226 	beq	r9,zero,8c40 <_gp+0xffff609c>
    8c78:	00800b44 	movi	r2,45
    8c7c:	d8800805 	stb	r2,32(sp)
    8c80:	88800117 	ldw	r2,4(r17)
    8c84:	01c00044 	movi	r7,1
    8c88:	d9800804 	addi	r6,sp,32
    8c8c:	880b883a 	mov	r5,r17
    8c90:	a009883a 	mov	r4,r20
    8c94:	103ee83a 	callr	r2
    8c98:	10002a1e 	bne	r2,zero,8d44 <___vfprintf_internal_r+0x430>
    8c9c:	84000044 	addi	r16,r16,1
    8ca0:	003fe706 	br	8c40 <_gp+0xffff609c>
    8ca4:	b5bfffc4 	addi	r22,r22,-1
    8ca8:	b0800003 	ldbu	r2,0(r22)
    8cac:	01c00044 	movi	r7,1
    8cb0:	d9800804 	addi	r6,sp,32
    8cb4:	d8800805 	stb	r2,32(sp)
    8cb8:	88800117 	ldw	r2,4(r17)
    8cbc:	880b883a 	mov	r5,r17
    8cc0:	a009883a 	mov	r4,r20
    8cc4:	103ee83a 	callr	r2
    8cc8:	10001e1e 	bne	r2,zero,8d44 <___vfprintf_internal_r+0x430>
    8ccc:	8585c83a 	sub	r2,r16,r22
    8cd0:	b5c9883a 	add	r4,r22,r23
    8cd4:	e085883a 	add	r2,fp,r2
    8cd8:	013ff216 	blt	zero,r4,8ca4 <_gp+0xffff6100>
    8cdc:	1021883a 	mov	r16,r2
    8ce0:	dd800d17 	ldw	r22,52(sp)
    8ce4:	00004406 	br	8df8 <___vfprintf_internal_r+0x4e4>
    8ce8:	00800044 	movi	r2,1
    8cec:	1480080e 	bge	r2,r18,8d10 <___vfprintf_internal_r+0x3fc>
    8cf0:	95ffffc4 	addi	r23,r18,-1
    8cf4:	b80f883a 	mov	r7,r23
    8cf8:	01800804 	movi	r6,32
    8cfc:	880b883a 	mov	r5,r17
    8d00:	a009883a 	mov	r4,r20
    8d04:	00088a80 	call	88a8 <print_repeat>
    8d08:	10000e1e 	bne	r2,zero,8d44 <___vfprintf_internal_r+0x430>
    8d0c:	85e1883a 	add	r16,r16,r23
    8d10:	b0800017 	ldw	r2,0(r22)
    8d14:	01c00044 	movi	r7,1
    8d18:	d80d883a 	mov	r6,sp
    8d1c:	d8800005 	stb	r2,0(sp)
    8d20:	88800117 	ldw	r2,4(r17)
    8d24:	880b883a 	mov	r5,r17
    8d28:	a009883a 	mov	r4,r20
    8d2c:	b5c00104 	addi	r23,r22,4
    8d30:	103ee83a 	callr	r2
    8d34:	1000031e 	bne	r2,zero,8d44 <___vfprintf_internal_r+0x430>
    8d38:	84000044 	addi	r16,r16,1
    8d3c:	b82d883a 	mov	r22,r23
    8d40:	00002d06 	br	8df8 <___vfprintf_internal_r+0x4e4>
    8d44:	00bfffc4 	movi	r2,-1
    8d48:	00003106 	br	8e10 <___vfprintf_internal_r+0x4fc>
    8d4c:	b5c00017 	ldw	r23,0(r22)
    8d50:	b7000104 	addi	fp,r22,4
    8d54:	b809883a 	mov	r4,r23
    8d58:	0008f140 	call	8f14 <strlen>
    8d5c:	9091c83a 	sub	r8,r18,r2
    8d60:	102d883a 	mov	r22,r2
    8d64:	0200090e 	bge	zero,r8,8d8c <___vfprintf_internal_r+0x478>
    8d68:	400f883a 	mov	r7,r8
    8d6c:	01800804 	movi	r6,32
    8d70:	880b883a 	mov	r5,r17
    8d74:	a009883a 	mov	r4,r20
    8d78:	da001015 	stw	r8,64(sp)
    8d7c:	00088a80 	call	88a8 <print_repeat>
    8d80:	da001017 	ldw	r8,64(sp)
    8d84:	103fef1e 	bne	r2,zero,8d44 <_gp+0xffff61a0>
    8d88:	8221883a 	add	r16,r16,r8
    8d8c:	88800117 	ldw	r2,4(r17)
    8d90:	b00f883a 	mov	r7,r22
    8d94:	b80d883a 	mov	r6,r23
    8d98:	880b883a 	mov	r5,r17
    8d9c:	a009883a 	mov	r4,r20
    8da0:	103ee83a 	callr	r2
    8da4:	103fe71e 	bne	r2,zero,8d44 <_gp+0xffff61a0>
    8da8:	85a1883a 	add	r16,r16,r22
    8dac:	e02d883a 	mov	r22,fp
    8db0:	00001106 	br	8df8 <___vfprintf_internal_r+0x4e4>
    8db4:	00c00044 	movi	r3,1
    8db8:	04ffffc4 	movi	r19,-1
    8dbc:	d8000e15 	stw	zero,56(sp)
    8dc0:	d8c00a15 	stw	r3,40(sp)
    8dc4:	05400284 	movi	r21,10
    8dc8:	9825883a 	mov	r18,r19
    8dcc:	d8000c15 	stw	zero,48(sp)
    8dd0:	d8000b15 	stw	zero,44(sp)
    8dd4:	182f883a 	mov	r23,r3
    8dd8:	00000806 	br	8dfc <___vfprintf_internal_r+0x4e8>
    8ddc:	ddc00b15 	stw	r23,44(sp)
    8de0:	05c00084 	movi	r23,2
    8de4:	00000506 	br	8dfc <___vfprintf_internal_r+0x4e8>
    8de8:	00c00044 	movi	r3,1
    8dec:	d8c00c15 	stw	r3,48(sp)
    8df0:	05c000c4 	movi	r23,3
    8df4:	00000106 	br	8dfc <___vfprintf_internal_r+0x4e8>
    8df8:	002f883a 	mov	r23,zero
    8dfc:	d8c00f17 	ldw	r3,60(sp)
    8e00:	18c00044 	addi	r3,r3,1
    8e04:	d8c00f15 	stw	r3,60(sp)
    8e08:	003edc06 	br	897c <_gp+0xffff5dd8>
    8e0c:	8005883a 	mov	r2,r16
    8e10:	dfc01a17 	ldw	ra,104(sp)
    8e14:	df001917 	ldw	fp,100(sp)
    8e18:	ddc01817 	ldw	r23,96(sp)
    8e1c:	dd801717 	ldw	r22,92(sp)
    8e20:	dd401617 	ldw	r21,88(sp)
    8e24:	dd001517 	ldw	r20,84(sp)
    8e28:	dcc01417 	ldw	r19,80(sp)
    8e2c:	dc801317 	ldw	r18,76(sp)
    8e30:	dc401217 	ldw	r17,72(sp)
    8e34:	dc001117 	ldw	r16,68(sp)
    8e38:	dec01b04 	addi	sp,sp,108
    8e3c:	f800283a 	ret

00008e40 <__vfprintf_internal>:
    8e40:	00800074 	movhi	r2,1
    8e44:	10aaea04 	addi	r2,r2,-21592
    8e48:	300f883a 	mov	r7,r6
    8e4c:	280d883a 	mov	r6,r5
    8e50:	200b883a 	mov	r5,r4
    8e54:	11000017 	ldw	r4,0(r2)
    8e58:	00089141 	jmpi	8914 <___vfprintf_internal_r>

00008e5c <__sfvwrite_small_dev>:
    8e5c:	2880000b 	ldhu	r2,0(r5)
    8e60:	1080020c 	andi	r2,r2,8
    8e64:	10002126 	beq	r2,zero,8eec <__sfvwrite_small_dev+0x90>
    8e68:	2880008f 	ldh	r2,2(r5)
    8e6c:	defffa04 	addi	sp,sp,-24
    8e70:	dc000015 	stw	r16,0(sp)
    8e74:	dfc00515 	stw	ra,20(sp)
    8e78:	dd000415 	stw	r20,16(sp)
    8e7c:	dcc00315 	stw	r19,12(sp)
    8e80:	dc800215 	stw	r18,8(sp)
    8e84:	dc400115 	stw	r17,4(sp)
    8e88:	2821883a 	mov	r16,r5
    8e8c:	10001216 	blt	r2,zero,8ed8 <__sfvwrite_small_dev+0x7c>
    8e90:	2027883a 	mov	r19,r4
    8e94:	3025883a 	mov	r18,r6
    8e98:	3823883a 	mov	r17,r7
    8e9c:	05010004 	movi	r20,1024
    8ea0:	04400b0e 	bge	zero,r17,8ed0 <__sfvwrite_small_dev+0x74>
    8ea4:	880f883a 	mov	r7,r17
    8ea8:	a440010e 	bge	r20,r17,8eb0 <__sfvwrite_small_dev+0x54>
    8eac:	01c10004 	movi	r7,1024
    8eb0:	8140008f 	ldh	r5,2(r16)
    8eb4:	900d883a 	mov	r6,r18
    8eb8:	9809883a 	mov	r4,r19
    8ebc:	0008f300 	call	8f30 <_write_r>
    8ec0:	0080050e 	bge	zero,r2,8ed8 <__sfvwrite_small_dev+0x7c>
    8ec4:	88a3c83a 	sub	r17,r17,r2
    8ec8:	90a5883a 	add	r18,r18,r2
    8ecc:	003ff406 	br	8ea0 <_gp+0xffff62fc>
    8ed0:	0005883a 	mov	r2,zero
    8ed4:	00000706 	br	8ef4 <__sfvwrite_small_dev+0x98>
    8ed8:	8080000b 	ldhu	r2,0(r16)
    8edc:	10801014 	ori	r2,r2,64
    8ee0:	8080000d 	sth	r2,0(r16)
    8ee4:	00bfffc4 	movi	r2,-1
    8ee8:	00000206 	br	8ef4 <__sfvwrite_small_dev+0x98>
    8eec:	00bfffc4 	movi	r2,-1
    8ef0:	f800283a 	ret
    8ef4:	dfc00517 	ldw	ra,20(sp)
    8ef8:	dd000417 	ldw	r20,16(sp)
    8efc:	dcc00317 	ldw	r19,12(sp)
    8f00:	dc800217 	ldw	r18,8(sp)
    8f04:	dc400117 	ldw	r17,4(sp)
    8f08:	dc000017 	ldw	r16,0(sp)
    8f0c:	dec00604 	addi	sp,sp,24
    8f10:	f800283a 	ret

00008f14 <strlen>:
    8f14:	2005883a 	mov	r2,r4
    8f18:	10c00007 	ldb	r3,0(r2)
    8f1c:	18000226 	beq	r3,zero,8f28 <strlen+0x14>
    8f20:	10800044 	addi	r2,r2,1
    8f24:	003ffc06 	br	8f18 <_gp+0xffff6374>
    8f28:	1105c83a 	sub	r2,r2,r4
    8f2c:	f800283a 	ret

00008f30 <_write_r>:
    8f30:	defffd04 	addi	sp,sp,-12
    8f34:	dc000015 	stw	r16,0(sp)
    8f38:	04000074 	movhi	r16,1
    8f3c:	dc400115 	stw	r17,4(sp)
    8f40:	842bac04 	addi	r16,r16,-20816
    8f44:	2023883a 	mov	r17,r4
    8f48:	2809883a 	mov	r4,r5
    8f4c:	300b883a 	mov	r5,r6
    8f50:	380d883a 	mov	r6,r7
    8f54:	dfc00215 	stw	ra,8(sp)
    8f58:	80000015 	stw	zero,0(r16)
    8f5c:	00091540 	call	9154 <write>
    8f60:	00ffffc4 	movi	r3,-1
    8f64:	10c0031e 	bne	r2,r3,8f74 <_write_r+0x44>
    8f68:	80c00017 	ldw	r3,0(r16)
    8f6c:	18000126 	beq	r3,zero,8f74 <_write_r+0x44>
    8f70:	88c00015 	stw	r3,0(r17)
    8f74:	dfc00217 	ldw	ra,8(sp)
    8f78:	dc400117 	ldw	r17,4(sp)
    8f7c:	dc000017 	ldw	r16,0(sp)
    8f80:	dec00304 	addi	sp,sp,12
    8f84:	f800283a 	ret

00008f88 <__mulsi3>:
    8f88:	0005883a 	mov	r2,zero
    8f8c:	20000726 	beq	r4,zero,8fac <__mulsi3+0x24>
    8f90:	20c0004c 	andi	r3,r4,1
    8f94:	2008d07a 	srli	r4,r4,1
    8f98:	18000126 	beq	r3,zero,8fa0 <__mulsi3+0x18>
    8f9c:	1145883a 	add	r2,r2,r5
    8fa0:	294b883a 	add	r5,r5,r5
    8fa4:	203ffa1e 	bne	r4,zero,8f90 <_gp+0xffff63ec>
    8fa8:	f800283a 	ret
    8fac:	f800283a 	ret

00008fb0 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    8fb0:	defffc04 	addi	sp,sp,-16
    8fb4:	df000315 	stw	fp,12(sp)
    8fb8:	df000304 	addi	fp,sp,12
    8fbc:	e13ffd15 	stw	r4,-12(fp)
    8fc0:	e17ffe15 	stw	r5,-8(fp)
    8fc4:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    8fc8:	e0fffe17 	ldw	r3,-8(fp)
    8fcc:	e0bffd17 	ldw	r2,-12(fp)
    8fd0:	18800c26 	beq	r3,r2,9004 <alt_load_section+0x54>
  {
    while( to != end )
    8fd4:	00000806 	br	8ff8 <alt_load_section+0x48>
    {
      *to++ = *from++;
    8fd8:	e0bffe17 	ldw	r2,-8(fp)
    8fdc:	10c00104 	addi	r3,r2,4
    8fe0:	e0fffe15 	stw	r3,-8(fp)
    8fe4:	e0fffd17 	ldw	r3,-12(fp)
    8fe8:	19000104 	addi	r4,r3,4
    8fec:	e13ffd15 	stw	r4,-12(fp)
    8ff0:	18c00017 	ldw	r3,0(r3)
    8ff4:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    8ff8:	e0fffe17 	ldw	r3,-8(fp)
    8ffc:	e0bfff17 	ldw	r2,-4(fp)
    9000:	18bff51e 	bne	r3,r2,8fd8 <_gp+0xffff6434>
    {
      *to++ = *from++;
    }
  }
}
    9004:	0001883a 	nop
    9008:	e037883a 	mov	sp,fp
    900c:	df000017 	ldw	fp,0(sp)
    9010:	dec00104 	addi	sp,sp,4
    9014:	f800283a 	ret

00009018 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    9018:	defffe04 	addi	sp,sp,-8
    901c:	dfc00115 	stw	ra,4(sp)
    9020:	df000015 	stw	fp,0(sp)
    9024:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    9028:	01800074 	movhi	r6,1
    902c:	31aaf404 	addi	r6,r6,-21552
    9030:	01400074 	movhi	r5,1
    9034:	296a3c04 	addi	r5,r5,-22288
    9038:	01000074 	movhi	r4,1
    903c:	212af404 	addi	r4,r4,-21552
    9040:	0008fb00 	call	8fb0 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    9044:	01800074 	movhi	r6,1
    9048:	31a08c04 	addi	r6,r6,-32208
    904c:	01400074 	movhi	r5,1
    9050:	29600804 	addi	r5,r5,-32736
    9054:	01000074 	movhi	r4,1
    9058:	21200804 	addi	r4,r4,-32736
    905c:	0008fb00 	call	8fb0 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    9060:	01800074 	movhi	r6,1
    9064:	31aa3c04 	addi	r6,r6,-22288
    9068:	01400074 	movhi	r5,1
    906c:	296a2a04 	addi	r5,r5,-22360
    9070:	01000074 	movhi	r4,1
    9074:	212a2a04 	addi	r4,r4,-22360
    9078:	0008fb00 	call	8fb0 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    907c:	00097540 	call	9754 <alt_dcache_flush_all>
  alt_icache_flush_all();
    9080:	00099400 	call	9940 <alt_icache_flush_all>
}
    9084:	0001883a 	nop
    9088:	e037883a 	mov	sp,fp
    908c:	dfc00117 	ldw	ra,4(sp)
    9090:	df000017 	ldw	fp,0(sp)
    9094:	dec00204 	addi	sp,sp,8
    9098:	f800283a 	ret

0000909c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    909c:	defffd04 	addi	sp,sp,-12
    90a0:	dfc00215 	stw	ra,8(sp)
    90a4:	df000115 	stw	fp,4(sp)
    90a8:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    90ac:	0009883a 	mov	r4,zero
    90b0:	00092880 	call	9288 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
    90b4:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    90b8:	00092c00 	call	92c0 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    90bc:	01800074 	movhi	r6,1
    90c0:	31aa2f04 	addi	r6,r6,-22340
    90c4:	01400074 	movhi	r5,1
    90c8:	296a2f04 	addi	r5,r5,-22340
    90cc:	01000074 	movhi	r4,1
    90d0:	212a2f04 	addi	r4,r4,-22340
    90d4:	0009ce40 	call	9ce4 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    90d8:	00098800 	call	9880 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    90dc:	01000074 	movhi	r4,1
    90e0:	21263804 	addi	r4,r4,-26400
    90e4:	000a5280 	call	a528 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    90e8:	d0a0c417 	ldw	r2,-31984(gp)
    90ec:	d0e0c517 	ldw	r3,-31980(gp)
    90f0:	d120c617 	ldw	r4,-31976(gp)
    90f4:	200d883a 	mov	r6,r4
    90f8:	180b883a 	mov	r5,r3
    90fc:	1009883a 	mov	r4,r2
    9100:	00083880 	call	8388 <main>
    9104:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    9108:	01000044 	movi	r4,1
    910c:	000967c0 	call	967c <close>
  exit (result);
    9110:	e13fff17 	ldw	r4,-4(fp)
    9114:	000a53c0 	call	a53c <exit>

00009118 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    9118:	defffe04 	addi	sp,sp,-8
    911c:	dfc00115 	stw	ra,4(sp)
    9120:	df000015 	stw	fp,0(sp)
    9124:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    9128:	d0a00717 	ldw	r2,-32740(gp)
    912c:	10000326 	beq	r2,zero,913c <alt_get_errno+0x24>
    9130:	d0a00717 	ldw	r2,-32740(gp)
    9134:	103ee83a 	callr	r2
    9138:	00000106 	br	9140 <alt_get_errno+0x28>
    913c:	d0a0c304 	addi	r2,gp,-31988
}
    9140:	e037883a 	mov	sp,fp
    9144:	dfc00117 	ldw	ra,4(sp)
    9148:	df000017 	ldw	fp,0(sp)
    914c:	dec00204 	addi	sp,sp,8
    9150:	f800283a 	ret

00009154 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    9154:	defff904 	addi	sp,sp,-28
    9158:	dfc00615 	stw	ra,24(sp)
    915c:	df000515 	stw	fp,20(sp)
    9160:	df000504 	addi	fp,sp,20
    9164:	e13ffd15 	stw	r4,-12(fp)
    9168:	e17ffe15 	stw	r5,-8(fp)
    916c:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    9170:	e0bffd17 	ldw	r2,-12(fp)
    9174:	10000816 	blt	r2,zero,9198 <write+0x44>
    9178:	01400304 	movi	r5,12
    917c:	e13ffd17 	ldw	r4,-12(fp)
    9180:	0008f880 	call	8f88 <__mulsi3>
    9184:	1007883a 	mov	r3,r2
    9188:	00800074 	movhi	r2,1
    918c:	10aa8904 	addi	r2,r2,-21980
    9190:	1885883a 	add	r2,r3,r2
    9194:	00000106 	br	919c <write+0x48>
    9198:	0005883a 	mov	r2,zero
    919c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    91a0:	e0bffb17 	ldw	r2,-20(fp)
    91a4:	10002126 	beq	r2,zero,922c <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    91a8:	e0bffb17 	ldw	r2,-20(fp)
    91ac:	10800217 	ldw	r2,8(r2)
    91b0:	108000cc 	andi	r2,r2,3
    91b4:	10001826 	beq	r2,zero,9218 <write+0xc4>
    91b8:	e0bffb17 	ldw	r2,-20(fp)
    91bc:	10800017 	ldw	r2,0(r2)
    91c0:	10800617 	ldw	r2,24(r2)
    91c4:	10001426 	beq	r2,zero,9218 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    91c8:	e0bffb17 	ldw	r2,-20(fp)
    91cc:	10800017 	ldw	r2,0(r2)
    91d0:	10800617 	ldw	r2,24(r2)
    91d4:	e0ffff17 	ldw	r3,-4(fp)
    91d8:	180d883a 	mov	r6,r3
    91dc:	e17ffe17 	ldw	r5,-8(fp)
    91e0:	e13ffb17 	ldw	r4,-20(fp)
    91e4:	103ee83a 	callr	r2
    91e8:	e0bffc15 	stw	r2,-16(fp)
    91ec:	e0bffc17 	ldw	r2,-16(fp)
    91f0:	1000070e 	bge	r2,zero,9210 <write+0xbc>
      {
        ALT_ERRNO = -rval;
    91f4:	00091180 	call	9118 <alt_get_errno>
    91f8:	1007883a 	mov	r3,r2
    91fc:	e0bffc17 	ldw	r2,-16(fp)
    9200:	0085c83a 	sub	r2,zero,r2
    9204:	18800015 	stw	r2,0(r3)
        return -1;
    9208:	00bfffc4 	movi	r2,-1
    920c:	00000c06 	br	9240 <write+0xec>
      }
      return rval;
    9210:	e0bffc17 	ldw	r2,-16(fp)
    9214:	00000a06 	br	9240 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
    9218:	00091180 	call	9118 <alt_get_errno>
    921c:	1007883a 	mov	r3,r2
    9220:	00800344 	movi	r2,13
    9224:	18800015 	stw	r2,0(r3)
    9228:	00000406 	br	923c <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    922c:	00091180 	call	9118 <alt_get_errno>
    9230:	1007883a 	mov	r3,r2
    9234:	00801444 	movi	r2,81
    9238:	18800015 	stw	r2,0(r3)
  }
  return -1;
    923c:	00bfffc4 	movi	r2,-1
}
    9240:	e037883a 	mov	sp,fp
    9244:	dfc00117 	ldw	ra,4(sp)
    9248:	df000017 	ldw	fp,0(sp)
    924c:	dec00204 	addi	sp,sp,8
    9250:	f800283a 	ret

00009254 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    9254:	defffd04 	addi	sp,sp,-12
    9258:	dfc00215 	stw	ra,8(sp)
    925c:	df000115 	stw	fp,4(sp)
    9260:	df000104 	addi	fp,sp,4
    9264:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    9268:	d1600404 	addi	r5,gp,-32752
    926c:	e13fff17 	ldw	r4,-4(fp)
    9270:	00097dc0 	call	97dc <alt_dev_llist_insert>
}
    9274:	e037883a 	mov	sp,fp
    9278:	dfc00117 	ldw	ra,4(sp)
    927c:	df000017 	ldw	fp,0(sp)
    9280:	dec00204 	addi	sp,sp,8
    9284:	f800283a 	ret

00009288 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    9288:	defffd04 	addi	sp,sp,-12
    928c:	dfc00215 	stw	ra,8(sp)
    9290:	df000115 	stw	fp,4(sp)
    9294:	df000104 	addi	fp,sp,4
    9298:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
    929c:	000a20c0 	call	a20c <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    92a0:	00800044 	movi	r2,1
    92a4:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    92a8:	0001883a 	nop
    92ac:	e037883a 	mov	sp,fp
    92b0:	dfc00117 	ldw	ra,4(sp)
    92b4:	df000017 	ldw	fp,0(sp)
    92b8:	dec00204 	addi	sp,sp,8
    92bc:	f800283a 	ret

000092c0 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    92c0:	defffe04 	addi	sp,sp,-8
    92c4:	dfc00115 	stw	ra,4(sp)
    92c8:	df000015 	stw	fp,0(sp)
    92cc:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( SYS_TIMER, sys_timer);
    92d0:	01c0fa04 	movi	r7,1000
    92d4:	000d883a 	mov	r6,zero
    92d8:	000b883a 	mov	r5,zero
    92dc:	01000074 	movhi	r4,1
    92e0:	21040004 	addi	r4,r4,4096
    92e4:	00095c40 	call	95c4 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
    92e8:	01000074 	movhi	r4,1
    92ec:	212a7404 	addi	r4,r4,-22064
    92f0:	00092540 	call	9254 <alt_dev_reg>
}
    92f4:	0001883a 	nop
    92f8:	e037883a 	mov	sp,fp
    92fc:	dfc00117 	ldw	ra,4(sp)
    9300:	df000017 	ldw	fp,0(sp)
    9304:	dec00204 	addi	sp,sp,8
    9308:	f800283a 	ret

0000930c <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    930c:	defffa04 	addi	sp,sp,-24
    9310:	dfc00515 	stw	ra,20(sp)
    9314:	df000415 	stw	fp,16(sp)
    9318:	df000404 	addi	fp,sp,16
    931c:	e13ffd15 	stw	r4,-12(fp)
    9320:	e17ffe15 	stw	r5,-8(fp)
    9324:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    9328:	e0bffd17 	ldw	r2,-12(fp)
    932c:	10800017 	ldw	r2,0(r2)
    9330:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    9334:	e0bffc17 	ldw	r2,-16(fp)
    9338:	10c00a04 	addi	r3,r2,40
    933c:	e0bffd17 	ldw	r2,-12(fp)
    9340:	10800217 	ldw	r2,8(r2)
    9344:	100f883a 	mov	r7,r2
    9348:	e1bfff17 	ldw	r6,-4(fp)
    934c:	e17ffe17 	ldw	r5,-8(fp)
    9350:	1809883a 	mov	r4,r3
    9354:	00093cc0 	call	93cc <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    9358:	e037883a 	mov	sp,fp
    935c:	dfc00117 	ldw	ra,4(sp)
    9360:	df000017 	ldw	fp,0(sp)
    9364:	dec00204 	addi	sp,sp,8
    9368:	f800283a 	ret

0000936c <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    936c:	defffa04 	addi	sp,sp,-24
    9370:	dfc00515 	stw	ra,20(sp)
    9374:	df000415 	stw	fp,16(sp)
    9378:	df000404 	addi	fp,sp,16
    937c:	e13ffd15 	stw	r4,-12(fp)
    9380:	e17ffe15 	stw	r5,-8(fp)
    9384:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    9388:	e0bffd17 	ldw	r2,-12(fp)
    938c:	10800017 	ldw	r2,0(r2)
    9390:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    9394:	e0bffc17 	ldw	r2,-16(fp)
    9398:	10c00a04 	addi	r3,r2,40
    939c:	e0bffd17 	ldw	r2,-12(fp)
    93a0:	10800217 	ldw	r2,8(r2)
    93a4:	100f883a 	mov	r7,r2
    93a8:	e1bfff17 	ldw	r6,-4(fp)
    93ac:	e17ffe17 	ldw	r5,-8(fp)
    93b0:	1809883a 	mov	r4,r3
    93b4:	00094b80 	call	94b8 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    93b8:	e037883a 	mov	sp,fp
    93bc:	dfc00117 	ldw	ra,4(sp)
    93c0:	df000017 	ldw	fp,0(sp)
    93c4:	dec00204 	addi	sp,sp,8
    93c8:	f800283a 	ret

000093cc <altera_avalon_jtag_uart_read>:
 */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
    93cc:	defff704 	addi	sp,sp,-36
    93d0:	df000815 	stw	fp,32(sp)
    93d4:	df000804 	addi	fp,sp,32
    93d8:	e13ffc15 	stw	r4,-16(fp)
    93dc:	e17ffd15 	stw	r5,-12(fp)
    93e0:	e1bffe15 	stw	r6,-8(fp)
    93e4:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
    93e8:	e0bffc17 	ldw	r2,-16(fp)
    93ec:	10800017 	ldw	r2,0(r2)
    93f0:	e0bff915 	stw	r2,-28(fp)

  char * ptr = buffer;
    93f4:	e0bffd17 	ldw	r2,-12(fp)
    93f8:	e0bff815 	stw	r2,-32(fp)
  char * end = buffer + space;
    93fc:	e0bffe17 	ldw	r2,-8(fp)
    9400:	e0fffd17 	ldw	r3,-12(fp)
    9404:	1885883a 	add	r2,r3,r2
    9408:	e0bffa15 	stw	r2,-24(fp)

  while (ptr < end)
    940c:	00001206 	br	9458 <altera_avalon_jtag_uart_read+0x8c>
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    9410:	e0bff917 	ldw	r2,-28(fp)
    9414:	10800037 	ldwio	r2,0(r2)
    9418:	e0bffb15 	stw	r2,-20(fp)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
    941c:	e0bffb17 	ldw	r2,-20(fp)
    9420:	10a0000c 	andi	r2,r2,32768
    9424:	10000626 	beq	r2,zero,9440 <altera_avalon_jtag_uart_read+0x74>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    9428:	e0bff817 	ldw	r2,-32(fp)
    942c:	10c00044 	addi	r3,r2,1
    9430:	e0fff815 	stw	r3,-32(fp)
    9434:	e0fffb17 	ldw	r3,-20(fp)
    9438:	10c00005 	stb	r3,0(r2)
    943c:	00000606 	br	9458 <altera_avalon_jtag_uart_read+0x8c>
    else if (ptr != buffer)
    9440:	e0fff817 	ldw	r3,-32(fp)
    9444:	e0bffd17 	ldw	r2,-12(fp)
    9448:	1880071e 	bne	r3,r2,9468 <altera_avalon_jtag_uart_read+0x9c>
      break;
    else if(flags & O_NONBLOCK)
    944c:	e0bfff17 	ldw	r2,-4(fp)
    9450:	1090000c 	andi	r2,r2,16384
    9454:	1000061e 	bne	r2,zero,9470 <altera_avalon_jtag_uart_read+0xa4>
  unsigned int base = sp->base;

  char * ptr = buffer;
  char * end = buffer + space;

  while (ptr < end)
    9458:	e0fff817 	ldw	r3,-32(fp)
    945c:	e0bffa17 	ldw	r2,-24(fp)
    9460:	18bfeb36 	bltu	r3,r2,9410 <_gp+0xffff686c>
    9464:	00000306 	br	9474 <altera_avalon_jtag_uart_read+0xa8>
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    else if (ptr != buffer)
      break;
    9468:	0001883a 	nop
    946c:	00000106 	br	9474 <altera_avalon_jtag_uart_read+0xa8>
    else if(flags & O_NONBLOCK)
      break;   
    9470:	0001883a 	nop
    
  }

  if (ptr != buffer)
    9474:	e0fff817 	ldw	r3,-32(fp)
    9478:	e0bffd17 	ldw	r2,-12(fp)
    947c:	18800426 	beq	r3,r2,9490 <altera_avalon_jtag_uart_read+0xc4>
    return ptr - buffer;
    9480:	e0fff817 	ldw	r3,-32(fp)
    9484:	e0bffd17 	ldw	r2,-12(fp)
    9488:	1885c83a 	sub	r2,r3,r2
    948c:	00000606 	br	94a8 <altera_avalon_jtag_uart_read+0xdc>
  else if (flags & O_NONBLOCK)
    9490:	e0bfff17 	ldw	r2,-4(fp)
    9494:	1090000c 	andi	r2,r2,16384
    9498:	10000226 	beq	r2,zero,94a4 <altera_avalon_jtag_uart_read+0xd8>
    return -EWOULDBLOCK;
    949c:	00bffd44 	movi	r2,-11
    94a0:	00000106 	br	94a8 <altera_avalon_jtag_uart_read+0xdc>
  else
    return -EIO;
    94a4:	00bffec4 	movi	r2,-5
}
    94a8:	e037883a 	mov	sp,fp
    94ac:	df000017 	ldw	fp,0(sp)
    94b0:	dec00104 	addi	sp,sp,4
    94b4:	f800283a 	ret

000094b8 <altera_avalon_jtag_uart_write>:
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    94b8:	defff904 	addi	sp,sp,-28
    94bc:	df000615 	stw	fp,24(sp)
    94c0:	df000604 	addi	fp,sp,24
    94c4:	e13ffc15 	stw	r4,-16(fp)
    94c8:	e17ffd15 	stw	r5,-12(fp)
    94cc:	e1bffe15 	stw	r6,-8(fp)
    94d0:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
    94d4:	e0bffc17 	ldw	r2,-16(fp)
    94d8:	10800017 	ldw	r2,0(r2)
    94dc:	e0bffa15 	stw	r2,-24(fp)

  const char * end = ptr + count;
    94e0:	e0bffe17 	ldw	r2,-8(fp)
    94e4:	e0fffd17 	ldw	r3,-12(fp)
    94e8:	1885883a 	add	r2,r3,r2
    94ec:	e0bffb15 	stw	r2,-20(fp)

  while (ptr < end)
    94f0:	00000e06 	br	952c <altera_avalon_jtag_uart_write+0x74>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    94f4:	e0bffa17 	ldw	r2,-24(fp)
    94f8:	10800104 	addi	r2,r2,4
    94fc:	10800037 	ldwio	r2,0(r2)
    9500:	10bfffec 	andhi	r2,r2,65535
    9504:	10000926 	beq	r2,zero,952c <altera_avalon_jtag_uart_write+0x74>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
    9508:	e0fffa17 	ldw	r3,-24(fp)
    950c:	e0bffd17 	ldw	r2,-12(fp)
    9510:	11000044 	addi	r4,r2,1
    9514:	e13ffd15 	stw	r4,-12(fp)
    9518:	10800003 	ldbu	r2,0(r2)
    951c:	10803fcc 	andi	r2,r2,255
    9520:	1080201c 	xori	r2,r2,128
    9524:	10bfe004 	addi	r2,r2,-128
    9528:	18800035 	stwio	r2,0(r3)
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
    952c:	e0fffd17 	ldw	r3,-12(fp)
    9530:	e0bffb17 	ldw	r2,-20(fp)
    9534:	18bfef36 	bltu	r3,r2,94f4 <_gp+0xffff6950>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
    9538:	e0bffe17 	ldw	r2,-8(fp)
}
    953c:	e037883a 	mov	sp,fp
    9540:	df000017 	ldw	fp,0(sp)
    9544:	dec00104 	addi	sp,sp,4
    9548:	f800283a 	ret

0000954c <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
    954c:	defffa04 	addi	sp,sp,-24
    9550:	dfc00515 	stw	ra,20(sp)
    9554:	df000415 	stw	fp,16(sp)
    9558:	df000404 	addi	fp,sp,16
    955c:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
    9560:	0007883a 	mov	r3,zero
    9564:	e0bfff17 	ldw	r2,-4(fp)
    9568:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
    956c:	e0bfff17 	ldw	r2,-4(fp)
    9570:	10800104 	addi	r2,r2,4
    9574:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    9578:	0005303a 	rdctl	r2,status
    957c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    9580:	e0fffd17 	ldw	r3,-12(fp)
    9584:	00bfff84 	movi	r2,-2
    9588:	1884703a 	and	r2,r3,r2
    958c:	1001703a 	wrctl	status,r2
  
  return context;
    9590:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
    9594:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
    9598:	000a1040 	call	a104 <alt_tick>
    959c:	e0bffc17 	ldw	r2,-16(fp)
    95a0:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    95a4:	e0bffe17 	ldw	r2,-8(fp)
    95a8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
    95ac:	0001883a 	nop
    95b0:	e037883a 	mov	sp,fp
    95b4:	dfc00117 	ldw	ra,4(sp)
    95b8:	df000017 	ldw	fp,0(sp)
    95bc:	dec00204 	addi	sp,sp,8
    95c0:	f800283a 	ret

000095c4 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
    95c4:	defff804 	addi	sp,sp,-32
    95c8:	dfc00715 	stw	ra,28(sp)
    95cc:	df000615 	stw	fp,24(sp)
    95d0:	df000604 	addi	fp,sp,24
    95d4:	e13ffc15 	stw	r4,-16(fp)
    95d8:	e17ffd15 	stw	r5,-12(fp)
    95dc:	e1bffe15 	stw	r6,-8(fp)
    95e0:	e1ffff15 	stw	r7,-4(fp)
    95e4:	e0bfff17 	ldw	r2,-4(fp)
    95e8:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
    95ec:	d0a0c817 	ldw	r2,-31968(gp)
    95f0:	1000021e 	bne	r2,zero,95fc <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
    95f4:	e0bffb17 	ldw	r2,-20(fp)
    95f8:	d0a0c815 	stw	r2,-31968(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
    95fc:	e0bffc17 	ldw	r2,-16(fp)
    9600:	10800104 	addi	r2,r2,4
    9604:	00c001c4 	movi	r3,7
    9608:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
    960c:	d8000015 	stw	zero,0(sp)
    9610:	e1fffc17 	ldw	r7,-16(fp)
    9614:	01800074 	movhi	r6,1
    9618:	31a55304 	addi	r6,r6,-27316
    961c:	e17ffe17 	ldw	r5,-8(fp)
    9620:	e13ffd17 	ldw	r4,-12(fp)
    9624:	00099600 	call	9960 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
    9628:	0001883a 	nop
    962c:	e037883a 	mov	sp,fp
    9630:	dfc00117 	ldw	ra,4(sp)
    9634:	df000017 	ldw	fp,0(sp)
    9638:	dec00204 	addi	sp,sp,8
    963c:	f800283a 	ret

00009640 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    9640:	defffe04 	addi	sp,sp,-8
    9644:	dfc00115 	stw	ra,4(sp)
    9648:	df000015 	stw	fp,0(sp)
    964c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    9650:	d0a00717 	ldw	r2,-32740(gp)
    9654:	10000326 	beq	r2,zero,9664 <alt_get_errno+0x24>
    9658:	d0a00717 	ldw	r2,-32740(gp)
    965c:	103ee83a 	callr	r2
    9660:	00000106 	br	9668 <alt_get_errno+0x28>
    9664:	d0a0c304 	addi	r2,gp,-31988
}
    9668:	e037883a 	mov	sp,fp
    966c:	dfc00117 	ldw	ra,4(sp)
    9670:	df000017 	ldw	fp,0(sp)
    9674:	dec00204 	addi	sp,sp,8
    9678:	f800283a 	ret

0000967c <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    967c:	defffb04 	addi	sp,sp,-20
    9680:	dfc00415 	stw	ra,16(sp)
    9684:	df000315 	stw	fp,12(sp)
    9688:	df000304 	addi	fp,sp,12
    968c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    9690:	e0bfff17 	ldw	r2,-4(fp)
    9694:	10000816 	blt	r2,zero,96b8 <close+0x3c>
    9698:	01400304 	movi	r5,12
    969c:	e13fff17 	ldw	r4,-4(fp)
    96a0:	0008f880 	call	8f88 <__mulsi3>
    96a4:	1007883a 	mov	r3,r2
    96a8:	00800074 	movhi	r2,1
    96ac:	10aa8904 	addi	r2,r2,-21980
    96b0:	1885883a 	add	r2,r3,r2
    96b4:	00000106 	br	96bc <close+0x40>
    96b8:	0005883a 	mov	r2,zero
    96bc:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
    96c0:	e0bffd17 	ldw	r2,-12(fp)
    96c4:	10001926 	beq	r2,zero,972c <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    96c8:	e0bffd17 	ldw	r2,-12(fp)
    96cc:	10800017 	ldw	r2,0(r2)
    96d0:	10800417 	ldw	r2,16(r2)
    96d4:	10000626 	beq	r2,zero,96f0 <close+0x74>
    96d8:	e0bffd17 	ldw	r2,-12(fp)
    96dc:	10800017 	ldw	r2,0(r2)
    96e0:	10800417 	ldw	r2,16(r2)
    96e4:	e13ffd17 	ldw	r4,-12(fp)
    96e8:	103ee83a 	callr	r2
    96ec:	00000106 	br	96f4 <close+0x78>
    96f0:	0005883a 	mov	r2,zero
    96f4:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    96f8:	e13fff17 	ldw	r4,-4(fp)
    96fc:	0009fe40 	call	9fe4 <alt_release_fd>
    if (rval < 0)
    9700:	e0bffe17 	ldw	r2,-8(fp)
    9704:	1000070e 	bge	r2,zero,9724 <close+0xa8>
    {
      ALT_ERRNO = -rval;
    9708:	00096400 	call	9640 <alt_get_errno>
    970c:	1007883a 	mov	r3,r2
    9710:	e0bffe17 	ldw	r2,-8(fp)
    9714:	0085c83a 	sub	r2,zero,r2
    9718:	18800015 	stw	r2,0(r3)
      return -1;
    971c:	00bfffc4 	movi	r2,-1
    9720:	00000706 	br	9740 <close+0xc4>
    }
    return 0;
    9724:	0005883a 	mov	r2,zero
    9728:	00000506 	br	9740 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    972c:	00096400 	call	9640 <alt_get_errno>
    9730:	1007883a 	mov	r3,r2
    9734:	00801444 	movi	r2,81
    9738:	18800015 	stw	r2,0(r3)
    return -1;
    973c:	00bfffc4 	movi	r2,-1
  }
}
    9740:	e037883a 	mov	sp,fp
    9744:	dfc00117 	ldw	ra,4(sp)
    9748:	df000017 	ldw	fp,0(sp)
    974c:	dec00204 	addi	sp,sp,8
    9750:	f800283a 	ret

00009754 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    9754:	deffff04 	addi	sp,sp,-4
    9758:	df000015 	stw	fp,0(sp)
    975c:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    9760:	0001883a 	nop
    9764:	e037883a 	mov	sp,fp
    9768:	df000017 	ldw	fp,0(sp)
    976c:	dec00104 	addi	sp,sp,4
    9770:	f800283a 	ret

00009774 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    9774:	defffc04 	addi	sp,sp,-16
    9778:	df000315 	stw	fp,12(sp)
    977c:	df000304 	addi	fp,sp,12
    9780:	e13ffd15 	stw	r4,-12(fp)
    9784:	e17ffe15 	stw	r5,-8(fp)
    9788:	e1bfff15 	stw	r6,-4(fp)
  return len;
    978c:	e0bfff17 	ldw	r2,-4(fp)
}
    9790:	e037883a 	mov	sp,fp
    9794:	df000017 	ldw	fp,0(sp)
    9798:	dec00104 	addi	sp,sp,4
    979c:	f800283a 	ret

000097a0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    97a0:	defffe04 	addi	sp,sp,-8
    97a4:	dfc00115 	stw	ra,4(sp)
    97a8:	df000015 	stw	fp,0(sp)
    97ac:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    97b0:	d0a00717 	ldw	r2,-32740(gp)
    97b4:	10000326 	beq	r2,zero,97c4 <alt_get_errno+0x24>
    97b8:	d0a00717 	ldw	r2,-32740(gp)
    97bc:	103ee83a 	callr	r2
    97c0:	00000106 	br	97c8 <alt_get_errno+0x28>
    97c4:	d0a0c304 	addi	r2,gp,-31988
}
    97c8:	e037883a 	mov	sp,fp
    97cc:	dfc00117 	ldw	ra,4(sp)
    97d0:	df000017 	ldw	fp,0(sp)
    97d4:	dec00204 	addi	sp,sp,8
    97d8:	f800283a 	ret

000097dc <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    97dc:	defffa04 	addi	sp,sp,-24
    97e0:	dfc00515 	stw	ra,20(sp)
    97e4:	df000415 	stw	fp,16(sp)
    97e8:	df000404 	addi	fp,sp,16
    97ec:	e13ffe15 	stw	r4,-8(fp)
    97f0:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    97f4:	e0bffe17 	ldw	r2,-8(fp)
    97f8:	10000326 	beq	r2,zero,9808 <alt_dev_llist_insert+0x2c>
    97fc:	e0bffe17 	ldw	r2,-8(fp)
    9800:	10800217 	ldw	r2,8(r2)
    9804:	1000061e 	bne	r2,zero,9820 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
    9808:	00097a00 	call	97a0 <alt_get_errno>
    980c:	1007883a 	mov	r3,r2
    9810:	00800584 	movi	r2,22
    9814:	18800015 	stw	r2,0(r3)
    return -EINVAL;
    9818:	00bffa84 	movi	r2,-22
    981c:	00001306 	br	986c <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
    9820:	e0bffe17 	ldw	r2,-8(fp)
    9824:	e0ffff17 	ldw	r3,-4(fp)
    9828:	e0fffc15 	stw	r3,-16(fp)
    982c:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    9830:	e0bffd17 	ldw	r2,-12(fp)
    9834:	e0fffc17 	ldw	r3,-16(fp)
    9838:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    983c:	e0bffc17 	ldw	r2,-16(fp)
    9840:	10c00017 	ldw	r3,0(r2)
    9844:	e0bffd17 	ldw	r2,-12(fp)
    9848:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    984c:	e0bffc17 	ldw	r2,-16(fp)
    9850:	10800017 	ldw	r2,0(r2)
    9854:	e0fffd17 	ldw	r3,-12(fp)
    9858:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    985c:	e0bffc17 	ldw	r2,-16(fp)
    9860:	e0fffd17 	ldw	r3,-12(fp)
    9864:	10c00015 	stw	r3,0(r2)

  return 0;  
    9868:	0005883a 	mov	r2,zero
}
    986c:	e037883a 	mov	sp,fp
    9870:	dfc00117 	ldw	ra,4(sp)
    9874:	df000017 	ldw	fp,0(sp)
    9878:	dec00204 	addi	sp,sp,8
    987c:	f800283a 	ret

00009880 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
    9880:	defffd04 	addi	sp,sp,-12
    9884:	dfc00215 	stw	ra,8(sp)
    9888:	df000115 	stw	fp,4(sp)
    988c:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    9890:	00800074 	movhi	r2,1
    9894:	10aa2904 	addi	r2,r2,-22364
    9898:	e0bfff15 	stw	r2,-4(fp)
    989c:	00000606 	br	98b8 <_do_ctors+0x38>
        (*ctor) (); 
    98a0:	e0bfff17 	ldw	r2,-4(fp)
    98a4:	10800017 	ldw	r2,0(r2)
    98a8:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    98ac:	e0bfff17 	ldw	r2,-4(fp)
    98b0:	10bfff04 	addi	r2,r2,-4
    98b4:	e0bfff15 	stw	r2,-4(fp)
    98b8:	e0ffff17 	ldw	r3,-4(fp)
    98bc:	00800074 	movhi	r2,1
    98c0:	10aa2a04 	addi	r2,r2,-22360
    98c4:	18bff62e 	bgeu	r3,r2,98a0 <_gp+0xffff6cfc>
        (*ctor) (); 
}
    98c8:	0001883a 	nop
    98cc:	e037883a 	mov	sp,fp
    98d0:	dfc00117 	ldw	ra,4(sp)
    98d4:	df000017 	ldw	fp,0(sp)
    98d8:	dec00204 	addi	sp,sp,8
    98dc:	f800283a 	ret

000098e0 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
    98e0:	defffd04 	addi	sp,sp,-12
    98e4:	dfc00215 	stw	ra,8(sp)
    98e8:	df000115 	stw	fp,4(sp)
    98ec:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    98f0:	00800074 	movhi	r2,1
    98f4:	10aa2904 	addi	r2,r2,-22364
    98f8:	e0bfff15 	stw	r2,-4(fp)
    98fc:	00000606 	br	9918 <_do_dtors+0x38>
        (*dtor) (); 
    9900:	e0bfff17 	ldw	r2,-4(fp)
    9904:	10800017 	ldw	r2,0(r2)
    9908:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    990c:	e0bfff17 	ldw	r2,-4(fp)
    9910:	10bfff04 	addi	r2,r2,-4
    9914:	e0bfff15 	stw	r2,-4(fp)
    9918:	e0ffff17 	ldw	r3,-4(fp)
    991c:	00800074 	movhi	r2,1
    9920:	10aa2a04 	addi	r2,r2,-22360
    9924:	18bff62e 	bgeu	r3,r2,9900 <_gp+0xffff6d5c>
        (*dtor) (); 
}
    9928:	0001883a 	nop
    992c:	e037883a 	mov	sp,fp
    9930:	dfc00117 	ldw	ra,4(sp)
    9934:	df000017 	ldw	fp,0(sp)
    9938:	dec00204 	addi	sp,sp,8
    993c:	f800283a 	ret

00009940 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    9940:	deffff04 	addi	sp,sp,-4
    9944:	df000015 	stw	fp,0(sp)
    9948:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
    994c:	0001883a 	nop
    9950:	e037883a 	mov	sp,fp
    9954:	df000017 	ldw	fp,0(sp)
    9958:	dec00104 	addi	sp,sp,4
    995c:	f800283a 	ret

00009960 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    9960:	defff904 	addi	sp,sp,-28
    9964:	dfc00615 	stw	ra,24(sp)
    9968:	df000515 	stw	fp,20(sp)
    996c:	df000504 	addi	fp,sp,20
    9970:	e13ffc15 	stw	r4,-16(fp)
    9974:	e17ffd15 	stw	r5,-12(fp)
    9978:	e1bffe15 	stw	r6,-8(fp)
    997c:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
    9980:	e0800217 	ldw	r2,8(fp)
    9984:	d8800015 	stw	r2,0(sp)
    9988:	e1ffff17 	ldw	r7,-4(fp)
    998c:	e1bffe17 	ldw	r6,-8(fp)
    9990:	e17ffd17 	ldw	r5,-12(fp)
    9994:	e13ffc17 	ldw	r4,-16(fp)
    9998:	0009b100 	call	9b10 <alt_iic_isr_register>
}  
    999c:	e037883a 	mov	sp,fp
    99a0:	dfc00117 	ldw	ra,4(sp)
    99a4:	df000017 	ldw	fp,0(sp)
    99a8:	dec00204 	addi	sp,sp,8
    99ac:	f800283a 	ret

000099b0 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    99b0:	defff904 	addi	sp,sp,-28
    99b4:	df000615 	stw	fp,24(sp)
    99b8:	df000604 	addi	fp,sp,24
    99bc:	e13ffe15 	stw	r4,-8(fp)
    99c0:	e17fff15 	stw	r5,-4(fp)
    99c4:	e0bfff17 	ldw	r2,-4(fp)
    99c8:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    99cc:	0005303a 	rdctl	r2,status
    99d0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    99d4:	e0fffb17 	ldw	r3,-20(fp)
    99d8:	00bfff84 	movi	r2,-2
    99dc:	1884703a 	and	r2,r3,r2
    99e0:	1001703a 	wrctl	status,r2
  
  return context;
    99e4:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    99e8:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
    99ec:	00c00044 	movi	r3,1
    99f0:	e0bffa17 	ldw	r2,-24(fp)
    99f4:	1884983a 	sll	r2,r3,r2
    99f8:	1007883a 	mov	r3,r2
    99fc:	d0a0c717 	ldw	r2,-31972(gp)
    9a00:	1884b03a 	or	r2,r3,r2
    9a04:	d0a0c715 	stw	r2,-31972(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    9a08:	d0a0c717 	ldw	r2,-31972(gp)
    9a0c:	100170fa 	wrctl	ienable,r2
    9a10:	e0bffc17 	ldw	r2,-16(fp)
    9a14:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    9a18:	e0bffd17 	ldw	r2,-12(fp)
    9a1c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    9a20:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
    9a24:	0001883a 	nop
}
    9a28:	e037883a 	mov	sp,fp
    9a2c:	df000017 	ldw	fp,0(sp)
    9a30:	dec00104 	addi	sp,sp,4
    9a34:	f800283a 	ret

00009a38 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    9a38:	defff904 	addi	sp,sp,-28
    9a3c:	df000615 	stw	fp,24(sp)
    9a40:	df000604 	addi	fp,sp,24
    9a44:	e13ffe15 	stw	r4,-8(fp)
    9a48:	e17fff15 	stw	r5,-4(fp)
    9a4c:	e0bfff17 	ldw	r2,-4(fp)
    9a50:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    9a54:	0005303a 	rdctl	r2,status
    9a58:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    9a5c:	e0fffb17 	ldw	r3,-20(fp)
    9a60:	00bfff84 	movi	r2,-2
    9a64:	1884703a 	and	r2,r3,r2
    9a68:	1001703a 	wrctl	status,r2
  
  return context;
    9a6c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    9a70:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
    9a74:	00c00044 	movi	r3,1
    9a78:	e0bffa17 	ldw	r2,-24(fp)
    9a7c:	1884983a 	sll	r2,r3,r2
    9a80:	0084303a 	nor	r2,zero,r2
    9a84:	1007883a 	mov	r3,r2
    9a88:	d0a0c717 	ldw	r2,-31972(gp)
    9a8c:	1884703a 	and	r2,r3,r2
    9a90:	d0a0c715 	stw	r2,-31972(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    9a94:	d0a0c717 	ldw	r2,-31972(gp)
    9a98:	100170fa 	wrctl	ienable,r2
    9a9c:	e0bffc17 	ldw	r2,-16(fp)
    9aa0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    9aa4:	e0bffd17 	ldw	r2,-12(fp)
    9aa8:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    9aac:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
    9ab0:	0001883a 	nop
}
    9ab4:	e037883a 	mov	sp,fp
    9ab8:	df000017 	ldw	fp,0(sp)
    9abc:	dec00104 	addi	sp,sp,4
    9ac0:	f800283a 	ret

00009ac4 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    9ac4:	defffc04 	addi	sp,sp,-16
    9ac8:	df000315 	stw	fp,12(sp)
    9acc:	df000304 	addi	fp,sp,12
    9ad0:	e13ffe15 	stw	r4,-8(fp)
    9ad4:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
    9ad8:	000530fa 	rdctl	r2,ienable
    9adc:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
    9ae0:	00c00044 	movi	r3,1
    9ae4:	e0bfff17 	ldw	r2,-4(fp)
    9ae8:	1884983a 	sll	r2,r3,r2
    9aec:	1007883a 	mov	r3,r2
    9af0:	e0bffd17 	ldw	r2,-12(fp)
    9af4:	1884703a 	and	r2,r3,r2
    9af8:	1004c03a 	cmpne	r2,r2,zero
    9afc:	10803fcc 	andi	r2,r2,255
}
    9b00:	e037883a 	mov	sp,fp
    9b04:	df000017 	ldw	fp,0(sp)
    9b08:	dec00104 	addi	sp,sp,4
    9b0c:	f800283a 	ret

00009b10 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    9b10:	defff504 	addi	sp,sp,-44
    9b14:	dfc00a15 	stw	ra,40(sp)
    9b18:	df000915 	stw	fp,36(sp)
    9b1c:	df000904 	addi	fp,sp,36
    9b20:	e13ffc15 	stw	r4,-16(fp)
    9b24:	e17ffd15 	stw	r5,-12(fp)
    9b28:	e1bffe15 	stw	r6,-8(fp)
    9b2c:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
    9b30:	00bffa84 	movi	r2,-22
    9b34:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
    9b38:	e0bffd17 	ldw	r2,-12(fp)
    9b3c:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
    9b40:	e0bff817 	ldw	r2,-32(fp)
    9b44:	10800808 	cmpgei	r2,r2,32
    9b48:	1000271e 	bne	r2,zero,9be8 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    9b4c:	0005303a 	rdctl	r2,status
    9b50:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    9b54:	e0fffb17 	ldw	r3,-20(fp)
    9b58:	00bfff84 	movi	r2,-2
    9b5c:	1884703a 	and	r2,r3,r2
    9b60:	1001703a 	wrctl	status,r2
  
  return context;
    9b64:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
    9b68:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
    9b6c:	00800074 	movhi	r2,1
    9b70:	10abb404 	addi	r2,r2,-20784
    9b74:	e0fff817 	ldw	r3,-32(fp)
    9b78:	180690fa 	slli	r3,r3,3
    9b7c:	10c5883a 	add	r2,r2,r3
    9b80:	e0fffe17 	ldw	r3,-8(fp)
    9b84:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
    9b88:	00800074 	movhi	r2,1
    9b8c:	10abb404 	addi	r2,r2,-20784
    9b90:	e0fff817 	ldw	r3,-32(fp)
    9b94:	180690fa 	slli	r3,r3,3
    9b98:	10c5883a 	add	r2,r2,r3
    9b9c:	10800104 	addi	r2,r2,4
    9ba0:	e0ffff17 	ldw	r3,-4(fp)
    9ba4:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
    9ba8:	e0bffe17 	ldw	r2,-8(fp)
    9bac:	10000526 	beq	r2,zero,9bc4 <alt_iic_isr_register+0xb4>
    9bb0:	e0bff817 	ldw	r2,-32(fp)
    9bb4:	100b883a 	mov	r5,r2
    9bb8:	e13ffc17 	ldw	r4,-16(fp)
    9bbc:	00099b00 	call	99b0 <alt_ic_irq_enable>
    9bc0:	00000406 	br	9bd4 <alt_iic_isr_register+0xc4>
    9bc4:	e0bff817 	ldw	r2,-32(fp)
    9bc8:	100b883a 	mov	r5,r2
    9bcc:	e13ffc17 	ldw	r4,-16(fp)
    9bd0:	0009a380 	call	9a38 <alt_ic_irq_disable>
    9bd4:	e0bff715 	stw	r2,-36(fp)
    9bd8:	e0bffa17 	ldw	r2,-24(fp)
    9bdc:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    9be0:	e0bff917 	ldw	r2,-28(fp)
    9be4:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
    9be8:	e0bff717 	ldw	r2,-36(fp)
}
    9bec:	e037883a 	mov	sp,fp
    9bf0:	dfc00117 	ldw	ra,4(sp)
    9bf4:	df000017 	ldw	fp,0(sp)
    9bf8:	dec00204 	addi	sp,sp,8
    9bfc:	f800283a 	ret

00009c00 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    9c00:	defff804 	addi	sp,sp,-32
    9c04:	dfc00715 	stw	ra,28(sp)
    9c08:	df000615 	stw	fp,24(sp)
    9c0c:	dc000515 	stw	r16,20(sp)
    9c10:	df000604 	addi	fp,sp,24
    9c14:	e13ffb15 	stw	r4,-20(fp)
    9c18:	e17ffc15 	stw	r5,-16(fp)
    9c1c:	e1bffd15 	stw	r6,-12(fp)
    9c20:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
    9c24:	e1bffe17 	ldw	r6,-8(fp)
    9c28:	e17ffd17 	ldw	r5,-12(fp)
    9c2c:	e13ffc17 	ldw	r4,-16(fp)
    9c30:	0009e880 	call	9e88 <open>
    9c34:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
    9c38:	e0bffa17 	ldw	r2,-24(fp)
    9c3c:	10002216 	blt	r2,zero,9cc8 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
    9c40:	04000074 	movhi	r16,1
    9c44:	842a8904 	addi	r16,r16,-21980
    9c48:	e0bffa17 	ldw	r2,-24(fp)
    9c4c:	01400304 	movi	r5,12
    9c50:	1009883a 	mov	r4,r2
    9c54:	0008f880 	call	8f88 <__mulsi3>
    9c58:	8085883a 	add	r2,r16,r2
    9c5c:	10c00017 	ldw	r3,0(r2)
    9c60:	e0bffb17 	ldw	r2,-20(fp)
    9c64:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    9c68:	04000074 	movhi	r16,1
    9c6c:	842a8904 	addi	r16,r16,-21980
    9c70:	e0bffa17 	ldw	r2,-24(fp)
    9c74:	01400304 	movi	r5,12
    9c78:	1009883a 	mov	r4,r2
    9c7c:	0008f880 	call	8f88 <__mulsi3>
    9c80:	8085883a 	add	r2,r16,r2
    9c84:	10800104 	addi	r2,r2,4
    9c88:	10c00017 	ldw	r3,0(r2)
    9c8c:	e0bffb17 	ldw	r2,-20(fp)
    9c90:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    9c94:	04000074 	movhi	r16,1
    9c98:	842a8904 	addi	r16,r16,-21980
    9c9c:	e0bffa17 	ldw	r2,-24(fp)
    9ca0:	01400304 	movi	r5,12
    9ca4:	1009883a 	mov	r4,r2
    9ca8:	0008f880 	call	8f88 <__mulsi3>
    9cac:	8085883a 	add	r2,r16,r2
    9cb0:	10800204 	addi	r2,r2,8
    9cb4:	10c00017 	ldw	r3,0(r2)
    9cb8:	e0bffb17 	ldw	r2,-20(fp)
    9cbc:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
    9cc0:	e13ffa17 	ldw	r4,-24(fp)
    9cc4:	0009fe40 	call	9fe4 <alt_release_fd>
  }
} 
    9cc8:	0001883a 	nop
    9ccc:	e6ffff04 	addi	sp,fp,-4
    9cd0:	dfc00217 	ldw	ra,8(sp)
    9cd4:	df000117 	ldw	fp,4(sp)
    9cd8:	dc000017 	ldw	r16,0(sp)
    9cdc:	dec00304 	addi	sp,sp,12
    9ce0:	f800283a 	ret

00009ce4 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    9ce4:	defffb04 	addi	sp,sp,-20
    9ce8:	dfc00415 	stw	ra,16(sp)
    9cec:	df000315 	stw	fp,12(sp)
    9cf0:	df000304 	addi	fp,sp,12
    9cf4:	e13ffd15 	stw	r4,-12(fp)
    9cf8:	e17ffe15 	stw	r5,-8(fp)
    9cfc:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    9d00:	01c07fc4 	movi	r7,511
    9d04:	01800044 	movi	r6,1
    9d08:	e17ffd17 	ldw	r5,-12(fp)
    9d0c:	01000074 	movhi	r4,1
    9d10:	212a8c04 	addi	r4,r4,-21968
    9d14:	0009c000 	call	9c00 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    9d18:	01c07fc4 	movi	r7,511
    9d1c:	000d883a 	mov	r6,zero
    9d20:	e17ffe17 	ldw	r5,-8(fp)
    9d24:	01000074 	movhi	r4,1
    9d28:	212a8904 	addi	r4,r4,-21980
    9d2c:	0009c000 	call	9c00 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    9d30:	01c07fc4 	movi	r7,511
    9d34:	01800044 	movi	r6,1
    9d38:	e17fff17 	ldw	r5,-4(fp)
    9d3c:	01000074 	movhi	r4,1
    9d40:	212a8f04 	addi	r4,r4,-21956
    9d44:	0009c000 	call	9c00 <alt_open_fd>
}  
    9d48:	0001883a 	nop
    9d4c:	e037883a 	mov	sp,fp
    9d50:	dfc00117 	ldw	ra,4(sp)
    9d54:	df000017 	ldw	fp,0(sp)
    9d58:	dec00204 	addi	sp,sp,8
    9d5c:	f800283a 	ret

00009d60 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    9d60:	defffe04 	addi	sp,sp,-8
    9d64:	dfc00115 	stw	ra,4(sp)
    9d68:	df000015 	stw	fp,0(sp)
    9d6c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    9d70:	d0a00717 	ldw	r2,-32740(gp)
    9d74:	10000326 	beq	r2,zero,9d84 <alt_get_errno+0x24>
    9d78:	d0a00717 	ldw	r2,-32740(gp)
    9d7c:	103ee83a 	callr	r2
    9d80:	00000106 	br	9d88 <alt_get_errno+0x28>
    9d84:	d0a0c304 	addi	r2,gp,-31988
}
    9d88:	e037883a 	mov	sp,fp
    9d8c:	dfc00117 	ldw	ra,4(sp)
    9d90:	df000017 	ldw	fp,0(sp)
    9d94:	dec00204 	addi	sp,sp,8
    9d98:	f800283a 	ret

00009d9c <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
    9d9c:	defffb04 	addi	sp,sp,-20
    9da0:	dfc00415 	stw	ra,16(sp)
    9da4:	df000315 	stw	fp,12(sp)
    9da8:	dc000215 	stw	r16,8(sp)
    9dac:	df000304 	addi	fp,sp,12
    9db0:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    9db4:	e0bffe17 	ldw	r2,-8(fp)
    9db8:	10800217 	ldw	r2,8(r2)
    9dbc:	10d00034 	orhi	r3,r2,16384
    9dc0:	e0bffe17 	ldw	r2,-8(fp)
    9dc4:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    9dc8:	e03ffd15 	stw	zero,-12(fp)
    9dcc:	00002306 	br	9e5c <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    9dd0:	04000074 	movhi	r16,1
    9dd4:	842a8904 	addi	r16,r16,-21980
    9dd8:	e0bffd17 	ldw	r2,-12(fp)
    9ddc:	01400304 	movi	r5,12
    9de0:	1009883a 	mov	r4,r2
    9de4:	0008f880 	call	8f88 <__mulsi3>
    9de8:	8085883a 	add	r2,r16,r2
    9dec:	10c00017 	ldw	r3,0(r2)
    9df0:	e0bffe17 	ldw	r2,-8(fp)
    9df4:	10800017 	ldw	r2,0(r2)
    9df8:	1880151e 	bne	r3,r2,9e50 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    9dfc:	04000074 	movhi	r16,1
    9e00:	842a8904 	addi	r16,r16,-21980
    9e04:	e0bffd17 	ldw	r2,-12(fp)
    9e08:	01400304 	movi	r5,12
    9e0c:	1009883a 	mov	r4,r2
    9e10:	0008f880 	call	8f88 <__mulsi3>
    9e14:	8085883a 	add	r2,r16,r2
    9e18:	10800204 	addi	r2,r2,8
    9e1c:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    9e20:	10000b0e 	bge	r2,zero,9e50 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    9e24:	01400304 	movi	r5,12
    9e28:	e13ffd17 	ldw	r4,-12(fp)
    9e2c:	0008f880 	call	8f88 <__mulsi3>
    9e30:	1007883a 	mov	r3,r2
    9e34:	00800074 	movhi	r2,1
    9e38:	10aa8904 	addi	r2,r2,-21980
    9e3c:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    9e40:	e0bffe17 	ldw	r2,-8(fp)
    9e44:	18800226 	beq	r3,r2,9e50 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
    9e48:	00bffcc4 	movi	r2,-13
    9e4c:	00000806 	br	9e70 <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    9e50:	e0bffd17 	ldw	r2,-12(fp)
    9e54:	10800044 	addi	r2,r2,1
    9e58:	e0bffd15 	stw	r2,-12(fp)
    9e5c:	d0a00617 	ldw	r2,-32744(gp)
    9e60:	1007883a 	mov	r3,r2
    9e64:	e0bffd17 	ldw	r2,-12(fp)
    9e68:	18bfd92e 	bgeu	r3,r2,9dd0 <_gp+0xffff722c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
    9e6c:	0005883a 	mov	r2,zero
}
    9e70:	e6ffff04 	addi	sp,fp,-4
    9e74:	dfc00217 	ldw	ra,8(sp)
    9e78:	df000117 	ldw	fp,4(sp)
    9e7c:	dc000017 	ldw	r16,0(sp)
    9e80:	dec00304 	addi	sp,sp,12
    9e84:	f800283a 	ret

00009e88 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    9e88:	defff604 	addi	sp,sp,-40
    9e8c:	dfc00915 	stw	ra,36(sp)
    9e90:	df000815 	stw	fp,32(sp)
    9e94:	df000804 	addi	fp,sp,32
    9e98:	e13ffd15 	stw	r4,-12(fp)
    9e9c:	e17ffe15 	stw	r5,-8(fp)
    9ea0:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
    9ea4:	00bfffc4 	movi	r2,-1
    9ea8:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
    9eac:	00bffb44 	movi	r2,-19
    9eb0:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
    9eb4:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    9eb8:	d1600404 	addi	r5,gp,-32752
    9ebc:	e13ffd17 	ldw	r4,-12(fp)
    9ec0:	000a2300 	call	a230 <alt_find_dev>
    9ec4:	e0bff815 	stw	r2,-32(fp)
    9ec8:	e0bff817 	ldw	r2,-32(fp)
    9ecc:	1000051e 	bne	r2,zero,9ee4 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    9ed0:	e13ffd17 	ldw	r4,-12(fp)
    9ed4:	000a2c00 	call	a2c0 <alt_find_file>
    9ed8:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
    9edc:	00800044 	movi	r2,1
    9ee0:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    9ee4:	e0bff817 	ldw	r2,-32(fp)
    9ee8:	10002b26 	beq	r2,zero,9f98 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
    9eec:	e13ff817 	ldw	r4,-32(fp)
    9ef0:	000a3c80 	call	a3c8 <alt_get_fd>
    9ef4:	e0bff915 	stw	r2,-28(fp)
    9ef8:	e0bff917 	ldw	r2,-28(fp)
    9efc:	1000030e 	bge	r2,zero,9f0c <open+0x84>
    {
      status = index;
    9f00:	e0bff917 	ldw	r2,-28(fp)
    9f04:	e0bffa15 	stw	r2,-24(fp)
    9f08:	00002506 	br	9fa0 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
    9f0c:	01400304 	movi	r5,12
    9f10:	e13ff917 	ldw	r4,-28(fp)
    9f14:	0008f880 	call	8f88 <__mulsi3>
    9f18:	1007883a 	mov	r3,r2
    9f1c:	00800074 	movhi	r2,1
    9f20:	10aa8904 	addi	r2,r2,-21980
    9f24:	1885883a 	add	r2,r3,r2
    9f28:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    9f2c:	e0fffe17 	ldw	r3,-8(fp)
    9f30:	00900034 	movhi	r2,16384
    9f34:	10bfffc4 	addi	r2,r2,-1
    9f38:	1886703a 	and	r3,r3,r2
    9f3c:	e0bffc17 	ldw	r2,-16(fp)
    9f40:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
    9f44:	e0bffb17 	ldw	r2,-20(fp)
    9f48:	1000051e 	bne	r2,zero,9f60 <open+0xd8>
    9f4c:	e13ffc17 	ldw	r4,-16(fp)
    9f50:	0009d9c0 	call	9d9c <alt_file_locked>
    9f54:	e0bffa15 	stw	r2,-24(fp)
    9f58:	e0bffa17 	ldw	r2,-24(fp)
    9f5c:	10001016 	blt	r2,zero,9fa0 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    9f60:	e0bff817 	ldw	r2,-32(fp)
    9f64:	10800317 	ldw	r2,12(r2)
    9f68:	10000826 	beq	r2,zero,9f8c <open+0x104>
    9f6c:	e0bff817 	ldw	r2,-32(fp)
    9f70:	10800317 	ldw	r2,12(r2)
    9f74:	e1ffff17 	ldw	r7,-4(fp)
    9f78:	e1bffe17 	ldw	r6,-8(fp)
    9f7c:	e17ffd17 	ldw	r5,-12(fp)
    9f80:	e13ffc17 	ldw	r4,-16(fp)
    9f84:	103ee83a 	callr	r2
    9f88:	00000106 	br	9f90 <open+0x108>
    9f8c:	0005883a 	mov	r2,zero
    9f90:	e0bffa15 	stw	r2,-24(fp)
    9f94:	00000206 	br	9fa0 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
    9f98:	00bffb44 	movi	r2,-19
    9f9c:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    9fa0:	e0bffa17 	ldw	r2,-24(fp)
    9fa4:	1000090e 	bge	r2,zero,9fcc <open+0x144>
  {
    alt_release_fd (index);  
    9fa8:	e13ff917 	ldw	r4,-28(fp)
    9fac:	0009fe40 	call	9fe4 <alt_release_fd>
    ALT_ERRNO = -status;
    9fb0:	0009d600 	call	9d60 <alt_get_errno>
    9fb4:	1007883a 	mov	r3,r2
    9fb8:	e0bffa17 	ldw	r2,-24(fp)
    9fbc:	0085c83a 	sub	r2,zero,r2
    9fc0:	18800015 	stw	r2,0(r3)
    return -1;
    9fc4:	00bfffc4 	movi	r2,-1
    9fc8:	00000106 	br	9fd0 <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
    9fcc:	e0bff917 	ldw	r2,-28(fp)
}
    9fd0:	e037883a 	mov	sp,fp
    9fd4:	dfc00117 	ldw	ra,4(sp)
    9fd8:	df000017 	ldw	fp,0(sp)
    9fdc:	dec00204 	addi	sp,sp,8
    9fe0:	f800283a 	ret

00009fe4 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    9fe4:	defffc04 	addi	sp,sp,-16
    9fe8:	dfc00315 	stw	ra,12(sp)
    9fec:	df000215 	stw	fp,8(sp)
    9ff0:	dc000115 	stw	r16,4(sp)
    9ff4:	df000204 	addi	fp,sp,8
    9ff8:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
    9ffc:	e0bffe17 	ldw	r2,-8(fp)
    a000:	108000d0 	cmplti	r2,r2,3
    a004:	1000111e 	bne	r2,zero,a04c <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
    a008:	04000074 	movhi	r16,1
    a00c:	842a8904 	addi	r16,r16,-21980
    a010:	e0bffe17 	ldw	r2,-8(fp)
    a014:	01400304 	movi	r5,12
    a018:	1009883a 	mov	r4,r2
    a01c:	0008f880 	call	8f88 <__mulsi3>
    a020:	8085883a 	add	r2,r16,r2
    a024:	10800204 	addi	r2,r2,8
    a028:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    a02c:	04000074 	movhi	r16,1
    a030:	842a8904 	addi	r16,r16,-21980
    a034:	e0bffe17 	ldw	r2,-8(fp)
    a038:	01400304 	movi	r5,12
    a03c:	1009883a 	mov	r4,r2
    a040:	0008f880 	call	8f88 <__mulsi3>
    a044:	8085883a 	add	r2,r16,r2
    a048:	10000015 	stw	zero,0(r2)
  }
}
    a04c:	0001883a 	nop
    a050:	e6ffff04 	addi	sp,fp,-4
    a054:	dfc00217 	ldw	ra,8(sp)
    a058:	df000117 	ldw	fp,4(sp)
    a05c:	dc000017 	ldw	r16,0(sp)
    a060:	dec00304 	addi	sp,sp,12
    a064:	f800283a 	ret

0000a068 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
    a068:	defffa04 	addi	sp,sp,-24
    a06c:	df000515 	stw	fp,20(sp)
    a070:	df000504 	addi	fp,sp,20
    a074:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    a078:	0005303a 	rdctl	r2,status
    a07c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    a080:	e0fffc17 	ldw	r3,-16(fp)
    a084:	00bfff84 	movi	r2,-2
    a088:	1884703a 	and	r2,r3,r2
    a08c:	1001703a 	wrctl	status,r2
  
  return context;
    a090:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
    a094:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
    a098:	e0bfff17 	ldw	r2,-4(fp)
    a09c:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
    a0a0:	e0bffd17 	ldw	r2,-12(fp)
    a0a4:	10800017 	ldw	r2,0(r2)
    a0a8:	e0fffd17 	ldw	r3,-12(fp)
    a0ac:	18c00117 	ldw	r3,4(r3)
    a0b0:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
    a0b4:	e0bffd17 	ldw	r2,-12(fp)
    a0b8:	10800117 	ldw	r2,4(r2)
    a0bc:	e0fffd17 	ldw	r3,-12(fp)
    a0c0:	18c00017 	ldw	r3,0(r3)
    a0c4:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
    a0c8:	e0bffd17 	ldw	r2,-12(fp)
    a0cc:	e0fffd17 	ldw	r3,-12(fp)
    a0d0:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
    a0d4:	e0bffd17 	ldw	r2,-12(fp)
    a0d8:	e0fffd17 	ldw	r3,-12(fp)
    a0dc:	10c00015 	stw	r3,0(r2)
    a0e0:	e0bffb17 	ldw	r2,-20(fp)
    a0e4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    a0e8:	e0bffe17 	ldw	r2,-8(fp)
    a0ec:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
    a0f0:	0001883a 	nop
    a0f4:	e037883a 	mov	sp,fp
    a0f8:	df000017 	ldw	fp,0(sp)
    a0fc:	dec00104 	addi	sp,sp,4
    a100:	f800283a 	ret

0000a104 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
    a104:	defffb04 	addi	sp,sp,-20
    a108:	dfc00415 	stw	ra,16(sp)
    a10c:	df000315 	stw	fp,12(sp)
    a110:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
    a114:	d0a00917 	ldw	r2,-32732(gp)
    a118:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
    a11c:	d0a0c917 	ldw	r2,-31964(gp)
    a120:	10800044 	addi	r2,r2,1
    a124:	d0a0c915 	stw	r2,-31964(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    a128:	00002e06 	br	a1e4 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
    a12c:	e0bffd17 	ldw	r2,-12(fp)
    a130:	10800017 	ldw	r2,0(r2)
    a134:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
    a138:	e0bffd17 	ldw	r2,-12(fp)
    a13c:	10800403 	ldbu	r2,16(r2)
    a140:	10803fcc 	andi	r2,r2,255
    a144:	10000426 	beq	r2,zero,a158 <alt_tick+0x54>
    a148:	d0a0c917 	ldw	r2,-31964(gp)
    a14c:	1000021e 	bne	r2,zero,a158 <alt_tick+0x54>
    {
      alarm->rollover = 0;
    a150:	e0bffd17 	ldw	r2,-12(fp)
    a154:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
    a158:	e0bffd17 	ldw	r2,-12(fp)
    a15c:	10800217 	ldw	r2,8(r2)
    a160:	d0e0c917 	ldw	r3,-31964(gp)
    a164:	18801d36 	bltu	r3,r2,a1dc <alt_tick+0xd8>
    a168:	e0bffd17 	ldw	r2,-12(fp)
    a16c:	10800403 	ldbu	r2,16(r2)
    a170:	10803fcc 	andi	r2,r2,255
    a174:	1000191e 	bne	r2,zero,a1dc <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
    a178:	e0bffd17 	ldw	r2,-12(fp)
    a17c:	10800317 	ldw	r2,12(r2)
    a180:	e0fffd17 	ldw	r3,-12(fp)
    a184:	18c00517 	ldw	r3,20(r3)
    a188:	1809883a 	mov	r4,r3
    a18c:	103ee83a 	callr	r2
    a190:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
    a194:	e0bfff17 	ldw	r2,-4(fp)
    a198:	1000031e 	bne	r2,zero,a1a8 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
    a19c:	e13ffd17 	ldw	r4,-12(fp)
    a1a0:	000a0680 	call	a068 <alt_alarm_stop>
    a1a4:	00000d06 	br	a1dc <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
    a1a8:	e0bffd17 	ldw	r2,-12(fp)
    a1ac:	10c00217 	ldw	r3,8(r2)
    a1b0:	e0bfff17 	ldw	r2,-4(fp)
    a1b4:	1887883a 	add	r3,r3,r2
    a1b8:	e0bffd17 	ldw	r2,-12(fp)
    a1bc:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
    a1c0:	e0bffd17 	ldw	r2,-12(fp)
    a1c4:	10c00217 	ldw	r3,8(r2)
    a1c8:	d0a0c917 	ldw	r2,-31964(gp)
    a1cc:	1880032e 	bgeu	r3,r2,a1dc <alt_tick+0xd8>
        {
          alarm->rollover = 1;
    a1d0:	e0bffd17 	ldw	r2,-12(fp)
    a1d4:	00c00044 	movi	r3,1
    a1d8:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
    a1dc:	e0bffe17 	ldw	r2,-8(fp)
    a1e0:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    a1e4:	e0fffd17 	ldw	r3,-12(fp)
    a1e8:	d0a00904 	addi	r2,gp,-32732
    a1ec:	18bfcf1e 	bne	r3,r2,a12c <_gp+0xffff7588>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
    a1f0:	0001883a 	nop
}
    a1f4:	0001883a 	nop
    a1f8:	e037883a 	mov	sp,fp
    a1fc:	dfc00117 	ldw	ra,4(sp)
    a200:	df000017 	ldw	fp,0(sp)
    a204:	dec00204 	addi	sp,sp,8
    a208:	f800283a 	ret

0000a20c <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    a20c:	deffff04 	addi	sp,sp,-4
    a210:	df000015 	stw	fp,0(sp)
    a214:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
    a218:	000170fa 	wrctl	ienable,zero
}
    a21c:	0001883a 	nop
    a220:	e037883a 	mov	sp,fp
    a224:	df000017 	ldw	fp,0(sp)
    a228:	dec00104 	addi	sp,sp,4
    a22c:	f800283a 	ret

0000a230 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    a230:	defffa04 	addi	sp,sp,-24
    a234:	dfc00515 	stw	ra,20(sp)
    a238:	df000415 	stw	fp,16(sp)
    a23c:	df000404 	addi	fp,sp,16
    a240:	e13ffe15 	stw	r4,-8(fp)
    a244:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
    a248:	e0bfff17 	ldw	r2,-4(fp)
    a24c:	10800017 	ldw	r2,0(r2)
    a250:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
    a254:	e13ffe17 	ldw	r4,-8(fp)
    a258:	0008f140 	call	8f14 <strlen>
    a25c:	10800044 	addi	r2,r2,1
    a260:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    a264:	00000d06 	br	a29c <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    a268:	e0bffc17 	ldw	r2,-16(fp)
    a26c:	10800217 	ldw	r2,8(r2)
    a270:	e0fffd17 	ldw	r3,-12(fp)
    a274:	180d883a 	mov	r6,r3
    a278:	e17ffe17 	ldw	r5,-8(fp)
    a27c:	1009883a 	mov	r4,r2
    a280:	000a55c0 	call	a55c <memcmp>
    a284:	1000021e 	bne	r2,zero,a290 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
    a288:	e0bffc17 	ldw	r2,-16(fp)
    a28c:	00000706 	br	a2ac <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
    a290:	e0bffc17 	ldw	r2,-16(fp)
    a294:	10800017 	ldw	r2,0(r2)
    a298:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    a29c:	e0fffc17 	ldw	r3,-16(fp)
    a2a0:	e0bfff17 	ldw	r2,-4(fp)
    a2a4:	18bff01e 	bne	r3,r2,a268 <_gp+0xffff76c4>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
    a2a8:	0005883a 	mov	r2,zero
}
    a2ac:	e037883a 	mov	sp,fp
    a2b0:	dfc00117 	ldw	ra,4(sp)
    a2b4:	df000017 	ldw	fp,0(sp)
    a2b8:	dec00204 	addi	sp,sp,8
    a2bc:	f800283a 	ret

0000a2c0 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    a2c0:	defffb04 	addi	sp,sp,-20
    a2c4:	dfc00415 	stw	ra,16(sp)
    a2c8:	df000315 	stw	fp,12(sp)
    a2cc:	df000304 	addi	fp,sp,12
    a2d0:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    a2d4:	d0a00217 	ldw	r2,-32760(gp)
    a2d8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    a2dc:	00003106 	br	a3a4 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
    a2e0:	e0bffd17 	ldw	r2,-12(fp)
    a2e4:	10800217 	ldw	r2,8(r2)
    a2e8:	1009883a 	mov	r4,r2
    a2ec:	0008f140 	call	8f14 <strlen>
    a2f0:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
    a2f4:	e0bffd17 	ldw	r2,-12(fp)
    a2f8:	10c00217 	ldw	r3,8(r2)
    a2fc:	e0bffe17 	ldw	r2,-8(fp)
    a300:	10bfffc4 	addi	r2,r2,-1
    a304:	1885883a 	add	r2,r3,r2
    a308:	10800003 	ldbu	r2,0(r2)
    a30c:	10803fcc 	andi	r2,r2,255
    a310:	1080201c 	xori	r2,r2,128
    a314:	10bfe004 	addi	r2,r2,-128
    a318:	10800bd8 	cmpnei	r2,r2,47
    a31c:	1000031e 	bne	r2,zero,a32c <alt_find_file+0x6c>
    {
      len -= 1;
    a320:	e0bffe17 	ldw	r2,-8(fp)
    a324:	10bfffc4 	addi	r2,r2,-1
    a328:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    a32c:	e0bffe17 	ldw	r2,-8(fp)
    a330:	e0ffff17 	ldw	r3,-4(fp)
    a334:	1885883a 	add	r2,r3,r2
    a338:	10800003 	ldbu	r2,0(r2)
    a33c:	10803fcc 	andi	r2,r2,255
    a340:	1080201c 	xori	r2,r2,128
    a344:	10bfe004 	addi	r2,r2,-128
    a348:	10800be0 	cmpeqi	r2,r2,47
    a34c:	1000081e 	bne	r2,zero,a370 <alt_find_file+0xb0>
    a350:	e0bffe17 	ldw	r2,-8(fp)
    a354:	e0ffff17 	ldw	r3,-4(fp)
    a358:	1885883a 	add	r2,r3,r2
    a35c:	10800003 	ldbu	r2,0(r2)
    a360:	10803fcc 	andi	r2,r2,255
    a364:	1080201c 	xori	r2,r2,128
    a368:	10bfe004 	addi	r2,r2,-128
    a36c:	10000a1e 	bne	r2,zero,a398 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    a370:	e0bffd17 	ldw	r2,-12(fp)
    a374:	10800217 	ldw	r2,8(r2)
    a378:	e0fffe17 	ldw	r3,-8(fp)
    a37c:	180d883a 	mov	r6,r3
    a380:	e17fff17 	ldw	r5,-4(fp)
    a384:	1009883a 	mov	r4,r2
    a388:	000a55c0 	call	a55c <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    a38c:	1000021e 	bne	r2,zero,a398 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
    a390:	e0bffd17 	ldw	r2,-12(fp)
    a394:	00000706 	br	a3b4 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
    a398:	e0bffd17 	ldw	r2,-12(fp)
    a39c:	10800017 	ldw	r2,0(r2)
    a3a0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    a3a4:	e0fffd17 	ldw	r3,-12(fp)
    a3a8:	d0a00204 	addi	r2,gp,-32760
    a3ac:	18bfcc1e 	bne	r3,r2,a2e0 <_gp+0xffff773c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
    a3b0:	0005883a 	mov	r2,zero
}
    a3b4:	e037883a 	mov	sp,fp
    a3b8:	dfc00117 	ldw	ra,4(sp)
    a3bc:	df000017 	ldw	fp,0(sp)
    a3c0:	dec00204 	addi	sp,sp,8
    a3c4:	f800283a 	ret

0000a3c8 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    a3c8:	defffa04 	addi	sp,sp,-24
    a3cc:	dfc00515 	stw	ra,20(sp)
    a3d0:	df000415 	stw	fp,16(sp)
    a3d4:	dc000315 	stw	r16,12(sp)
    a3d8:	df000404 	addi	fp,sp,16
    a3dc:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
    a3e0:	00bffa04 	movi	r2,-24
    a3e4:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    a3e8:	e03ffc15 	stw	zero,-16(fp)
    a3ec:	00001d06 	br	a464 <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
    a3f0:	04000074 	movhi	r16,1
    a3f4:	842a8904 	addi	r16,r16,-21980
    a3f8:	e0bffc17 	ldw	r2,-16(fp)
    a3fc:	01400304 	movi	r5,12
    a400:	1009883a 	mov	r4,r2
    a404:	0008f880 	call	8f88 <__mulsi3>
    a408:	8085883a 	add	r2,r16,r2
    a40c:	10800017 	ldw	r2,0(r2)
    a410:	1000111e 	bne	r2,zero,a458 <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
    a414:	04000074 	movhi	r16,1
    a418:	842a8904 	addi	r16,r16,-21980
    a41c:	e0bffc17 	ldw	r2,-16(fp)
    a420:	01400304 	movi	r5,12
    a424:	1009883a 	mov	r4,r2
    a428:	0008f880 	call	8f88 <__mulsi3>
    a42c:	8085883a 	add	r2,r16,r2
    a430:	e0fffe17 	ldw	r3,-8(fp)
    a434:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
    a438:	d0e00617 	ldw	r3,-32744(gp)
    a43c:	e0bffc17 	ldw	r2,-16(fp)
    a440:	1880020e 	bge	r3,r2,a44c <alt_get_fd+0x84>
      {
        alt_max_fd = i;
    a444:	e0bffc17 	ldw	r2,-16(fp)
    a448:	d0a00615 	stw	r2,-32744(gp)
      }
      rc = i;
    a44c:	e0bffc17 	ldw	r2,-16(fp)
    a450:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
    a454:	00000606 	br	a470 <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    a458:	e0bffc17 	ldw	r2,-16(fp)
    a45c:	10800044 	addi	r2,r2,1
    a460:	e0bffc15 	stw	r2,-16(fp)
    a464:	e0bffc17 	ldw	r2,-16(fp)
    a468:	10800810 	cmplti	r2,r2,32
    a46c:	103fe01e 	bne	r2,zero,a3f0 <_gp+0xffff784c>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
    a470:	e0bffd17 	ldw	r2,-12(fp)
}
    a474:	e6ffff04 	addi	sp,fp,-4
    a478:	dfc00217 	ldw	ra,8(sp)
    a47c:	df000117 	ldw	fp,4(sp)
    a480:	dc000017 	ldw	r16,0(sp)
    a484:	dec00304 	addi	sp,sp,12
    a488:	f800283a 	ret

0000a48c <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
    a48c:	defffe04 	addi	sp,sp,-8
    a490:	df000115 	stw	fp,4(sp)
    a494:	df000104 	addi	fp,sp,4
    a498:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
    a49c:	e0bfff17 	ldw	r2,-4(fp)
    a4a0:	10bffe84 	addi	r2,r2,-6
    a4a4:	10c00428 	cmpgeui	r3,r2,16
    a4a8:	18001a1e 	bne	r3,zero,a514 <alt_exception_cause_generated_bad_addr+0x88>
    a4ac:	100690ba 	slli	r3,r2,2
    a4b0:	00800074 	movhi	r2,1
    a4b4:	10a93104 	addi	r2,r2,-23356
    a4b8:	1885883a 	add	r2,r3,r2
    a4bc:	10800017 	ldw	r2,0(r2)
    a4c0:	1000683a 	jmp	r2
    a4c4:	0000a504 	movi	zero,660
    a4c8:	0000a504 	movi	zero,660
    a4cc:	0000a514 	movui	zero,660
    a4d0:	0000a514 	movui	zero,660
    a4d4:	0000a514 	movui	zero,660
    a4d8:	0000a504 	movi	zero,660
    a4dc:	0000a50c 	andi	zero,zero,660
    a4e0:	0000a514 	movui	zero,660
    a4e4:	0000a504 	movi	zero,660
    a4e8:	0000a504 	movi	zero,660
    a4ec:	0000a514 	movui	zero,660
    a4f0:	0000a504 	movi	zero,660
    a4f4:	0000a50c 	andi	zero,zero,660
    a4f8:	0000a514 	movui	zero,660
    a4fc:	0000a514 	movui	zero,660
    a500:	0000a504 	movi	zero,660
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
    a504:	00800044 	movi	r2,1
    a508:	00000306 	br	a518 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
    a50c:	0005883a 	mov	r2,zero
    a510:	00000106 	br	a518 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
    a514:	0005883a 	mov	r2,zero
  }
}
    a518:	e037883a 	mov	sp,fp
    a51c:	df000017 	ldw	fp,0(sp)
    a520:	dec00104 	addi	sp,sp,4
    a524:	f800283a 	ret

0000a528 <atexit>:
    a528:	200b883a 	mov	r5,r4
    a52c:	000f883a 	mov	r7,zero
    a530:	000d883a 	mov	r6,zero
    a534:	0009883a 	mov	r4,zero
    a538:	000a58c1 	jmpi	a58c <__register_exitproc>

0000a53c <exit>:
    a53c:	defffe04 	addi	sp,sp,-8
    a540:	000b883a 	mov	r5,zero
    a544:	dc000015 	stw	r16,0(sp)
    a548:	dfc00115 	stw	ra,4(sp)
    a54c:	2021883a 	mov	r16,r4
    a550:	000a6e40 	call	a6e4 <__call_exitprocs>
    a554:	8009883a 	mov	r4,r16
    a558:	000a8740 	call	a874 <_exit>

0000a55c <memcmp>:
    a55c:	218d883a 	add	r6,r4,r6
    a560:	21800826 	beq	r4,r6,a584 <memcmp+0x28>
    a564:	20800003 	ldbu	r2,0(r4)
    a568:	28c00003 	ldbu	r3,0(r5)
    a56c:	10c00226 	beq	r2,r3,a578 <memcmp+0x1c>
    a570:	10c5c83a 	sub	r2,r2,r3
    a574:	f800283a 	ret
    a578:	21000044 	addi	r4,r4,1
    a57c:	29400044 	addi	r5,r5,1
    a580:	003ff706 	br	a560 <_gp+0xffff79bc>
    a584:	0005883a 	mov	r2,zero
    a588:	f800283a 	ret

0000a58c <__register_exitproc>:
    a58c:	00800074 	movhi	r2,1
    a590:	10aae904 	addi	r2,r2,-21596
    a594:	10c00017 	ldw	r3,0(r2)
    a598:	defff904 	addi	sp,sp,-28
    a59c:	dc000015 	stw	r16,0(sp)
    a5a0:	1c000c17 	ldw	r16,48(r3)
    a5a4:	dd400515 	stw	r21,20(sp)
    a5a8:	dd000415 	stw	r20,16(sp)
    a5ac:	dcc00315 	stw	r19,12(sp)
    a5b0:	dc800215 	stw	r18,8(sp)
    a5b4:	dc400115 	stw	r17,4(sp)
    a5b8:	dfc00615 	stw	ra,24(sp)
    a5bc:	202b883a 	mov	r21,r4
    a5c0:	2823883a 	mov	r17,r5
    a5c4:	3027883a 	mov	r19,r6
    a5c8:	3825883a 	mov	r18,r7
    a5cc:	1029883a 	mov	r20,r2
    a5d0:	8000021e 	bne	r16,zero,a5dc <__register_exitproc+0x50>
    a5d4:	1c000d04 	addi	r16,r3,52
    a5d8:	1c000c15 	stw	r16,48(r3)
    a5dc:	80800117 	ldw	r2,4(r16)
    a5e0:	00c007c4 	movi	r3,31
    a5e4:	1880110e 	bge	r3,r2,a62c <__register_exitproc+0xa0>
    a5e8:	00800034 	movhi	r2,0
    a5ec:	10800004 	addi	r2,r2,0
    a5f0:	1000021e 	bne	r2,zero,a5fc <__register_exitproc+0x70>
    a5f4:	00bfffc4 	movi	r2,-1
    a5f8:	00003106 	br	a6c0 <__register_exitproc+0x134>
    a5fc:	01002304 	movi	r4,140
    a600:	00000000 	call	0 <__alt_mem_onchip_memory-0x8000>
    a604:	1021883a 	mov	r16,r2
    a608:	103ffa26 	beq	r2,zero,a5f4 <_gp+0xffff7a50>
    a60c:	10000115 	stw	zero,4(r2)
    a610:	a0800017 	ldw	r2,0(r20)
    a614:	10c00c17 	ldw	r3,48(r2)
    a618:	80c00015 	stw	r3,0(r16)
    a61c:	14000c15 	stw	r16,48(r2)
    a620:	80002215 	stw	zero,136(r16)
    a624:	a8001d26 	beq	r21,zero,a69c <__register_exitproc+0x110>
    a628:	00000606 	br	a644 <__register_exitproc+0xb8>
    a62c:	a8001b26 	beq	r21,zero,a69c <__register_exitproc+0x110>
    a630:	80802217 	ldw	r2,136(r16)
    a634:	1000091e 	bne	r2,zero,a65c <__register_exitproc+0xd0>
    a638:	00800034 	movhi	r2,0
    a63c:	10800004 	addi	r2,r2,0
    a640:	103fec26 	beq	r2,zero,a5f4 <_gp+0xffff7a50>
    a644:	01004204 	movi	r4,264
    a648:	00000000 	call	0 <__alt_mem_onchip_memory-0x8000>
    a64c:	103fe926 	beq	r2,zero,a5f4 <_gp+0xffff7a50>
    a650:	10004015 	stw	zero,256(r2)
    a654:	10004115 	stw	zero,260(r2)
    a658:	80802215 	stw	r2,136(r16)
    a65c:	81400117 	ldw	r5,4(r16)
    a660:	01000044 	movi	r4,1
    a664:	2947883a 	add	r3,r5,r5
    a668:	18c7883a 	add	r3,r3,r3
    a66c:	10c7883a 	add	r3,r2,r3
    a670:	1cc00015 	stw	r19,0(r3)
    a674:	2148983a 	sll	r4,r4,r5
    a678:	11404017 	ldw	r5,256(r2)
    a67c:	290ab03a 	or	r5,r5,r4
    a680:	11404015 	stw	r5,256(r2)
    a684:	1c802015 	stw	r18,128(r3)
    a688:	00c00084 	movi	r3,2
    a68c:	a8c0031e 	bne	r21,r3,a69c <__register_exitproc+0x110>
    a690:	10c04117 	ldw	r3,260(r2)
    a694:	1908b03a 	or	r4,r3,r4
    a698:	11004115 	stw	r4,260(r2)
    a69c:	80800117 	ldw	r2,4(r16)
    a6a0:	10c00044 	addi	r3,r2,1
    a6a4:	10800084 	addi	r2,r2,2
    a6a8:	1085883a 	add	r2,r2,r2
    a6ac:	1085883a 	add	r2,r2,r2
    a6b0:	80c00115 	stw	r3,4(r16)
    a6b4:	80a1883a 	add	r16,r16,r2
    a6b8:	84400015 	stw	r17,0(r16)
    a6bc:	0005883a 	mov	r2,zero
    a6c0:	dfc00617 	ldw	ra,24(sp)
    a6c4:	dd400517 	ldw	r21,20(sp)
    a6c8:	dd000417 	ldw	r20,16(sp)
    a6cc:	dcc00317 	ldw	r19,12(sp)
    a6d0:	dc800217 	ldw	r18,8(sp)
    a6d4:	dc400117 	ldw	r17,4(sp)
    a6d8:	dc000017 	ldw	r16,0(sp)
    a6dc:	dec00704 	addi	sp,sp,28
    a6e0:	f800283a 	ret

0000a6e4 <__call_exitprocs>:
    a6e4:	defff504 	addi	sp,sp,-44
    a6e8:	dd000515 	stw	r20,20(sp)
    a6ec:	05000074 	movhi	r20,1
    a6f0:	dc800315 	stw	r18,12(sp)
    a6f4:	dfc00a15 	stw	ra,40(sp)
    a6f8:	df000915 	stw	fp,36(sp)
    a6fc:	ddc00815 	stw	r23,32(sp)
    a700:	dd800715 	stw	r22,28(sp)
    a704:	dd400615 	stw	r21,24(sp)
    a708:	dcc00415 	stw	r19,16(sp)
    a70c:	dc400215 	stw	r17,8(sp)
    a710:	dc000115 	stw	r16,4(sp)
    a714:	d9000015 	stw	r4,0(sp)
    a718:	2825883a 	mov	r18,r5
    a71c:	a52ae904 	addi	r20,r20,-21596
    a720:	a4400017 	ldw	r17,0(r20)
    a724:	8cc00c17 	ldw	r19,48(r17)
    a728:	8c400c04 	addi	r17,r17,48
    a72c:	98004526 	beq	r19,zero,a844 <__call_exitprocs+0x160>
    a730:	9c000117 	ldw	r16,4(r19)
    a734:	00900034 	movhi	r2,16384
    a738:	10bfffc4 	addi	r2,r2,-1
    a73c:	9d402217 	ldw	r21,136(r19)
    a740:	85bfffc4 	addi	r22,r16,-1
    a744:	80a1883a 	add	r16,r16,r2
    a748:	8421883a 	add	r16,r16,r16
    a74c:	8421883a 	add	r16,r16,r16
    a750:	ac2f883a 	add	r23,r21,r16
    a754:	84000204 	addi	r16,r16,8
    a758:	9c21883a 	add	r16,r19,r16
    a75c:	b0002716 	blt	r22,zero,a7fc <__call_exitprocs+0x118>
    a760:	90000726 	beq	r18,zero,a780 <__call_exitprocs+0x9c>
    a764:	a800041e 	bne	r21,zero,a778 <__call_exitprocs+0x94>
    a768:	b5bfffc4 	addi	r22,r22,-1
    a76c:	bdffff04 	addi	r23,r23,-4
    a770:	843fff04 	addi	r16,r16,-4
    a774:	003ff906 	br	a75c <_gp+0xffff7bb8>
    a778:	b9002017 	ldw	r4,128(r23)
    a77c:	913ffa1e 	bne	r18,r4,a768 <_gp+0xffff7bc4>
    a780:	99000117 	ldw	r4,4(r19)
    a784:	82000017 	ldw	r8,0(r16)
    a788:	213fffc4 	addi	r4,r4,-1
    a78c:	b100021e 	bne	r22,r4,a798 <__call_exitprocs+0xb4>
    a790:	9d800115 	stw	r22,4(r19)
    a794:	00000106 	br	a79c <__call_exitprocs+0xb8>
    a798:	80000015 	stw	zero,0(r16)
    a79c:	403ff226 	beq	r8,zero,a768 <_gp+0xffff7bc4>
    a7a0:	9f000117 	ldw	fp,4(r19)
    a7a4:	a8000526 	beq	r21,zero,a7bc <__call_exitprocs+0xd8>
    a7a8:	00800044 	movi	r2,1
    a7ac:	1592983a 	sll	r9,r2,r22
    a7b0:	a9404017 	ldw	r5,256(r21)
    a7b4:	494a703a 	and	r5,r9,r5
    a7b8:	2800021e 	bne	r5,zero,a7c4 <__call_exitprocs+0xe0>
    a7bc:	403ee83a 	callr	r8
    a7c0:	00000906 	br	a7e8 <__call_exitprocs+0x104>
    a7c4:	a9004117 	ldw	r4,260(r21)
    a7c8:	4908703a 	and	r4,r9,r4
    a7cc:	2000041e 	bne	r4,zero,a7e0 <__call_exitprocs+0xfc>
    a7d0:	b9400017 	ldw	r5,0(r23)
    a7d4:	d9000017 	ldw	r4,0(sp)
    a7d8:	403ee83a 	callr	r8
    a7dc:	00000206 	br	a7e8 <__call_exitprocs+0x104>
    a7e0:	b9000017 	ldw	r4,0(r23)
    a7e4:	403ee83a 	callr	r8
    a7e8:	99000117 	ldw	r4,4(r19)
    a7ec:	e13fcc1e 	bne	fp,r4,a720 <_gp+0xffff7b7c>
    a7f0:	89000017 	ldw	r4,0(r17)
    a7f4:	993fdc26 	beq	r19,r4,a768 <_gp+0xffff7bc4>
    a7f8:	003fc906 	br	a720 <_gp+0xffff7b7c>
    a7fc:	00800034 	movhi	r2,0
    a800:	10800004 	addi	r2,r2,0
    a804:	10000f26 	beq	r2,zero,a844 <__call_exitprocs+0x160>
    a808:	99400117 	ldw	r5,4(r19)
    a80c:	99000017 	ldw	r4,0(r19)
    a810:	2800091e 	bne	r5,zero,a838 <__call_exitprocs+0x154>
    a814:	20000826 	beq	r4,zero,a838 <__call_exitprocs+0x154>
    a818:	89000015 	stw	r4,0(r17)
    a81c:	a8000226 	beq	r21,zero,a828 <__call_exitprocs+0x144>
    a820:	a809883a 	mov	r4,r21
    a824:	00000000 	call	0 <__alt_mem_onchip_memory-0x8000>
    a828:	9809883a 	mov	r4,r19
    a82c:	00000000 	call	0 <__alt_mem_onchip_memory-0x8000>
    a830:	8cc00017 	ldw	r19,0(r17)
    a834:	003fbd06 	br	a72c <_gp+0xffff7b88>
    a838:	9823883a 	mov	r17,r19
    a83c:	2027883a 	mov	r19,r4
    a840:	003fba06 	br	a72c <_gp+0xffff7b88>
    a844:	dfc00a17 	ldw	ra,40(sp)
    a848:	df000917 	ldw	fp,36(sp)
    a84c:	ddc00817 	ldw	r23,32(sp)
    a850:	dd800717 	ldw	r22,28(sp)
    a854:	dd400617 	ldw	r21,24(sp)
    a858:	dd000517 	ldw	r20,20(sp)
    a85c:	dcc00417 	ldw	r19,16(sp)
    a860:	dc800317 	ldw	r18,12(sp)
    a864:	dc400217 	ldw	r17,8(sp)
    a868:	dc000117 	ldw	r16,4(sp)
    a86c:	dec00b04 	addi	sp,sp,44
    a870:	f800283a 	ret

0000a874 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
    a874:	defffd04 	addi	sp,sp,-12
    a878:	df000215 	stw	fp,8(sp)
    a87c:	df000204 	addi	fp,sp,8
    a880:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
    a884:	0001883a 	nop
    a888:	e0bfff17 	ldw	r2,-4(fp)
    a88c:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
    a890:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    a894:	10000226 	beq	r2,zero,a8a0 <_exit+0x2c>
    ALT_SIM_FAIL();
    a898:	002af070 	cmpltui	zero,zero,43969
    a89c:	00000106 	br	a8a4 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
    a8a0:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
    a8a4:	003fff06 	br	a8a4 <_gp+0xffff7d00>
