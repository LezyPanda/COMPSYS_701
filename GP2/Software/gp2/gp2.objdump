
gp2.elf:     file format elf32-littlenios2
gp2.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00008230

Program Header:
    LOAD off    0x00001000 vaddr 0x00008000 paddr 0x00008000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00008020 paddr 0x00008020 align 2**12
         filesz 0x000028b8 memsz 0x000028b8 flags r-x
    LOAD off    0x000038d8 vaddr 0x0000a8d8 paddr 0x0000abb8 align 2**12
         filesz 0x000002e0 memsz 0x000002e0 flags rw-
    LOAD off    0x00003e98 vaddr 0x0000ae98 paddr 0x0000ae98 align 2**12
         filesz 0x00000000 memsz 0x00000120 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00008000  00008000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  00008020  00008020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000262c  00008230  00008230  00001230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000007c  0000a85c  0000a85c  0000385c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000002e0  0000a8d8  0000abb8  000038d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000120  0000ae98  0000ae98  00003e98  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory 00000000  0000afb8  0000afb8  00003bb8  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00003bb8  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000630  00000000  00000000  00003be0  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00007d18  00000000  00000000  00004210  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00002c12  00000000  00000000  0000bf28  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00003072  00000000  00000000  0000eb3a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000bb4  00000000  00000000  00011bac  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00001e04  00000000  00000000  00012760  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00001543  00000000  00000000  00014564  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  00015aa8  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000002a8  00000000  00000000  00015ab8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  000177ba  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  000177bd  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  000177c0  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  000177c1  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  000177c2  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    0000000b  00000000  00000000  000177cd  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  000177d8  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 00000007  00000000  00000000  000177e3  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000026  00000000  00000000  000177ea  2**0
                  CONTENTS, READONLY
 26 .jdi          00004688  00000000  00000000  00017810  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     0006d7f8  00000000  00000000  0001be98  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00008000 l    d  .entry	00000000 .entry
00008020 l    d  .exceptions	00000000 .exceptions
00008230 l    d  .text	00000000 .text
0000a85c l    d  .rodata	00000000 .rodata
0000a8d8 l    d  .rwdata	00000000 .rwdata
0000ae98 l    d  .bss	00000000 .bss
0000afb8 l    d  .onchip_memory	00000000 .onchip_memory
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../gp2_bsp//obj/HAL/src/crt0.o
00008268 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 gp2.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 vfprintf.c
000086a8 l     F .text	0000006c print_repeat
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
0000a8d8 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_load.c
00008f64 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_write.c
000090cc l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00009208 l     F .text	00000034 alt_dev_reg
0000a9b8 l     O .rwdata	0000002c jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00009500 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_close.c
000095f4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00009728 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00009754 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00009bb4 l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00009d14 l     F .text	0000003c alt_get_errno
00009d50 l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
0000aeb4 g     O .bss	00000004 alt_instruction_exception_handler
00009050 g     F .text	0000007c alt_main
0000aeb8 g     O .bss	00000100 alt_irq
0000abb8 g       *ABS*	00000000 __flash_rwdata_start
0000865c g     F .text	0000004c printf
0000a1c0 g     F .text	00000024 altera_nios2_gen2_irq_init
00008000 g     F .entry	0000000c __reset
00008020 g       *ABS*	00000000 __flash_exceptions_start
0000ae98 g     O .bss	00000004 errno
0000aea0 g     O .bss	00000004 alt_argv
00012b8c g       *ABS*	00000000 _gp
0000aa0c g     O .rwdata	00000180 alt_fd_list
0000a1e4 g     F .text	00000090 alt_find_dev
00009c98 g     F .text	0000007c alt_io_redirect
0000a85c g       *ABS*	00000000 __DTOR_END__
0000a440 g     F .text	0000009c alt_exception_cause_generated_bad_addr
00009380 g     F .text	000000ec altera_avalon_jtag_uart_read
00008620 g     F .text	0000003c _printf_r
00008e80 g     F .text	00000064 .hidden __udivsi3
0000aba4 g     O .rwdata	00000004 alt_max_fd
0000ab8c g     O .rwdata	00000004 _global_impure_ptr
0000afb8 g       *ABS*	00000000 __bss_end
00009ac4 g     F .text	000000f0 alt_iic_isr_register
0000826c g     F .text	0000011c display
0000a0b8 g     F .text	00000108 alt_tick
00009a78 g     F .text	0000004c alt_ic_irq_enabled
0000a01c g     F .text	0000009c alt_alarm_stop
0000aea8 g     O .bss	00000004 alt_irq_active
000080fc g     F .exceptions	000000d4 alt_irq_handler
0000a9e4 g     O .rwdata	00000028 alt_dev_null
00009708 g     F .text	00000020 alt_dcache_flush_all
0000abb8 g       *ABS*	00000000 __ram_rwdata_end
00008000 g       *ABS*	00000000 __alt_mem_onchip_memory
0000ab9c g     O .rwdata	00000008 alt_dev_list
00009108 g     F .text	00000100 write
0000a8d8 g       *ABS*	00000000 __ram_rodata_end
00008ee4 g     F .text	00000058 .hidden __umodsi3
0000afb8 g       *ABS*	00000000 end
000081d0 g     F .exceptions	00000060 alt_instruction_exception_entry
0000a85c g       *ABS*	00000000 __CTOR_LIST__
0000d000 g       *ABS*	00000000 __alt_stack_pointer
00009578 g     F .text	0000007c alt_avalon_timer_sc_init
0000946c g     F .text	00000094 altera_avalon_jtag_uart_write
00008714 g     F .text	0000052c ___vfprintf_internal_r
0000a698 g     F .text	00000190 __call_exitprocs
00008230 g     F .text	0000003c _start
0000aeac g     O .bss	00000004 _alt_tick_rate
0000aeb0 g     O .bss	00000004 _alt_nticks
00009274 g     F .text	0000004c alt_sys_init
0000a540 g     F .text	00000158 __register_exitproc
00008f3c g     F .text	00000028 .hidden __mulsi3
0000a8d8 g       *ABS*	00000000 __ram_rwdata_start
0000a85c g       *ABS*	00000000 __ram_rodata_start
000092c0 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0000a37c g     F .text	000000c4 alt_get_fd
0000a510 g     F .text	00000030 memcmp
0000afb8 g       *ABS*	00000000 __alt_stack_base
0000a274 g     F .text	00000108 alt_find_file
00009790 g     F .text	000000a4 alt_dev_llist_insert
00008c5c g     F .text	000000b8 __sfvwrite_small_dev
0000ae98 g       *ABS*	00000000 __bss_start
00008388 g     F .text	00000298 main
0000aea4 g     O .bss	00000004 alt_envp
00009320 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0000aba8 g     O .rwdata	00000004 alt_errno
00008d88 g     F .text	00000084 .hidden __divsi3
0000a85c g       *ABS*	00000000 __CTOR_END__
0000a85c g       *ABS*	00000000 __flash_rodata_start
0000a85c g       *ABS*	00000000 __DTOR_LIST__
0000923c g     F .text	00000038 alt_irq_init
00009f98 g     F .text	00000084 alt_release_fd
0000a4dc g     F .text	00000014 atexit
00008d30 g     F .text	00000058 _write_r
0000ab90 g     O .rwdata	00000004 _impure_ptr
0000ae9c g     O .bss	00000004 alt_argc
00009894 g     F .text	00000060 _do_dtors
00008020 g       .exceptions	00000000 alt_irq_entry
0000ab94 g     O .rwdata	00000008 alt_fs_list
00008020 g       *ABS*	00000000 __ram_exceptions_start
00009914 g     F .text	00000050 alt_ic_isr_register
0000abb8 g       *ABS*	00000000 _edata
0000afb8 g       *ABS*	00000000 _end
00008230 g       *ABS*	00000000 __ram_exceptions_end
000099ec g     F .text	0000008c alt_ic_irq_disable
0000a4f0 g     F .text	00000020 exit
00008e0c g     F .text	00000074 .hidden __modsi3
0000d000 g       *ABS*	00000000 __alt_data_end
00008020 g     F .exceptions	00000000 alt_exception
0000a828 g     F .text	00000034 _exit
00008d14 g     F .text	0000001c strlen
00009e3c g     F .text	0000015c open
000098f4 g     F .text	00000020 alt_icache_flush_all
0000abac g     O .rwdata	00000004 alt_priority_mask
00009964 g     F .text	00000088 alt_ic_irq_enable
00008c40 g     F .text	0000001c __vfprintf_internal
0000abb0 g     O .rwdata	00000008 alt_alarm_list
00009834 g     F .text	00000060 _do_ctors
00009630 g     F .text	000000d8 close
00008fcc g     F .text	00000084 alt_load



Disassembly of section .entry:

00008000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
    8000:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
    8004:	08608c14 	ori	at,at,33328
    jmp r1
    8008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00008020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
    8020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
    8024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
    8028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
    802c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
    8030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
    8034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
    8038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
    803c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
    8040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
    8044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
    8048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
    804c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
    8050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
    8054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
    8058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
    805c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
    8060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
    8064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
    8068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
    806c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
    8070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
    8074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
    8078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
    807c:	10000326 	beq	r2,zero,808c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
    8080:	20000226 	beq	r4,zero,808c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
    8084:	00080fc0 	call	80fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
    8088:	00000706 	br	80a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
    808c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
    8090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
    8094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
    8098:	00081d00 	call	81d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
    809c:	1000021e 	bne	r2,zero,80a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
    80a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
    80a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
    80a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
    80ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
    80b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
    80b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
    80b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
    80bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
    80c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
    80c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
    80c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
    80cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
    80d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
    80d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
    80d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
    80dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
    80e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
    80e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
    80e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
    80ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
    80f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
    80f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
    80f8:	ef80083a 	eret

000080fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
    80fc:	defff904 	addi	sp,sp,-28
    8100:	dfc00615 	stw	ra,24(sp)
    8104:	df000515 	stw	fp,20(sp)
    8108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
    810c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
    8110:	0005313a 	rdctl	r2,ipending
    8114:	e0bffe15 	stw	r2,-8(fp)

  return active;
    8118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
    811c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
    8120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
    8124:	00800044 	movi	r2,1
    8128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
    812c:	e0fffb17 	ldw	r3,-20(fp)
    8130:	e0bffc17 	ldw	r2,-16(fp)
    8134:	1884703a 	and	r2,r3,r2
    8138:	10001426 	beq	r2,zero,818c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
    813c:	00800074 	movhi	r2,1
    8140:	10abae04 	addi	r2,r2,-20808
    8144:	e0fffd17 	ldw	r3,-12(fp)
    8148:	180690fa 	slli	r3,r3,3
    814c:	10c5883a 	add	r2,r2,r3
    8150:	10c00017 	ldw	r3,0(r2)
    8154:	00800074 	movhi	r2,1
    8158:	10abae04 	addi	r2,r2,-20808
    815c:	e13ffd17 	ldw	r4,-12(fp)
    8160:	200890fa 	slli	r4,r4,3
    8164:	1105883a 	add	r2,r2,r4
    8168:	10800104 	addi	r2,r2,4
    816c:	10800017 	ldw	r2,0(r2)
    8170:	1009883a 	mov	r4,r2
    8174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
    8178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
    817c:	0005313a 	rdctl	r2,ipending
    8180:	e0bfff15 	stw	r2,-4(fp)

  return active;
    8184:	e0bfff17 	ldw	r2,-4(fp)
    8188:	00000706 	br	81a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
    818c:	e0bffc17 	ldw	r2,-16(fp)
    8190:	1085883a 	add	r2,r2,r2
    8194:	e0bffc15 	stw	r2,-16(fp)
      i++;
    8198:	e0bffd17 	ldw	r2,-12(fp)
    819c:	10800044 	addi	r2,r2,1
    81a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
    81a4:	003fe106 	br	812c <_gp+0xffff55a0>

    active = alt_irq_pending ();
    81a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
    81ac:	e0bffb17 	ldw	r2,-20(fp)
    81b0:	103fdb1e 	bne	r2,zero,8120 <_gp+0xffff5594>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
    81b4:	0001883a 	nop
}
    81b8:	0001883a 	nop
    81bc:	e037883a 	mov	sp,fp
    81c0:	dfc00117 	ldw	ra,4(sp)
    81c4:	df000017 	ldw	fp,0(sp)
    81c8:	dec00204 	addi	sp,sp,8
    81cc:	f800283a 	ret

000081d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
    81d0:	defffb04 	addi	sp,sp,-20
    81d4:	dfc00415 	stw	ra,16(sp)
    81d8:	df000315 	stw	fp,12(sp)
    81dc:	df000304 	addi	fp,sp,12
    81e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
    81e4:	00bfffc4 	movi	r2,-1
    81e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
    81ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
    81f0:	d0a0ca17 	ldw	r2,-31960(gp)
    81f4:	10000726 	beq	r2,zero,8214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
    81f8:	d0a0ca17 	ldw	r2,-31960(gp)
    81fc:	e0fffd17 	ldw	r3,-12(fp)
    8200:	e1bffe17 	ldw	r6,-8(fp)
    8204:	e17fff17 	ldw	r5,-4(fp)
    8208:	1809883a 	mov	r4,r3
    820c:	103ee83a 	callr	r2
    8210:	00000206 	br	821c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
    8214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
    8218:	0005883a 	mov	r2,zero
}
    821c:	e037883a 	mov	sp,fp
    8220:	dfc00117 	ldw	ra,4(sp)
    8224:	df000017 	ldw	fp,0(sp)
    8228:	dec00204 	addi	sp,sp,8
    822c:	f800283a 	ret

Disassembly of section .text:

00008230 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    8230:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
    8234:	def40014 	ori	sp,sp,53248
    movhi gp, %hi(_gp)
    8238:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
    823c:	d68ae314 	ori	gp,gp,11148
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    8240:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    8244:	10aba614 	ori	r2,r2,44696

    movhi r3, %hi(__bss_end)
    8248:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    824c:	18ebee14 	ori	r3,r3,44984

    beq r2, r3, 1f
    8250:	10c00326 	beq	r2,r3,8260 <_start+0x30>

0:
    stw zero, (r2)
    8254:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    8258:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    825c:	10fffd36 	bltu	r2,r3,8254 <_gp+0xffff56c8>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
    8260:	0008fcc0 	call	8fcc <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    8264:	00090500 	call	9050 <alt_main>

00008268 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    8268:	003fff06 	br	8268 <_gp+0xffff56dc>

0000826c <display>:
#include "system.h"
#include "altera_avalon_pio_regs.h"
#include <inttypes.h>

void display(int address, int number)
{
    826c:	defffc04 	addi	sp,sp,-16
    8270:	df000315 	stw	fp,12(sp)
    8274:	df000304 	addi	fp,sp,12
    8278:	e13ffe15 	stw	r4,-8(fp)
    827c:	e17fff15 	stw	r5,-4(fp)
	int hex = 0x0000000;
    8280:	e03ffd15 	stw	zero,-12(fp)
	if (number == 0)
    8284:	e0bfff17 	ldw	r2,-4(fp)
    8288:	1000031e 	bne	r2,zero,8298 <display+0x2c>
		hex = 64;
    828c:	00801004 	movi	r2,64
    8290:	e0bffd15 	stw	r2,-12(fp)
    8294:	00003406 	br	8368 <display+0xfc>
	else if (number == 1)
    8298:	e0bfff17 	ldw	r2,-4(fp)
    829c:	10800058 	cmpnei	r2,r2,1
    82a0:	1000031e 	bne	r2,zero,82b0 <display+0x44>
		hex = 121;
    82a4:	00801e44 	movi	r2,121
    82a8:	e0bffd15 	stw	r2,-12(fp)
    82ac:	00002e06 	br	8368 <display+0xfc>
	else if (number == 2)
    82b0:	e0bfff17 	ldw	r2,-4(fp)
    82b4:	10800098 	cmpnei	r2,r2,2
    82b8:	1000031e 	bne	r2,zero,82c8 <display+0x5c>
		hex = 36;
    82bc:	00800904 	movi	r2,36
    82c0:	e0bffd15 	stw	r2,-12(fp)
    82c4:	00002806 	br	8368 <display+0xfc>
	else if (number == 3)
    82c8:	e0bfff17 	ldw	r2,-4(fp)
    82cc:	108000d8 	cmpnei	r2,r2,3
    82d0:	1000031e 	bne	r2,zero,82e0 <display+0x74>
		hex = 48;
    82d4:	00800c04 	movi	r2,48
    82d8:	e0bffd15 	stw	r2,-12(fp)
    82dc:	00002206 	br	8368 <display+0xfc>
	else if (number == 4)
    82e0:	e0bfff17 	ldw	r2,-4(fp)
    82e4:	10800118 	cmpnei	r2,r2,4
    82e8:	1000031e 	bne	r2,zero,82f8 <display+0x8c>
		hex = 25;
    82ec:	00800644 	movi	r2,25
    82f0:	e0bffd15 	stw	r2,-12(fp)
    82f4:	00001c06 	br	8368 <display+0xfc>
	else if (number == 5)
    82f8:	e0bfff17 	ldw	r2,-4(fp)
    82fc:	10800158 	cmpnei	r2,r2,5
    8300:	1000031e 	bne	r2,zero,8310 <display+0xa4>
		hex = 18;
    8304:	00800484 	movi	r2,18
    8308:	e0bffd15 	stw	r2,-12(fp)
    830c:	00001606 	br	8368 <display+0xfc>
	else if (number == 6)
    8310:	e0bfff17 	ldw	r2,-4(fp)
    8314:	10800198 	cmpnei	r2,r2,6
    8318:	1000031e 	bne	r2,zero,8328 <display+0xbc>
		hex = 2;
    831c:	00800084 	movi	r2,2
    8320:	e0bffd15 	stw	r2,-12(fp)
    8324:	00001006 	br	8368 <display+0xfc>
	else if (number == 7)
    8328:	e0bfff17 	ldw	r2,-4(fp)
    832c:	108001d8 	cmpnei	r2,r2,7
    8330:	1000031e 	bne	r2,zero,8340 <display+0xd4>
		hex = 120;
    8334:	00801e04 	movi	r2,120
    8338:	e0bffd15 	stw	r2,-12(fp)
    833c:	00000a06 	br	8368 <display+0xfc>
	else if (number == 8)
    8340:	e0bfff17 	ldw	r2,-4(fp)
    8344:	10800218 	cmpnei	r2,r2,8
    8348:	1000021e 	bne	r2,zero,8354 <display+0xe8>
		hex = 0;
    834c:	e03ffd15 	stw	zero,-12(fp)
    8350:	00000506 	br	8368 <display+0xfc>
	else if (number == 9)
    8354:	e0bfff17 	ldw	r2,-4(fp)
    8358:	10800258 	cmpnei	r2,r2,9
    835c:	1000021e 	bne	r2,zero,8368 <display+0xfc>
		hex = 16;
    8360:	00800404 	movi	r2,16
    8364:	e0bffd15 	stw	r2,-12(fp)


	IOWR_ALTERA_AVALON_PIO_DATA(address, hex);
    8368:	e0bffe17 	ldw	r2,-8(fp)
    836c:	e0fffd17 	ldw	r3,-12(fp)
    8370:	10c00035 	stwio	r3,0(r2)
}
    8374:	0001883a 	nop
    8378:	e037883a 	mov	sp,fp
    837c:	df000017 	ldw	fp,0(sp)
    8380:	dec00104 	addi	sp,sp,4
    8384:	f800283a 	ret

00008388 <main>:

int main()
{
    8388:	defff404 	addi	sp,sp,-48
    838c:	dfc00b15 	stw	ra,44(sp)
    8390:	df000a15 	stw	fp,40(sp)
    8394:	dc400915 	stw	r17,36(sp)
    8398:	dc000815 	stw	r16,32(sp)
    839c:	df000a04 	addi	fp,sp,40
	uint64_t peakValue = 0;
    83a0:	e03ff615 	stw	zero,-40(fp)
    83a4:	e03ff715 	stw	zero,-36(fp)
	uint8_t sent = 0;
    83a8:	e03ff805 	stb	zero,-32(fp)
	uint8_t count = 0;
    83ac:	e03ff845 	stb	zero,-31(fp)
	uint8_t incomplete_half = 0;
    83b0:	e03ff885 	stb	zero,-30(fp)
	IOWR_ALTERA_AVALON_PIO_DATA(HEX0_BASE, 0);
    83b4:	0007883a 	mov	r3,zero
    83b8:	00800074 	movhi	r2,1
    83bc:	10842c04 	addi	r2,r2,4272
    83c0:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_PIO_DATA(HEX1_BASE, 0);
    83c4:	0007883a 	mov	r3,zero
    83c8:	00800074 	movhi	r2,1
    83cc:	10842804 	addi	r2,r2,4256
    83d0:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_PIO_DATA(HEX2_BASE, 0);
    83d4:	0007883a 	mov	r3,zero
    83d8:	00800074 	movhi	r2,1
    83dc:	10842404 	addi	r2,r2,4240
    83e0:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_PIO_DATA(HEX3_BASE, 0);
    83e4:	0007883a 	mov	r3,zero
    83e8:	00800074 	movhi	r2,1
    83ec:	10842004 	addi	r2,r2,4224
    83f0:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_PIO_DATA(HEX4_BASE, 0);
    83f4:	0007883a 	mov	r3,zero
    83f8:	00800074 	movhi	r2,1
    83fc:	10841c04 	addi	r2,r2,4208
    8400:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_PIO_DATA(HEX5_BASE, 0);
    8404:	0007883a 	mov	r3,zero
    8408:	00800074 	movhi	r2,1
    840c:	10841804 	addi	r2,r2,4192
    8410:	10c00035 	stwio	r3,0(r2)
	while(1)
	{
		if (count < 5)
    8414:	e0bff843 	ldbu	r2,-31(fp)
    8418:	10800168 	cmpgeui	r2,r2,5
    841c:	103ffd1e 	bne	r2,zero,8414 <_gp+0xffff5888>
		{
			volatile uint32_t recvData = IORD_ALTERA_AVALON_PIO_DATA(TDMA_RECV_DATA_BASE);
    8420:	00800074 	movhi	r2,1
    8424:	10841004 	addi	r2,r2,4160
    8428:	10800037 	ldwio	r2,0(r2)
    842c:	e0bffd15 	stw	r2,-12(fp)
			IOWR_ALTERA_AVALON_PIO_DATA(HEX0_BASE, 15);
    8430:	00c003c4 	movi	r3,15
    8434:	00800074 	movhi	r2,1
    8438:	10842c04 	addi	r2,r2,4272
    843c:	10c00035 	stwio	r3,0(r2)
			if ((((recvData >> 28) & 0xF) == 0b1000)) // Is Data Packet
    8440:	e0bffd17 	ldw	r2,-12(fp)
    8444:	1004d73a 	srli	r2,r2,28
    8448:	10800218 	cmpnei	r2,r2,8
    844c:	103ff11e 	bne	r2,zero,8414 <_gp+0xffff5888>
			{
				IOWR_ALTERA_AVALON_PIO_DATA(HEX1_BASE, 15);
    8450:	00c003c4 	movi	r3,15
    8454:	00800074 	movhi	r2,1
    8458:	10842804 	addi	r2,r2,4256
    845c:	10c00035 	stwio	r3,0(r2)
				uint16_t id = ((recvData >> 20) & 0xF);
    8460:	e0bffd17 	ldw	r2,-12(fp)
    8464:	1004d53a 	srli	r2,r2,20
    8468:	108003cc 	andi	r2,r2,15
    846c:	e0bff90d 	sth	r2,-28(fp)
				if (id == 0b0111 && sent == 0) // From Peak Detecting
    8470:	e0bff90b 	ldhu	r2,-28(fp)
    8474:	108001d8 	cmpnei	r2,r2,7
    8478:	1000291e 	bne	r2,zero,8520 <main+0x198>
    847c:	e0bff803 	ldbu	r2,-32(fp)
    8480:	1000271e 	bne	r2,zero,8520 <main+0x198>
				{
					IOWR_ALTERA_AVALON_PIO_DATA(HEX2_BASE, 15);
    8484:	00c003c4 	movi	r3,15
    8488:	00800074 	movhi	r2,1
    848c:	10842404 	addi	r2,r2,4240
    8490:	10c00035 	stwio	r3,0(r2)
					uint8_t peakDetected = (recvData >> 18) & 1; // 18
    8494:	e0bffd17 	ldw	r2,-12(fp)
    8498:	1004d4ba 	srli	r2,r2,18
    849c:	1080004c 	andi	r2,r2,1
    84a0:	e0bff985 	stb	r2,-26(fp)
					uint32_t corrCount = recvData & (0x3FFFF); // 17 downto 0
    84a4:	e0fffd17 	ldw	r3,-12(fp)
    84a8:	00800134 	movhi	r2,4
    84ac:	10bfffc4 	addi	r2,r2,-1
    84b0:	1884703a 	and	r2,r3,r2
    84b4:	e0bffa15 	stw	r2,-24(fp)
					printf("-----------------");
    84b8:	01000074 	movhi	r4,1
    84bc:	212a1704 	addi	r4,r4,-22436
    84c0:	000865c0 	call	865c <printf>
					printf("corrCount = %" PRIu32 "\n", corrCount);
    84c4:	e17ffa17 	ldw	r5,-24(fp)
    84c8:	01000074 	movhi	r4,1
    84cc:	212a1c04 	addi	r4,r4,-22416
    84d0:	000865c0 	call	865c <printf>

					if (peakDetected == 1) // A Peak is Detected, Request Peak Value
    84d4:	e0bff983 	ldbu	r2,-26(fp)
    84d8:	10800058 	cmpnei	r2,r2,1
    84dc:	10004e1e 	bne	r2,zero,8618 <main+0x290>
					{
						IOWR_ALTERA_AVALON_PIO_DATA(HEX3_BASE, 15);
    84e0:	00c003c4 	movi	r3,15
    84e4:	00800074 	movhi	r2,1
    84e8:	10842004 	addi	r2,r2,4224
    84ec:	10c00035 	stwio	r3,0(r2)
						IOWR_ALTERA_AVALON_PIO_DATA(TDMA_SEND_ADDR_BASE, 0b0100); // To Peak Detector
    84f0:	00c00104 	movi	r3,4
    84f4:	00800074 	movhi	r2,1
    84f8:	10840c04 	addi	r2,r2,4144
    84fc:	10c00035 	stwio	r3,0(r2)
						IOWR_ALTERA_AVALON_PIO_DATA(TDMA_SEND_DATA_BASE, (0b1000 << 28) | (0b0110 << 20) | 0b11); // 1000 (31~28), 0110 (23~20), 11 (1~0)
    8500:	00e01834 	movhi	r3,32864
    8504:	18c000c4 	addi	r3,r3,3
    8508:	00800074 	movhi	r2,1
    850c:	10840804 	addi	r2,r2,4128
    8510:	10c00035 	stwio	r3,0(r2)
						sent = 1;
    8514:	00800044 	movi	r2,1
    8518:	e0bff805 	stb	r2,-32(fp)
			if ((((recvData >> 28) & 0xF) == 0b1000)) // Is Data Packet
			{
				IOWR_ALTERA_AVALON_PIO_DATA(HEX1_BASE, 15);
				uint16_t id = ((recvData >> 20) & 0xF);
				if (id == 0b0111 && sent == 0) // From Peak Detecting
				{
    851c:	00003e06 	br	8618 <main+0x290>
						IOWR_ALTERA_AVALON_PIO_DATA(TDMA_SEND_ADDR_BASE, 0b0100); // To Peak Detector
						IOWR_ALTERA_AVALON_PIO_DATA(TDMA_SEND_DATA_BASE, (0b1000 << 28) | (0b0110 << 20) | 0b11); // 1000 (31~28), 0110 (23~20), 11 (1~0)
						sent = 1;
					}
				}
				else if (id == 0b1000) // From Peak Value
    8520:	e0bff90b 	ldhu	r2,-28(fp)
    8524:	10800218 	cmpnei	r2,r2,8
    8528:	103fba1e 	bne	r2,zero,8414 <_gp+0xffff5888>
				{
					uint16_t half = ((recvData >> 18) & 1);
    852c:	e0bffd17 	ldw	r2,-12(fp)
    8530:	1004d4ba 	srli	r2,r2,18
    8534:	1080004c 	andi	r2,r2,1
    8538:	e0bffb0d 	sth	r2,-20(fp)
					uint32_t value = (recvData & 0x3FFFF);
    853c:	e0fffd17 	ldw	r3,-12(fp)
    8540:	00800134 	movhi	r2,4
    8544:	10bfffc4 	addi	r2,r2,-1
    8548:	1884703a 	and	r2,r3,r2
    854c:	e0bffc15 	stw	r2,-16(fp)
					printf("Test = %" PRIu16 "\n", half);
    8550:	e0bffb0b 	ldhu	r2,-20(fp)
    8554:	100b883a 	mov	r5,r2
    8558:	01000074 	movhi	r4,1
    855c:	212a2104 	addi	r4,r4,-22396
    8560:	000865c0 	call	865c <printf>
					if (half == 0 && incomplete_half == 0) // First Half
    8564:	e0bffb0b 	ldhu	r2,-20(fp)
    8568:	10000d1e 	bne	r2,zero,85a0 <main+0x218>
    856c:	e0bff883 	ldbu	r2,-30(fp)
    8570:	10000b1e 	bne	r2,zero,85a0 <main+0x218>
					{
						IOWR_ALTERA_AVALON_PIO_DATA(HEX4_BASE, 15);
    8574:	00c003c4 	movi	r3,15
    8578:	00800074 	movhi	r2,1
    857c:	10841c04 	addi	r2,r2,4208
    8580:	10c00035 	stwio	r3,0(r2)
						peakValue = (value << 18); // 17 downto 0 -> 35 downto 18
    8584:	e0bffc17 	ldw	r2,-16(fp)
    8588:	100494ba 	slli	r2,r2,18
    858c:	e0bff615 	stw	r2,-40(fp)
    8590:	e03ff715 	stw	zero,-36(fp)
						incomplete_half = 1;
    8594:	00800044 	movi	r2,1
    8598:	e0bff885 	stb	r2,-30(fp)
    859c:	00001f06 	br	861c <main+0x294>
					}
					else if (half == 1 && incomplete_half == 1) // Second Half
    85a0:	e0bffb0b 	ldhu	r2,-20(fp)
    85a4:	10800058 	cmpnei	r2,r2,1
    85a8:	103f9a1e 	bne	r2,zero,8414 <_gp+0xffff5888>
    85ac:	e0bff883 	ldbu	r2,-30(fp)
    85b0:	10800058 	cmpnei	r2,r2,1
    85b4:	103f971e 	bne	r2,zero,8414 <_gp+0xffff5888>
					{
						IOWR_ALTERA_AVALON_PIO_DATA(HEX5_BASE, 15);
    85b8:	00c003c4 	movi	r3,15
    85bc:	00800074 	movhi	r2,1
    85c0:	10841804 	addi	r2,r2,4192
    85c4:	10c00035 	stwio	r3,0(r2)
						peakValue |= value; // 17 downto 0 -> 17 downto 0
    85c8:	e0bffc17 	ldw	r2,-16(fp)
    85cc:	1021883a 	mov	r16,r2
    85d0:	0023883a 	mov	r17,zero
    85d4:	e0bff617 	ldw	r2,-40(fp)
    85d8:	1404b03a 	or	r2,r2,r16
    85dc:	e0bff615 	stw	r2,-40(fp)
    85e0:	e0bff717 	ldw	r2,-36(fp)
    85e4:	1444b03a 	or	r2,r2,r17
    85e8:	e0bff715 	stw	r2,-36(fp)
						printf("Peak Value = %" PRIu64 "\n", peakValue);
    85ec:	e17ff617 	ldw	r5,-40(fp)
    85f0:	e1bff717 	ldw	r6,-36(fp)
    85f4:	01000074 	movhi	r4,1
    85f8:	212a2404 	addi	r4,r4,-22384
    85fc:	000865c0 	call	865c <printf>
						sent = 0;
    8600:	e03ff805 	stb	zero,-32(fp)
						count++;
    8604:	e0bff843 	ldbu	r2,-31(fp)
    8608:	10800044 	addi	r2,r2,1
    860c:	e0bff845 	stb	r2,-31(fp)
						incomplete_half = 0;
    8610:	e03ff885 	stb	zero,-30(fp)
    8614:	003f7f06 	br	8414 <_gp+0xffff5888>
			if ((((recvData >> 28) & 0xF) == 0b1000)) // Is Data Packet
			{
				IOWR_ALTERA_AVALON_PIO_DATA(HEX1_BASE, 15);
				uint16_t id = ((recvData >> 20) & 0xF);
				if (id == 0b0111 && sent == 0) // From Peak Detecting
				{
    8618:	0001883a 	nop
						incomplete_half = 0;
					}
				}
			}
		}
	}
    861c:	003f7d06 	br	8414 <_gp+0xffff5888>

00008620 <_printf_r>:
    8620:	defffd04 	addi	sp,sp,-12
    8624:	dfc00015 	stw	ra,0(sp)
    8628:	d9800115 	stw	r6,4(sp)
    862c:	d9c00215 	stw	r7,8(sp)
    8630:	20c00217 	ldw	r3,8(r4)
    8634:	01800074 	movhi	r6,1
    8638:	31a31704 	addi	r6,r6,-29604
    863c:	19800115 	stw	r6,4(r3)
    8640:	280d883a 	mov	r6,r5
    8644:	21400217 	ldw	r5,8(r4)
    8648:	d9c00104 	addi	r7,sp,4
    864c:	00087140 	call	8714 <___vfprintf_internal_r>
    8650:	dfc00017 	ldw	ra,0(sp)
    8654:	dec00304 	addi	sp,sp,12
    8658:	f800283a 	ret

0000865c <printf>:
    865c:	defffc04 	addi	sp,sp,-16
    8660:	dfc00015 	stw	ra,0(sp)
    8664:	d9400115 	stw	r5,4(sp)
    8668:	d9800215 	stw	r6,8(sp)
    866c:	d9c00315 	stw	r7,12(sp)
    8670:	00800074 	movhi	r2,1
    8674:	10aae404 	addi	r2,r2,-21616
    8678:	10800017 	ldw	r2,0(r2)
    867c:	01400074 	movhi	r5,1
    8680:	29631704 	addi	r5,r5,-29604
    8684:	10c00217 	ldw	r3,8(r2)
    8688:	d9800104 	addi	r6,sp,4
    868c:	19400115 	stw	r5,4(r3)
    8690:	200b883a 	mov	r5,r4
    8694:	11000217 	ldw	r4,8(r2)
    8698:	0008c400 	call	8c40 <__vfprintf_internal>
    869c:	dfc00017 	ldw	ra,0(sp)
    86a0:	dec00404 	addi	sp,sp,16
    86a4:	f800283a 	ret

000086a8 <print_repeat>:
    86a8:	defffb04 	addi	sp,sp,-20
    86ac:	dc800315 	stw	r18,12(sp)
    86b0:	dc400215 	stw	r17,8(sp)
    86b4:	dc000115 	stw	r16,4(sp)
    86b8:	dfc00415 	stw	ra,16(sp)
    86bc:	2025883a 	mov	r18,r4
    86c0:	2823883a 	mov	r17,r5
    86c4:	d9800005 	stb	r6,0(sp)
    86c8:	3821883a 	mov	r16,r7
    86cc:	04000a0e 	bge	zero,r16,86f8 <print_repeat+0x50>
    86d0:	88800117 	ldw	r2,4(r17)
    86d4:	01c00044 	movi	r7,1
    86d8:	d80d883a 	mov	r6,sp
    86dc:	880b883a 	mov	r5,r17
    86e0:	9009883a 	mov	r4,r18
    86e4:	103ee83a 	callr	r2
    86e8:	843fffc4 	addi	r16,r16,-1
    86ec:	103ff726 	beq	r2,zero,86cc <_gp+0xffff5b40>
    86f0:	00bfffc4 	movi	r2,-1
    86f4:	00000106 	br	86fc <print_repeat+0x54>
    86f8:	0005883a 	mov	r2,zero
    86fc:	dfc00417 	ldw	ra,16(sp)
    8700:	dc800317 	ldw	r18,12(sp)
    8704:	dc400217 	ldw	r17,8(sp)
    8708:	dc000117 	ldw	r16,4(sp)
    870c:	dec00504 	addi	sp,sp,20
    8710:	f800283a 	ret

00008714 <___vfprintf_internal_r>:
    8714:	deffe504 	addi	sp,sp,-108
    8718:	d8c00804 	addi	r3,sp,32
    871c:	ddc01815 	stw	r23,96(sp)
    8720:	dd801715 	stw	r22,92(sp)
    8724:	dd401615 	stw	r21,88(sp)
    8728:	dd001515 	stw	r20,84(sp)
    872c:	dcc01415 	stw	r19,80(sp)
    8730:	dc801315 	stw	r18,76(sp)
    8734:	dc401215 	stw	r17,72(sp)
    8738:	dc001115 	stw	r16,68(sp)
    873c:	dfc01a15 	stw	ra,104(sp)
    8740:	df001915 	stw	fp,100(sp)
    8744:	2029883a 	mov	r20,r4
    8748:	2823883a 	mov	r17,r5
    874c:	382d883a 	mov	r22,r7
    8750:	d9800f15 	stw	r6,60(sp)
    8754:	0021883a 	mov	r16,zero
    8758:	d8000e15 	stw	zero,56(sp)
    875c:	d8000a15 	stw	zero,40(sp)
    8760:	002b883a 	mov	r21,zero
    8764:	0027883a 	mov	r19,zero
    8768:	0025883a 	mov	r18,zero
    876c:	d8000c15 	stw	zero,48(sp)
    8770:	d8000b15 	stw	zero,44(sp)
    8774:	002f883a 	mov	r23,zero
    8778:	d8c00915 	stw	r3,36(sp)
    877c:	d8c00f17 	ldw	r3,60(sp)
    8780:	19000003 	ldbu	r4,0(r3)
    8784:	20803fcc 	andi	r2,r4,255
    8788:	1080201c 	xori	r2,r2,128
    878c:	10bfe004 	addi	r2,r2,-128
    8790:	10011e26 	beq	r2,zero,8c0c <___vfprintf_internal_r+0x4f8>
    8794:	00c00044 	movi	r3,1
    8798:	b8c01426 	beq	r23,r3,87ec <___vfprintf_internal_r+0xd8>
    879c:	1dc00216 	blt	r3,r23,87a8 <___vfprintf_internal_r+0x94>
    87a0:	b8000626 	beq	r23,zero,87bc <___vfprintf_internal_r+0xa8>
    87a4:	00011506 	br	8bfc <___vfprintf_internal_r+0x4e8>
    87a8:	01400084 	movi	r5,2
    87ac:	b9401d26 	beq	r23,r5,8824 <___vfprintf_internal_r+0x110>
    87b0:	014000c4 	movi	r5,3
    87b4:	b9402b26 	beq	r23,r5,8864 <___vfprintf_internal_r+0x150>
    87b8:	00011006 	br	8bfc <___vfprintf_internal_r+0x4e8>
    87bc:	01400944 	movi	r5,37
    87c0:	1140fc26 	beq	r2,r5,8bb4 <___vfprintf_internal_r+0x4a0>
    87c4:	88800117 	ldw	r2,4(r17)
    87c8:	d9000005 	stb	r4,0(sp)
    87cc:	01c00044 	movi	r7,1
    87d0:	d80d883a 	mov	r6,sp
    87d4:	880b883a 	mov	r5,r17
    87d8:	a009883a 	mov	r4,r20
    87dc:	103ee83a 	callr	r2
    87e0:	1000d81e 	bne	r2,zero,8b44 <___vfprintf_internal_r+0x430>
    87e4:	84000044 	addi	r16,r16,1
    87e8:	00010406 	br	8bfc <___vfprintf_internal_r+0x4e8>
    87ec:	01400c04 	movi	r5,48
    87f0:	1140fa26 	beq	r2,r5,8bdc <___vfprintf_internal_r+0x4c8>
    87f4:	01400944 	movi	r5,37
    87f8:	11400a1e 	bne	r2,r5,8824 <___vfprintf_internal_r+0x110>
    87fc:	d8800005 	stb	r2,0(sp)
    8800:	88800117 	ldw	r2,4(r17)
    8804:	b80f883a 	mov	r7,r23
    8808:	d80d883a 	mov	r6,sp
    880c:	880b883a 	mov	r5,r17
    8810:	a009883a 	mov	r4,r20
    8814:	103ee83a 	callr	r2
    8818:	1000ca1e 	bne	r2,zero,8b44 <___vfprintf_internal_r+0x430>
    881c:	84000044 	addi	r16,r16,1
    8820:	0000f506 	br	8bf8 <___vfprintf_internal_r+0x4e4>
    8824:	25fff404 	addi	r23,r4,-48
    8828:	bdc03fcc 	andi	r23,r23,255
    882c:	00c00244 	movi	r3,9
    8830:	1dc00936 	bltu	r3,r23,8858 <___vfprintf_internal_r+0x144>
    8834:	00bfffc4 	movi	r2,-1
    8838:	90800426 	beq	r18,r2,884c <___vfprintf_internal_r+0x138>
    883c:	01400284 	movi	r5,10
    8840:	9009883a 	mov	r4,r18
    8844:	0008f3c0 	call	8f3c <__mulsi3>
    8848:	00000106 	br	8850 <___vfprintf_internal_r+0x13c>
    884c:	0005883a 	mov	r2,zero
    8850:	b8a5883a 	add	r18,r23,r2
    8854:	0000e206 	br	8be0 <___vfprintf_internal_r+0x4cc>
    8858:	01400b84 	movi	r5,46
    885c:	1140e426 	beq	r2,r5,8bf0 <___vfprintf_internal_r+0x4dc>
    8860:	05c00084 	movi	r23,2
    8864:	213ff404 	addi	r4,r4,-48
    8868:	27003fcc 	andi	fp,r4,255
    886c:	00c00244 	movi	r3,9
    8870:	1f000936 	bltu	r3,fp,8898 <___vfprintf_internal_r+0x184>
    8874:	00bfffc4 	movi	r2,-1
    8878:	98800426 	beq	r19,r2,888c <___vfprintf_internal_r+0x178>
    887c:	01400284 	movi	r5,10
    8880:	9809883a 	mov	r4,r19
    8884:	0008f3c0 	call	8f3c <__mulsi3>
    8888:	00000106 	br	8890 <___vfprintf_internal_r+0x17c>
    888c:	0005883a 	mov	r2,zero
    8890:	e0a7883a 	add	r19,fp,r2
    8894:	0000d906 	br	8bfc <___vfprintf_internal_r+0x4e8>
    8898:	00c01b04 	movi	r3,108
    889c:	10c0d226 	beq	r2,r3,8be8 <___vfprintf_internal_r+0x4d4>
    88a0:	013fffc4 	movi	r4,-1
    88a4:	99000226 	beq	r19,r4,88b0 <___vfprintf_internal_r+0x19c>
    88a8:	d8000b15 	stw	zero,44(sp)
    88ac:	00000106 	br	88b4 <___vfprintf_internal_r+0x1a0>
    88b0:	04c00044 	movi	r19,1
    88b4:	01001a44 	movi	r4,105
    88b8:	11001626 	beq	r2,r4,8914 <___vfprintf_internal_r+0x200>
    88bc:	20800916 	blt	r4,r2,88e4 <___vfprintf_internal_r+0x1d0>
    88c0:	010018c4 	movi	r4,99
    88c4:	11008826 	beq	r2,r4,8ae8 <___vfprintf_internal_r+0x3d4>
    88c8:	01001904 	movi	r4,100
    88cc:	11001126 	beq	r2,r4,8914 <___vfprintf_internal_r+0x200>
    88d0:	01001604 	movi	r4,88
    88d4:	1100c81e 	bne	r2,r4,8bf8 <___vfprintf_internal_r+0x4e4>
    88d8:	00c00044 	movi	r3,1
    88dc:	d8c00e15 	stw	r3,56(sp)
    88e0:	00001506 	br	8938 <___vfprintf_internal_r+0x224>
    88e4:	01001cc4 	movi	r4,115
    88e8:	11009826 	beq	r2,r4,8b4c <___vfprintf_internal_r+0x438>
    88ec:	20800416 	blt	r4,r2,8900 <___vfprintf_internal_r+0x1ec>
    88f0:	01001bc4 	movi	r4,111
    88f4:	1100c01e 	bne	r2,r4,8bf8 <___vfprintf_internal_r+0x4e4>
    88f8:	05400204 	movi	r21,8
    88fc:	00000f06 	br	893c <___vfprintf_internal_r+0x228>
    8900:	01001d44 	movi	r4,117
    8904:	11000d26 	beq	r2,r4,893c <___vfprintf_internal_r+0x228>
    8908:	01001e04 	movi	r4,120
    890c:	11000a26 	beq	r2,r4,8938 <___vfprintf_internal_r+0x224>
    8910:	0000b906 	br	8bf8 <___vfprintf_internal_r+0x4e4>
    8914:	d8c00a17 	ldw	r3,40(sp)
    8918:	b7000104 	addi	fp,r22,4
    891c:	18000726 	beq	r3,zero,893c <___vfprintf_internal_r+0x228>
    8920:	df000d15 	stw	fp,52(sp)
    8924:	b5c00017 	ldw	r23,0(r22)
    8928:	b800080e 	bge	r23,zero,894c <___vfprintf_internal_r+0x238>
    892c:	05efc83a 	sub	r23,zero,r23
    8930:	02400044 	movi	r9,1
    8934:	00000606 	br	8950 <___vfprintf_internal_r+0x23c>
    8938:	05400404 	movi	r21,16
    893c:	b0c00104 	addi	r3,r22,4
    8940:	d8c00d15 	stw	r3,52(sp)
    8944:	b5c00017 	ldw	r23,0(r22)
    8948:	d8000a15 	stw	zero,40(sp)
    894c:	0013883a 	mov	r9,zero
    8950:	d839883a 	mov	fp,sp
    8954:	b8001726 	beq	r23,zero,89b4 <___vfprintf_internal_r+0x2a0>
    8958:	a80b883a 	mov	r5,r21
    895c:	b809883a 	mov	r4,r23
    8960:	da401015 	stw	r9,64(sp)
    8964:	0008e800 	call	8e80 <__udivsi3>
    8968:	a80b883a 	mov	r5,r21
    896c:	1009883a 	mov	r4,r2
    8970:	102d883a 	mov	r22,r2
    8974:	0008f3c0 	call	8f3c <__mulsi3>
    8978:	b885c83a 	sub	r2,r23,r2
    897c:	00c00244 	movi	r3,9
    8980:	da401017 	ldw	r9,64(sp)
    8984:	18800216 	blt	r3,r2,8990 <___vfprintf_internal_r+0x27c>
    8988:	10800c04 	addi	r2,r2,48
    898c:	00000506 	br	89a4 <___vfprintf_internal_r+0x290>
    8990:	d8c00e17 	ldw	r3,56(sp)
    8994:	18000226 	beq	r3,zero,89a0 <___vfprintf_internal_r+0x28c>
    8998:	10800dc4 	addi	r2,r2,55
    899c:	00000106 	br	89a4 <___vfprintf_internal_r+0x290>
    89a0:	108015c4 	addi	r2,r2,87
    89a4:	e0800005 	stb	r2,0(fp)
    89a8:	b02f883a 	mov	r23,r22
    89ac:	e7000044 	addi	fp,fp,1
    89b0:	003fe806 	br	8954 <_gp+0xffff5dc8>
    89b4:	e6efc83a 	sub	r23,fp,sp
    89b8:	9dc5c83a 	sub	r2,r19,r23
    89bc:	0080090e 	bge	zero,r2,89e4 <___vfprintf_internal_r+0x2d0>
    89c0:	e085883a 	add	r2,fp,r2
    89c4:	01400c04 	movi	r5,48
    89c8:	d8c00917 	ldw	r3,36(sp)
    89cc:	e009883a 	mov	r4,fp
    89d0:	e0c0032e 	bgeu	fp,r3,89e0 <___vfprintf_internal_r+0x2cc>
    89d4:	e7000044 	addi	fp,fp,1
    89d8:	21400005 	stb	r5,0(r4)
    89dc:	e0bffa1e 	bne	fp,r2,89c8 <_gp+0xffff5e3c>
    89e0:	e6efc83a 	sub	r23,fp,sp
    89e4:	d8c00b17 	ldw	r3,44(sp)
    89e8:	4dd1883a 	add	r8,r9,r23
    89ec:	922dc83a 	sub	r22,r18,r8
    89f0:	18001626 	beq	r3,zero,8a4c <___vfprintf_internal_r+0x338>
    89f4:	48000a26 	beq	r9,zero,8a20 <___vfprintf_internal_r+0x30c>
    89f8:	00800b44 	movi	r2,45
    89fc:	d8800805 	stb	r2,32(sp)
    8a00:	88800117 	ldw	r2,4(r17)
    8a04:	01c00044 	movi	r7,1
    8a08:	d9800804 	addi	r6,sp,32
    8a0c:	880b883a 	mov	r5,r17
    8a10:	a009883a 	mov	r4,r20
    8a14:	103ee83a 	callr	r2
    8a18:	10004a1e 	bne	r2,zero,8b44 <___vfprintf_internal_r+0x430>
    8a1c:	84000044 	addi	r16,r16,1
    8a20:	0580070e 	bge	zero,r22,8a40 <___vfprintf_internal_r+0x32c>
    8a24:	b00f883a 	mov	r7,r22
    8a28:	01800c04 	movi	r6,48
    8a2c:	880b883a 	mov	r5,r17
    8a30:	a009883a 	mov	r4,r20
    8a34:	00086a80 	call	86a8 <print_repeat>
    8a38:	1000421e 	bne	r2,zero,8b44 <___vfprintf_internal_r+0x430>
    8a3c:	85a1883a 	add	r16,r16,r22
    8a40:	e02d883a 	mov	r22,fp
    8a44:	bf2fc83a 	sub	r23,r23,fp
    8a48:	00002006 	br	8acc <___vfprintf_internal_r+0x3b8>
    8a4c:	0580090e 	bge	zero,r22,8a74 <___vfprintf_internal_r+0x360>
    8a50:	b00f883a 	mov	r7,r22
    8a54:	01800804 	movi	r6,32
    8a58:	880b883a 	mov	r5,r17
    8a5c:	a009883a 	mov	r4,r20
    8a60:	da401015 	stw	r9,64(sp)
    8a64:	00086a80 	call	86a8 <print_repeat>
    8a68:	da401017 	ldw	r9,64(sp)
    8a6c:	1000351e 	bne	r2,zero,8b44 <___vfprintf_internal_r+0x430>
    8a70:	85a1883a 	add	r16,r16,r22
    8a74:	483ff226 	beq	r9,zero,8a40 <_gp+0xffff5eb4>
    8a78:	00800b44 	movi	r2,45
    8a7c:	d8800805 	stb	r2,32(sp)
    8a80:	88800117 	ldw	r2,4(r17)
    8a84:	01c00044 	movi	r7,1
    8a88:	d9800804 	addi	r6,sp,32
    8a8c:	880b883a 	mov	r5,r17
    8a90:	a009883a 	mov	r4,r20
    8a94:	103ee83a 	callr	r2
    8a98:	10002a1e 	bne	r2,zero,8b44 <___vfprintf_internal_r+0x430>
    8a9c:	84000044 	addi	r16,r16,1
    8aa0:	003fe706 	br	8a40 <_gp+0xffff5eb4>
    8aa4:	b5bfffc4 	addi	r22,r22,-1
    8aa8:	b0800003 	ldbu	r2,0(r22)
    8aac:	01c00044 	movi	r7,1
    8ab0:	d9800804 	addi	r6,sp,32
    8ab4:	d8800805 	stb	r2,32(sp)
    8ab8:	88800117 	ldw	r2,4(r17)
    8abc:	880b883a 	mov	r5,r17
    8ac0:	a009883a 	mov	r4,r20
    8ac4:	103ee83a 	callr	r2
    8ac8:	10001e1e 	bne	r2,zero,8b44 <___vfprintf_internal_r+0x430>
    8acc:	8585c83a 	sub	r2,r16,r22
    8ad0:	b5c9883a 	add	r4,r22,r23
    8ad4:	e085883a 	add	r2,fp,r2
    8ad8:	013ff216 	blt	zero,r4,8aa4 <_gp+0xffff5f18>
    8adc:	1021883a 	mov	r16,r2
    8ae0:	dd800d17 	ldw	r22,52(sp)
    8ae4:	00004406 	br	8bf8 <___vfprintf_internal_r+0x4e4>
    8ae8:	00800044 	movi	r2,1
    8aec:	1480080e 	bge	r2,r18,8b10 <___vfprintf_internal_r+0x3fc>
    8af0:	95ffffc4 	addi	r23,r18,-1
    8af4:	b80f883a 	mov	r7,r23
    8af8:	01800804 	movi	r6,32
    8afc:	880b883a 	mov	r5,r17
    8b00:	a009883a 	mov	r4,r20
    8b04:	00086a80 	call	86a8 <print_repeat>
    8b08:	10000e1e 	bne	r2,zero,8b44 <___vfprintf_internal_r+0x430>
    8b0c:	85e1883a 	add	r16,r16,r23
    8b10:	b0800017 	ldw	r2,0(r22)
    8b14:	01c00044 	movi	r7,1
    8b18:	d80d883a 	mov	r6,sp
    8b1c:	d8800005 	stb	r2,0(sp)
    8b20:	88800117 	ldw	r2,4(r17)
    8b24:	880b883a 	mov	r5,r17
    8b28:	a009883a 	mov	r4,r20
    8b2c:	b5c00104 	addi	r23,r22,4
    8b30:	103ee83a 	callr	r2
    8b34:	1000031e 	bne	r2,zero,8b44 <___vfprintf_internal_r+0x430>
    8b38:	84000044 	addi	r16,r16,1
    8b3c:	b82d883a 	mov	r22,r23
    8b40:	00002d06 	br	8bf8 <___vfprintf_internal_r+0x4e4>
    8b44:	00bfffc4 	movi	r2,-1
    8b48:	00003106 	br	8c10 <___vfprintf_internal_r+0x4fc>
    8b4c:	b5c00017 	ldw	r23,0(r22)
    8b50:	b7000104 	addi	fp,r22,4
    8b54:	b809883a 	mov	r4,r23
    8b58:	0008d140 	call	8d14 <strlen>
    8b5c:	9091c83a 	sub	r8,r18,r2
    8b60:	102d883a 	mov	r22,r2
    8b64:	0200090e 	bge	zero,r8,8b8c <___vfprintf_internal_r+0x478>
    8b68:	400f883a 	mov	r7,r8
    8b6c:	01800804 	movi	r6,32
    8b70:	880b883a 	mov	r5,r17
    8b74:	a009883a 	mov	r4,r20
    8b78:	da001015 	stw	r8,64(sp)
    8b7c:	00086a80 	call	86a8 <print_repeat>
    8b80:	da001017 	ldw	r8,64(sp)
    8b84:	103fef1e 	bne	r2,zero,8b44 <_gp+0xffff5fb8>
    8b88:	8221883a 	add	r16,r16,r8
    8b8c:	88800117 	ldw	r2,4(r17)
    8b90:	b00f883a 	mov	r7,r22
    8b94:	b80d883a 	mov	r6,r23
    8b98:	880b883a 	mov	r5,r17
    8b9c:	a009883a 	mov	r4,r20
    8ba0:	103ee83a 	callr	r2
    8ba4:	103fe71e 	bne	r2,zero,8b44 <_gp+0xffff5fb8>
    8ba8:	85a1883a 	add	r16,r16,r22
    8bac:	e02d883a 	mov	r22,fp
    8bb0:	00001106 	br	8bf8 <___vfprintf_internal_r+0x4e4>
    8bb4:	00c00044 	movi	r3,1
    8bb8:	04ffffc4 	movi	r19,-1
    8bbc:	d8000e15 	stw	zero,56(sp)
    8bc0:	d8c00a15 	stw	r3,40(sp)
    8bc4:	05400284 	movi	r21,10
    8bc8:	9825883a 	mov	r18,r19
    8bcc:	d8000c15 	stw	zero,48(sp)
    8bd0:	d8000b15 	stw	zero,44(sp)
    8bd4:	182f883a 	mov	r23,r3
    8bd8:	00000806 	br	8bfc <___vfprintf_internal_r+0x4e8>
    8bdc:	ddc00b15 	stw	r23,44(sp)
    8be0:	05c00084 	movi	r23,2
    8be4:	00000506 	br	8bfc <___vfprintf_internal_r+0x4e8>
    8be8:	00c00044 	movi	r3,1
    8bec:	d8c00c15 	stw	r3,48(sp)
    8bf0:	05c000c4 	movi	r23,3
    8bf4:	00000106 	br	8bfc <___vfprintf_internal_r+0x4e8>
    8bf8:	002f883a 	mov	r23,zero
    8bfc:	d8c00f17 	ldw	r3,60(sp)
    8c00:	18c00044 	addi	r3,r3,1
    8c04:	d8c00f15 	stw	r3,60(sp)
    8c08:	003edc06 	br	877c <_gp+0xffff5bf0>
    8c0c:	8005883a 	mov	r2,r16
    8c10:	dfc01a17 	ldw	ra,104(sp)
    8c14:	df001917 	ldw	fp,100(sp)
    8c18:	ddc01817 	ldw	r23,96(sp)
    8c1c:	dd801717 	ldw	r22,92(sp)
    8c20:	dd401617 	ldw	r21,88(sp)
    8c24:	dd001517 	ldw	r20,84(sp)
    8c28:	dcc01417 	ldw	r19,80(sp)
    8c2c:	dc801317 	ldw	r18,76(sp)
    8c30:	dc401217 	ldw	r17,72(sp)
    8c34:	dc001117 	ldw	r16,68(sp)
    8c38:	dec01b04 	addi	sp,sp,108
    8c3c:	f800283a 	ret

00008c40 <__vfprintf_internal>:
    8c40:	00800074 	movhi	r2,1
    8c44:	10aae404 	addi	r2,r2,-21616
    8c48:	300f883a 	mov	r7,r6
    8c4c:	280d883a 	mov	r6,r5
    8c50:	200b883a 	mov	r5,r4
    8c54:	11000017 	ldw	r4,0(r2)
    8c58:	00087141 	jmpi	8714 <___vfprintf_internal_r>

00008c5c <__sfvwrite_small_dev>:
    8c5c:	2880000b 	ldhu	r2,0(r5)
    8c60:	1080020c 	andi	r2,r2,8
    8c64:	10002126 	beq	r2,zero,8cec <__sfvwrite_small_dev+0x90>
    8c68:	2880008f 	ldh	r2,2(r5)
    8c6c:	defffa04 	addi	sp,sp,-24
    8c70:	dc000015 	stw	r16,0(sp)
    8c74:	dfc00515 	stw	ra,20(sp)
    8c78:	dd000415 	stw	r20,16(sp)
    8c7c:	dcc00315 	stw	r19,12(sp)
    8c80:	dc800215 	stw	r18,8(sp)
    8c84:	dc400115 	stw	r17,4(sp)
    8c88:	2821883a 	mov	r16,r5
    8c8c:	10001216 	blt	r2,zero,8cd8 <__sfvwrite_small_dev+0x7c>
    8c90:	2027883a 	mov	r19,r4
    8c94:	3025883a 	mov	r18,r6
    8c98:	3823883a 	mov	r17,r7
    8c9c:	05010004 	movi	r20,1024
    8ca0:	04400b0e 	bge	zero,r17,8cd0 <__sfvwrite_small_dev+0x74>
    8ca4:	880f883a 	mov	r7,r17
    8ca8:	a440010e 	bge	r20,r17,8cb0 <__sfvwrite_small_dev+0x54>
    8cac:	01c10004 	movi	r7,1024
    8cb0:	8140008f 	ldh	r5,2(r16)
    8cb4:	900d883a 	mov	r6,r18
    8cb8:	9809883a 	mov	r4,r19
    8cbc:	0008d300 	call	8d30 <_write_r>
    8cc0:	0080050e 	bge	zero,r2,8cd8 <__sfvwrite_small_dev+0x7c>
    8cc4:	88a3c83a 	sub	r17,r17,r2
    8cc8:	90a5883a 	add	r18,r18,r2
    8ccc:	003ff406 	br	8ca0 <_gp+0xffff6114>
    8cd0:	0005883a 	mov	r2,zero
    8cd4:	00000706 	br	8cf4 <__sfvwrite_small_dev+0x98>
    8cd8:	8080000b 	ldhu	r2,0(r16)
    8cdc:	10801014 	ori	r2,r2,64
    8ce0:	8080000d 	sth	r2,0(r16)
    8ce4:	00bfffc4 	movi	r2,-1
    8ce8:	00000206 	br	8cf4 <__sfvwrite_small_dev+0x98>
    8cec:	00bfffc4 	movi	r2,-1
    8cf0:	f800283a 	ret
    8cf4:	dfc00517 	ldw	ra,20(sp)
    8cf8:	dd000417 	ldw	r20,16(sp)
    8cfc:	dcc00317 	ldw	r19,12(sp)
    8d00:	dc800217 	ldw	r18,8(sp)
    8d04:	dc400117 	ldw	r17,4(sp)
    8d08:	dc000017 	ldw	r16,0(sp)
    8d0c:	dec00604 	addi	sp,sp,24
    8d10:	f800283a 	ret

00008d14 <strlen>:
    8d14:	2005883a 	mov	r2,r4
    8d18:	10c00007 	ldb	r3,0(r2)
    8d1c:	18000226 	beq	r3,zero,8d28 <strlen+0x14>
    8d20:	10800044 	addi	r2,r2,1
    8d24:	003ffc06 	br	8d18 <_gp+0xffff618c>
    8d28:	1105c83a 	sub	r2,r2,r4
    8d2c:	f800283a 	ret

00008d30 <_write_r>:
    8d30:	defffd04 	addi	sp,sp,-12
    8d34:	dc000015 	stw	r16,0(sp)
    8d38:	04000074 	movhi	r16,1
    8d3c:	dc400115 	stw	r17,4(sp)
    8d40:	842ba604 	addi	r16,r16,-20840
    8d44:	2023883a 	mov	r17,r4
    8d48:	2809883a 	mov	r4,r5
    8d4c:	300b883a 	mov	r5,r6
    8d50:	380d883a 	mov	r6,r7
    8d54:	dfc00215 	stw	ra,8(sp)
    8d58:	80000015 	stw	zero,0(r16)
    8d5c:	00091080 	call	9108 <write>
    8d60:	00ffffc4 	movi	r3,-1
    8d64:	10c0031e 	bne	r2,r3,8d74 <_write_r+0x44>
    8d68:	80c00017 	ldw	r3,0(r16)
    8d6c:	18000126 	beq	r3,zero,8d74 <_write_r+0x44>
    8d70:	88c00015 	stw	r3,0(r17)
    8d74:	dfc00217 	ldw	ra,8(sp)
    8d78:	dc400117 	ldw	r17,4(sp)
    8d7c:	dc000017 	ldw	r16,0(sp)
    8d80:	dec00304 	addi	sp,sp,12
    8d84:	f800283a 	ret

00008d88 <__divsi3>:
    8d88:	20001b16 	blt	r4,zero,8df8 <__divsi3+0x70>
    8d8c:	000f883a 	mov	r7,zero
    8d90:	28001616 	blt	r5,zero,8dec <__divsi3+0x64>
    8d94:	200d883a 	mov	r6,r4
    8d98:	29001a2e 	bgeu	r5,r4,8e04 <__divsi3+0x7c>
    8d9c:	00800804 	movi	r2,32
    8da0:	00c00044 	movi	r3,1
    8da4:	00000106 	br	8dac <__divsi3+0x24>
    8da8:	10000d26 	beq	r2,zero,8de0 <__divsi3+0x58>
    8dac:	294b883a 	add	r5,r5,r5
    8db0:	10bfffc4 	addi	r2,r2,-1
    8db4:	18c7883a 	add	r3,r3,r3
    8db8:	293ffb36 	bltu	r5,r4,8da8 <_gp+0xffff621c>
    8dbc:	0005883a 	mov	r2,zero
    8dc0:	18000726 	beq	r3,zero,8de0 <__divsi3+0x58>
    8dc4:	0005883a 	mov	r2,zero
    8dc8:	31400236 	bltu	r6,r5,8dd4 <__divsi3+0x4c>
    8dcc:	314dc83a 	sub	r6,r6,r5
    8dd0:	10c4b03a 	or	r2,r2,r3
    8dd4:	1806d07a 	srli	r3,r3,1
    8dd8:	280ad07a 	srli	r5,r5,1
    8ddc:	183ffa1e 	bne	r3,zero,8dc8 <_gp+0xffff623c>
    8de0:	38000126 	beq	r7,zero,8de8 <__divsi3+0x60>
    8de4:	0085c83a 	sub	r2,zero,r2
    8de8:	f800283a 	ret
    8dec:	014bc83a 	sub	r5,zero,r5
    8df0:	39c0005c 	xori	r7,r7,1
    8df4:	003fe706 	br	8d94 <_gp+0xffff6208>
    8df8:	0109c83a 	sub	r4,zero,r4
    8dfc:	01c00044 	movi	r7,1
    8e00:	003fe306 	br	8d90 <_gp+0xffff6204>
    8e04:	00c00044 	movi	r3,1
    8e08:	003fee06 	br	8dc4 <_gp+0xffff6238>

00008e0c <__modsi3>:
    8e0c:	20001716 	blt	r4,zero,8e6c <__modsi3+0x60>
    8e10:	000f883a 	mov	r7,zero
    8e14:	2005883a 	mov	r2,r4
    8e18:	28001216 	blt	r5,zero,8e64 <__modsi3+0x58>
    8e1c:	2900162e 	bgeu	r5,r4,8e78 <__modsi3+0x6c>
    8e20:	01800804 	movi	r6,32
    8e24:	00c00044 	movi	r3,1
    8e28:	00000106 	br	8e30 <__modsi3+0x24>
    8e2c:	30000a26 	beq	r6,zero,8e58 <__modsi3+0x4c>
    8e30:	294b883a 	add	r5,r5,r5
    8e34:	31bfffc4 	addi	r6,r6,-1
    8e38:	18c7883a 	add	r3,r3,r3
    8e3c:	293ffb36 	bltu	r5,r4,8e2c <_gp+0xffff62a0>
    8e40:	18000526 	beq	r3,zero,8e58 <__modsi3+0x4c>
    8e44:	1806d07a 	srli	r3,r3,1
    8e48:	11400136 	bltu	r2,r5,8e50 <__modsi3+0x44>
    8e4c:	1145c83a 	sub	r2,r2,r5
    8e50:	280ad07a 	srli	r5,r5,1
    8e54:	183ffb1e 	bne	r3,zero,8e44 <_gp+0xffff62b8>
    8e58:	38000126 	beq	r7,zero,8e60 <__modsi3+0x54>
    8e5c:	0085c83a 	sub	r2,zero,r2
    8e60:	f800283a 	ret
    8e64:	014bc83a 	sub	r5,zero,r5
    8e68:	003fec06 	br	8e1c <_gp+0xffff6290>
    8e6c:	0109c83a 	sub	r4,zero,r4
    8e70:	01c00044 	movi	r7,1
    8e74:	003fe706 	br	8e14 <_gp+0xffff6288>
    8e78:	00c00044 	movi	r3,1
    8e7c:	003ff106 	br	8e44 <_gp+0xffff62b8>

00008e80 <__udivsi3>:
    8e80:	200d883a 	mov	r6,r4
    8e84:	2900152e 	bgeu	r5,r4,8edc <__udivsi3+0x5c>
    8e88:	28001416 	blt	r5,zero,8edc <__udivsi3+0x5c>
    8e8c:	00800804 	movi	r2,32
    8e90:	00c00044 	movi	r3,1
    8e94:	00000206 	br	8ea0 <__udivsi3+0x20>
    8e98:	10000e26 	beq	r2,zero,8ed4 <__udivsi3+0x54>
    8e9c:	28000516 	blt	r5,zero,8eb4 <__udivsi3+0x34>
    8ea0:	294b883a 	add	r5,r5,r5
    8ea4:	10bfffc4 	addi	r2,r2,-1
    8ea8:	18c7883a 	add	r3,r3,r3
    8eac:	293ffa36 	bltu	r5,r4,8e98 <_gp+0xffff630c>
    8eb0:	18000826 	beq	r3,zero,8ed4 <__udivsi3+0x54>
    8eb4:	0005883a 	mov	r2,zero
    8eb8:	31400236 	bltu	r6,r5,8ec4 <__udivsi3+0x44>
    8ebc:	314dc83a 	sub	r6,r6,r5
    8ec0:	10c4b03a 	or	r2,r2,r3
    8ec4:	1806d07a 	srli	r3,r3,1
    8ec8:	280ad07a 	srli	r5,r5,1
    8ecc:	183ffa1e 	bne	r3,zero,8eb8 <_gp+0xffff632c>
    8ed0:	f800283a 	ret
    8ed4:	0005883a 	mov	r2,zero
    8ed8:	f800283a 	ret
    8edc:	00c00044 	movi	r3,1
    8ee0:	003ff406 	br	8eb4 <_gp+0xffff6328>

00008ee4 <__umodsi3>:
    8ee4:	2005883a 	mov	r2,r4
    8ee8:	2900122e 	bgeu	r5,r4,8f34 <__umodsi3+0x50>
    8eec:	28001116 	blt	r5,zero,8f34 <__umodsi3+0x50>
    8ef0:	01800804 	movi	r6,32
    8ef4:	00c00044 	movi	r3,1
    8ef8:	00000206 	br	8f04 <__umodsi3+0x20>
    8efc:	30000c26 	beq	r6,zero,8f30 <__umodsi3+0x4c>
    8f00:	28000516 	blt	r5,zero,8f18 <__umodsi3+0x34>
    8f04:	294b883a 	add	r5,r5,r5
    8f08:	31bfffc4 	addi	r6,r6,-1
    8f0c:	18c7883a 	add	r3,r3,r3
    8f10:	293ffa36 	bltu	r5,r4,8efc <_gp+0xffff6370>
    8f14:	18000626 	beq	r3,zero,8f30 <__umodsi3+0x4c>
    8f18:	1806d07a 	srli	r3,r3,1
    8f1c:	11400136 	bltu	r2,r5,8f24 <__umodsi3+0x40>
    8f20:	1145c83a 	sub	r2,r2,r5
    8f24:	280ad07a 	srli	r5,r5,1
    8f28:	183ffb1e 	bne	r3,zero,8f18 <_gp+0xffff638c>
    8f2c:	f800283a 	ret
    8f30:	f800283a 	ret
    8f34:	00c00044 	movi	r3,1
    8f38:	003ff706 	br	8f18 <_gp+0xffff638c>

00008f3c <__mulsi3>:
    8f3c:	0005883a 	mov	r2,zero
    8f40:	20000726 	beq	r4,zero,8f60 <__mulsi3+0x24>
    8f44:	20c0004c 	andi	r3,r4,1
    8f48:	2008d07a 	srli	r4,r4,1
    8f4c:	18000126 	beq	r3,zero,8f54 <__mulsi3+0x18>
    8f50:	1145883a 	add	r2,r2,r5
    8f54:	294b883a 	add	r5,r5,r5
    8f58:	203ffa1e 	bne	r4,zero,8f44 <_gp+0xffff63b8>
    8f5c:	f800283a 	ret
    8f60:	f800283a 	ret

00008f64 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    8f64:	defffc04 	addi	sp,sp,-16
    8f68:	df000315 	stw	fp,12(sp)
    8f6c:	df000304 	addi	fp,sp,12
    8f70:	e13ffd15 	stw	r4,-12(fp)
    8f74:	e17ffe15 	stw	r5,-8(fp)
    8f78:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    8f7c:	e0fffe17 	ldw	r3,-8(fp)
    8f80:	e0bffd17 	ldw	r2,-12(fp)
    8f84:	18800c26 	beq	r3,r2,8fb8 <alt_load_section+0x54>
  {
    while( to != end )
    8f88:	00000806 	br	8fac <alt_load_section+0x48>
    {
      *to++ = *from++;
    8f8c:	e0bffe17 	ldw	r2,-8(fp)
    8f90:	10c00104 	addi	r3,r2,4
    8f94:	e0fffe15 	stw	r3,-8(fp)
    8f98:	e0fffd17 	ldw	r3,-12(fp)
    8f9c:	19000104 	addi	r4,r3,4
    8fa0:	e13ffd15 	stw	r4,-12(fp)
    8fa4:	18c00017 	ldw	r3,0(r3)
    8fa8:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    8fac:	e0fffe17 	ldw	r3,-8(fp)
    8fb0:	e0bfff17 	ldw	r2,-4(fp)
    8fb4:	18bff51e 	bne	r3,r2,8f8c <_gp+0xffff6400>
    {
      *to++ = *from++;
    }
  }
}
    8fb8:	0001883a 	nop
    8fbc:	e037883a 	mov	sp,fp
    8fc0:	df000017 	ldw	fp,0(sp)
    8fc4:	dec00104 	addi	sp,sp,4
    8fc8:	f800283a 	ret

00008fcc <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    8fcc:	defffe04 	addi	sp,sp,-8
    8fd0:	dfc00115 	stw	ra,4(sp)
    8fd4:	df000015 	stw	fp,0(sp)
    8fd8:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    8fdc:	01800074 	movhi	r6,1
    8fe0:	31aaee04 	addi	r6,r6,-21576
    8fe4:	01400074 	movhi	r5,1
    8fe8:	296a3604 	addi	r5,r5,-22312
    8fec:	01000074 	movhi	r4,1
    8ff0:	212aee04 	addi	r4,r4,-21576
    8ff4:	0008f640 	call	8f64 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    8ff8:	01800074 	movhi	r6,1
    8ffc:	31a08c04 	addi	r6,r6,-32208
    9000:	01400074 	movhi	r5,1
    9004:	29600804 	addi	r5,r5,-32736
    9008:	01000074 	movhi	r4,1
    900c:	21200804 	addi	r4,r4,-32736
    9010:	0008f640 	call	8f64 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    9014:	01800074 	movhi	r6,1
    9018:	31aa3604 	addi	r6,r6,-22312
    901c:	01400074 	movhi	r5,1
    9020:	296a1704 	addi	r5,r5,-22436
    9024:	01000074 	movhi	r4,1
    9028:	212a1704 	addi	r4,r4,-22436
    902c:	0008f640 	call	8f64 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    9030:	00097080 	call	9708 <alt_dcache_flush_all>
  alt_icache_flush_all();
    9034:	00098f40 	call	98f4 <alt_icache_flush_all>
}
    9038:	0001883a 	nop
    903c:	e037883a 	mov	sp,fp
    9040:	dfc00117 	ldw	ra,4(sp)
    9044:	df000017 	ldw	fp,0(sp)
    9048:	dec00204 	addi	sp,sp,8
    904c:	f800283a 	ret

00009050 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    9050:	defffd04 	addi	sp,sp,-12
    9054:	dfc00215 	stw	ra,8(sp)
    9058:	df000115 	stw	fp,4(sp)
    905c:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    9060:	0009883a 	mov	r4,zero
    9064:	000923c0 	call	923c <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
    9068:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    906c:	00092740 	call	9274 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    9070:	01800074 	movhi	r6,1
    9074:	31aa2904 	addi	r6,r6,-22364
    9078:	01400074 	movhi	r5,1
    907c:	296a2904 	addi	r5,r5,-22364
    9080:	01000074 	movhi	r4,1
    9084:	212a2904 	addi	r4,r4,-22364
    9088:	0009c980 	call	9c98 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    908c:	00098340 	call	9834 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    9090:	01000074 	movhi	r4,1
    9094:	21262504 	addi	r4,r4,-26476
    9098:	000a4dc0 	call	a4dc <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    909c:	d0a0c417 	ldw	r2,-31984(gp)
    90a0:	d0e0c517 	ldw	r3,-31980(gp)
    90a4:	d120c617 	ldw	r4,-31976(gp)
    90a8:	200d883a 	mov	r6,r4
    90ac:	180b883a 	mov	r5,r3
    90b0:	1009883a 	mov	r4,r2
    90b4:	00083880 	call	8388 <main>
    90b8:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    90bc:	01000044 	movi	r4,1
    90c0:	00096300 	call	9630 <close>
  exit (result);
    90c4:	e13fff17 	ldw	r4,-4(fp)
    90c8:	000a4f00 	call	a4f0 <exit>

000090cc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    90cc:	defffe04 	addi	sp,sp,-8
    90d0:	dfc00115 	stw	ra,4(sp)
    90d4:	df000015 	stw	fp,0(sp)
    90d8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    90dc:	d0a00717 	ldw	r2,-32740(gp)
    90e0:	10000326 	beq	r2,zero,90f0 <alt_get_errno+0x24>
    90e4:	d0a00717 	ldw	r2,-32740(gp)
    90e8:	103ee83a 	callr	r2
    90ec:	00000106 	br	90f4 <alt_get_errno+0x28>
    90f0:	d0a0c304 	addi	r2,gp,-31988
}
    90f4:	e037883a 	mov	sp,fp
    90f8:	dfc00117 	ldw	ra,4(sp)
    90fc:	df000017 	ldw	fp,0(sp)
    9100:	dec00204 	addi	sp,sp,8
    9104:	f800283a 	ret

00009108 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    9108:	defff904 	addi	sp,sp,-28
    910c:	dfc00615 	stw	ra,24(sp)
    9110:	df000515 	stw	fp,20(sp)
    9114:	df000504 	addi	fp,sp,20
    9118:	e13ffd15 	stw	r4,-12(fp)
    911c:	e17ffe15 	stw	r5,-8(fp)
    9120:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    9124:	e0bffd17 	ldw	r2,-12(fp)
    9128:	10000816 	blt	r2,zero,914c <write+0x44>
    912c:	01400304 	movi	r5,12
    9130:	e13ffd17 	ldw	r4,-12(fp)
    9134:	0008f3c0 	call	8f3c <__mulsi3>
    9138:	1007883a 	mov	r3,r2
    913c:	00800074 	movhi	r2,1
    9140:	10aa8304 	addi	r2,r2,-22004
    9144:	1885883a 	add	r2,r3,r2
    9148:	00000106 	br	9150 <write+0x48>
    914c:	0005883a 	mov	r2,zero
    9150:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    9154:	e0bffb17 	ldw	r2,-20(fp)
    9158:	10002126 	beq	r2,zero,91e0 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    915c:	e0bffb17 	ldw	r2,-20(fp)
    9160:	10800217 	ldw	r2,8(r2)
    9164:	108000cc 	andi	r2,r2,3
    9168:	10001826 	beq	r2,zero,91cc <write+0xc4>
    916c:	e0bffb17 	ldw	r2,-20(fp)
    9170:	10800017 	ldw	r2,0(r2)
    9174:	10800617 	ldw	r2,24(r2)
    9178:	10001426 	beq	r2,zero,91cc <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    917c:	e0bffb17 	ldw	r2,-20(fp)
    9180:	10800017 	ldw	r2,0(r2)
    9184:	10800617 	ldw	r2,24(r2)
    9188:	e0ffff17 	ldw	r3,-4(fp)
    918c:	180d883a 	mov	r6,r3
    9190:	e17ffe17 	ldw	r5,-8(fp)
    9194:	e13ffb17 	ldw	r4,-20(fp)
    9198:	103ee83a 	callr	r2
    919c:	e0bffc15 	stw	r2,-16(fp)
    91a0:	e0bffc17 	ldw	r2,-16(fp)
    91a4:	1000070e 	bge	r2,zero,91c4 <write+0xbc>
      {
        ALT_ERRNO = -rval;
    91a8:	00090cc0 	call	90cc <alt_get_errno>
    91ac:	1007883a 	mov	r3,r2
    91b0:	e0bffc17 	ldw	r2,-16(fp)
    91b4:	0085c83a 	sub	r2,zero,r2
    91b8:	18800015 	stw	r2,0(r3)
        return -1;
    91bc:	00bfffc4 	movi	r2,-1
    91c0:	00000c06 	br	91f4 <write+0xec>
      }
      return rval;
    91c4:	e0bffc17 	ldw	r2,-16(fp)
    91c8:	00000a06 	br	91f4 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
    91cc:	00090cc0 	call	90cc <alt_get_errno>
    91d0:	1007883a 	mov	r3,r2
    91d4:	00800344 	movi	r2,13
    91d8:	18800015 	stw	r2,0(r3)
    91dc:	00000406 	br	91f0 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    91e0:	00090cc0 	call	90cc <alt_get_errno>
    91e4:	1007883a 	mov	r3,r2
    91e8:	00801444 	movi	r2,81
    91ec:	18800015 	stw	r2,0(r3)
  }
  return -1;
    91f0:	00bfffc4 	movi	r2,-1
}
    91f4:	e037883a 	mov	sp,fp
    91f8:	dfc00117 	ldw	ra,4(sp)
    91fc:	df000017 	ldw	fp,0(sp)
    9200:	dec00204 	addi	sp,sp,8
    9204:	f800283a 	ret

00009208 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    9208:	defffd04 	addi	sp,sp,-12
    920c:	dfc00215 	stw	ra,8(sp)
    9210:	df000115 	stw	fp,4(sp)
    9214:	df000104 	addi	fp,sp,4
    9218:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    921c:	d1600404 	addi	r5,gp,-32752
    9220:	e13fff17 	ldw	r4,-4(fp)
    9224:	00097900 	call	9790 <alt_dev_llist_insert>
}
    9228:	e037883a 	mov	sp,fp
    922c:	dfc00117 	ldw	ra,4(sp)
    9230:	df000017 	ldw	fp,0(sp)
    9234:	dec00204 	addi	sp,sp,8
    9238:	f800283a 	ret

0000923c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    923c:	defffd04 	addi	sp,sp,-12
    9240:	dfc00215 	stw	ra,8(sp)
    9244:	df000115 	stw	fp,4(sp)
    9248:	df000104 	addi	fp,sp,4
    924c:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
    9250:	000a1c00 	call	a1c0 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    9254:	00800044 	movi	r2,1
    9258:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    925c:	0001883a 	nop
    9260:	e037883a 	mov	sp,fp
    9264:	dfc00117 	ldw	ra,4(sp)
    9268:	df000017 	ldw	fp,0(sp)
    926c:	dec00204 	addi	sp,sp,8
    9270:	f800283a 	ret

00009274 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    9274:	defffe04 	addi	sp,sp,-8
    9278:	dfc00115 	stw	ra,4(sp)
    927c:	df000015 	stw	fp,0(sp)
    9280:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( SYS_TIMER, sys_timer);
    9284:	01c0fa04 	movi	r7,1000
    9288:	000d883a 	mov	r6,zero
    928c:	000b883a 	mov	r5,zero
    9290:	01000074 	movhi	r4,1
    9294:	21040004 	addi	r4,r4,4096
    9298:	00095780 	call	9578 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
    929c:	01000074 	movhi	r4,1
    92a0:	212a6e04 	addi	r4,r4,-22088
    92a4:	00092080 	call	9208 <alt_dev_reg>
}
    92a8:	0001883a 	nop
    92ac:	e037883a 	mov	sp,fp
    92b0:	dfc00117 	ldw	ra,4(sp)
    92b4:	df000017 	ldw	fp,0(sp)
    92b8:	dec00204 	addi	sp,sp,8
    92bc:	f800283a 	ret

000092c0 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    92c0:	defffa04 	addi	sp,sp,-24
    92c4:	dfc00515 	stw	ra,20(sp)
    92c8:	df000415 	stw	fp,16(sp)
    92cc:	df000404 	addi	fp,sp,16
    92d0:	e13ffd15 	stw	r4,-12(fp)
    92d4:	e17ffe15 	stw	r5,-8(fp)
    92d8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    92dc:	e0bffd17 	ldw	r2,-12(fp)
    92e0:	10800017 	ldw	r2,0(r2)
    92e4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    92e8:	e0bffc17 	ldw	r2,-16(fp)
    92ec:	10c00a04 	addi	r3,r2,40
    92f0:	e0bffd17 	ldw	r2,-12(fp)
    92f4:	10800217 	ldw	r2,8(r2)
    92f8:	100f883a 	mov	r7,r2
    92fc:	e1bfff17 	ldw	r6,-4(fp)
    9300:	e17ffe17 	ldw	r5,-8(fp)
    9304:	1809883a 	mov	r4,r3
    9308:	00093800 	call	9380 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    930c:	e037883a 	mov	sp,fp
    9310:	dfc00117 	ldw	ra,4(sp)
    9314:	df000017 	ldw	fp,0(sp)
    9318:	dec00204 	addi	sp,sp,8
    931c:	f800283a 	ret

00009320 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    9320:	defffa04 	addi	sp,sp,-24
    9324:	dfc00515 	stw	ra,20(sp)
    9328:	df000415 	stw	fp,16(sp)
    932c:	df000404 	addi	fp,sp,16
    9330:	e13ffd15 	stw	r4,-12(fp)
    9334:	e17ffe15 	stw	r5,-8(fp)
    9338:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    933c:	e0bffd17 	ldw	r2,-12(fp)
    9340:	10800017 	ldw	r2,0(r2)
    9344:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    9348:	e0bffc17 	ldw	r2,-16(fp)
    934c:	10c00a04 	addi	r3,r2,40
    9350:	e0bffd17 	ldw	r2,-12(fp)
    9354:	10800217 	ldw	r2,8(r2)
    9358:	100f883a 	mov	r7,r2
    935c:	e1bfff17 	ldw	r6,-4(fp)
    9360:	e17ffe17 	ldw	r5,-8(fp)
    9364:	1809883a 	mov	r4,r3
    9368:	000946c0 	call	946c <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    936c:	e037883a 	mov	sp,fp
    9370:	dfc00117 	ldw	ra,4(sp)
    9374:	df000017 	ldw	fp,0(sp)
    9378:	dec00204 	addi	sp,sp,8
    937c:	f800283a 	ret

00009380 <altera_avalon_jtag_uart_read>:
 */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
    9380:	defff704 	addi	sp,sp,-36
    9384:	df000815 	stw	fp,32(sp)
    9388:	df000804 	addi	fp,sp,32
    938c:	e13ffc15 	stw	r4,-16(fp)
    9390:	e17ffd15 	stw	r5,-12(fp)
    9394:	e1bffe15 	stw	r6,-8(fp)
    9398:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
    939c:	e0bffc17 	ldw	r2,-16(fp)
    93a0:	10800017 	ldw	r2,0(r2)
    93a4:	e0bff915 	stw	r2,-28(fp)

  char * ptr = buffer;
    93a8:	e0bffd17 	ldw	r2,-12(fp)
    93ac:	e0bff815 	stw	r2,-32(fp)
  char * end = buffer + space;
    93b0:	e0bffe17 	ldw	r2,-8(fp)
    93b4:	e0fffd17 	ldw	r3,-12(fp)
    93b8:	1885883a 	add	r2,r3,r2
    93bc:	e0bffa15 	stw	r2,-24(fp)

  while (ptr < end)
    93c0:	00001206 	br	940c <altera_avalon_jtag_uart_read+0x8c>
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    93c4:	e0bff917 	ldw	r2,-28(fp)
    93c8:	10800037 	ldwio	r2,0(r2)
    93cc:	e0bffb15 	stw	r2,-20(fp)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
    93d0:	e0bffb17 	ldw	r2,-20(fp)
    93d4:	10a0000c 	andi	r2,r2,32768
    93d8:	10000626 	beq	r2,zero,93f4 <altera_avalon_jtag_uart_read+0x74>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    93dc:	e0bff817 	ldw	r2,-32(fp)
    93e0:	10c00044 	addi	r3,r2,1
    93e4:	e0fff815 	stw	r3,-32(fp)
    93e8:	e0fffb17 	ldw	r3,-20(fp)
    93ec:	10c00005 	stb	r3,0(r2)
    93f0:	00000606 	br	940c <altera_avalon_jtag_uart_read+0x8c>
    else if (ptr != buffer)
    93f4:	e0fff817 	ldw	r3,-32(fp)
    93f8:	e0bffd17 	ldw	r2,-12(fp)
    93fc:	1880071e 	bne	r3,r2,941c <altera_avalon_jtag_uart_read+0x9c>
      break;
    else if(flags & O_NONBLOCK)
    9400:	e0bfff17 	ldw	r2,-4(fp)
    9404:	1090000c 	andi	r2,r2,16384
    9408:	1000061e 	bne	r2,zero,9424 <altera_avalon_jtag_uart_read+0xa4>
  unsigned int base = sp->base;

  char * ptr = buffer;
  char * end = buffer + space;

  while (ptr < end)
    940c:	e0fff817 	ldw	r3,-32(fp)
    9410:	e0bffa17 	ldw	r2,-24(fp)
    9414:	18bfeb36 	bltu	r3,r2,93c4 <_gp+0xffff6838>
    9418:	00000306 	br	9428 <altera_avalon_jtag_uart_read+0xa8>
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    else if (ptr != buffer)
      break;
    941c:	0001883a 	nop
    9420:	00000106 	br	9428 <altera_avalon_jtag_uart_read+0xa8>
    else if(flags & O_NONBLOCK)
      break;   
    9424:	0001883a 	nop
    
  }

  if (ptr != buffer)
    9428:	e0fff817 	ldw	r3,-32(fp)
    942c:	e0bffd17 	ldw	r2,-12(fp)
    9430:	18800426 	beq	r3,r2,9444 <altera_avalon_jtag_uart_read+0xc4>
    return ptr - buffer;
    9434:	e0fff817 	ldw	r3,-32(fp)
    9438:	e0bffd17 	ldw	r2,-12(fp)
    943c:	1885c83a 	sub	r2,r3,r2
    9440:	00000606 	br	945c <altera_avalon_jtag_uart_read+0xdc>
  else if (flags & O_NONBLOCK)
    9444:	e0bfff17 	ldw	r2,-4(fp)
    9448:	1090000c 	andi	r2,r2,16384
    944c:	10000226 	beq	r2,zero,9458 <altera_avalon_jtag_uart_read+0xd8>
    return -EWOULDBLOCK;
    9450:	00bffd44 	movi	r2,-11
    9454:	00000106 	br	945c <altera_avalon_jtag_uart_read+0xdc>
  else
    return -EIO;
    9458:	00bffec4 	movi	r2,-5
}
    945c:	e037883a 	mov	sp,fp
    9460:	df000017 	ldw	fp,0(sp)
    9464:	dec00104 	addi	sp,sp,4
    9468:	f800283a 	ret

0000946c <altera_avalon_jtag_uart_write>:
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    946c:	defff904 	addi	sp,sp,-28
    9470:	df000615 	stw	fp,24(sp)
    9474:	df000604 	addi	fp,sp,24
    9478:	e13ffc15 	stw	r4,-16(fp)
    947c:	e17ffd15 	stw	r5,-12(fp)
    9480:	e1bffe15 	stw	r6,-8(fp)
    9484:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
    9488:	e0bffc17 	ldw	r2,-16(fp)
    948c:	10800017 	ldw	r2,0(r2)
    9490:	e0bffa15 	stw	r2,-24(fp)

  const char * end = ptr + count;
    9494:	e0bffe17 	ldw	r2,-8(fp)
    9498:	e0fffd17 	ldw	r3,-12(fp)
    949c:	1885883a 	add	r2,r3,r2
    94a0:	e0bffb15 	stw	r2,-20(fp)

  while (ptr < end)
    94a4:	00000e06 	br	94e0 <altera_avalon_jtag_uart_write+0x74>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    94a8:	e0bffa17 	ldw	r2,-24(fp)
    94ac:	10800104 	addi	r2,r2,4
    94b0:	10800037 	ldwio	r2,0(r2)
    94b4:	10bfffec 	andhi	r2,r2,65535
    94b8:	10000926 	beq	r2,zero,94e0 <altera_avalon_jtag_uart_write+0x74>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
    94bc:	e0fffa17 	ldw	r3,-24(fp)
    94c0:	e0bffd17 	ldw	r2,-12(fp)
    94c4:	11000044 	addi	r4,r2,1
    94c8:	e13ffd15 	stw	r4,-12(fp)
    94cc:	10800003 	ldbu	r2,0(r2)
    94d0:	10803fcc 	andi	r2,r2,255
    94d4:	1080201c 	xori	r2,r2,128
    94d8:	10bfe004 	addi	r2,r2,-128
    94dc:	18800035 	stwio	r2,0(r3)
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
    94e0:	e0fffd17 	ldw	r3,-12(fp)
    94e4:	e0bffb17 	ldw	r2,-20(fp)
    94e8:	18bfef36 	bltu	r3,r2,94a8 <_gp+0xffff691c>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
    94ec:	e0bffe17 	ldw	r2,-8(fp)
}
    94f0:	e037883a 	mov	sp,fp
    94f4:	df000017 	ldw	fp,0(sp)
    94f8:	dec00104 	addi	sp,sp,4
    94fc:	f800283a 	ret

00009500 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
    9500:	defffa04 	addi	sp,sp,-24
    9504:	dfc00515 	stw	ra,20(sp)
    9508:	df000415 	stw	fp,16(sp)
    950c:	df000404 	addi	fp,sp,16
    9510:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
    9514:	0007883a 	mov	r3,zero
    9518:	e0bfff17 	ldw	r2,-4(fp)
    951c:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
    9520:	e0bfff17 	ldw	r2,-4(fp)
    9524:	10800104 	addi	r2,r2,4
    9528:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    952c:	0005303a 	rdctl	r2,status
    9530:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    9534:	e0fffd17 	ldw	r3,-12(fp)
    9538:	00bfff84 	movi	r2,-2
    953c:	1884703a 	and	r2,r3,r2
    9540:	1001703a 	wrctl	status,r2
  
  return context;
    9544:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
    9548:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
    954c:	000a0b80 	call	a0b8 <alt_tick>
    9550:	e0bffc17 	ldw	r2,-16(fp)
    9554:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    9558:	e0bffe17 	ldw	r2,-8(fp)
    955c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
    9560:	0001883a 	nop
    9564:	e037883a 	mov	sp,fp
    9568:	dfc00117 	ldw	ra,4(sp)
    956c:	df000017 	ldw	fp,0(sp)
    9570:	dec00204 	addi	sp,sp,8
    9574:	f800283a 	ret

00009578 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
    9578:	defff804 	addi	sp,sp,-32
    957c:	dfc00715 	stw	ra,28(sp)
    9580:	df000615 	stw	fp,24(sp)
    9584:	df000604 	addi	fp,sp,24
    9588:	e13ffc15 	stw	r4,-16(fp)
    958c:	e17ffd15 	stw	r5,-12(fp)
    9590:	e1bffe15 	stw	r6,-8(fp)
    9594:	e1ffff15 	stw	r7,-4(fp)
    9598:	e0bfff17 	ldw	r2,-4(fp)
    959c:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
    95a0:	d0a0c817 	ldw	r2,-31968(gp)
    95a4:	1000021e 	bne	r2,zero,95b0 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
    95a8:	e0bffb17 	ldw	r2,-20(fp)
    95ac:	d0a0c815 	stw	r2,-31968(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
    95b0:	e0bffc17 	ldw	r2,-16(fp)
    95b4:	10800104 	addi	r2,r2,4
    95b8:	00c001c4 	movi	r3,7
    95bc:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
    95c0:	d8000015 	stw	zero,0(sp)
    95c4:	e1fffc17 	ldw	r7,-16(fp)
    95c8:	01800074 	movhi	r6,1
    95cc:	31a54004 	addi	r6,r6,-27392
    95d0:	e17ffe17 	ldw	r5,-8(fp)
    95d4:	e13ffd17 	ldw	r4,-12(fp)
    95d8:	00099140 	call	9914 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
    95dc:	0001883a 	nop
    95e0:	e037883a 	mov	sp,fp
    95e4:	dfc00117 	ldw	ra,4(sp)
    95e8:	df000017 	ldw	fp,0(sp)
    95ec:	dec00204 	addi	sp,sp,8
    95f0:	f800283a 	ret

000095f4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    95f4:	defffe04 	addi	sp,sp,-8
    95f8:	dfc00115 	stw	ra,4(sp)
    95fc:	df000015 	stw	fp,0(sp)
    9600:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    9604:	d0a00717 	ldw	r2,-32740(gp)
    9608:	10000326 	beq	r2,zero,9618 <alt_get_errno+0x24>
    960c:	d0a00717 	ldw	r2,-32740(gp)
    9610:	103ee83a 	callr	r2
    9614:	00000106 	br	961c <alt_get_errno+0x28>
    9618:	d0a0c304 	addi	r2,gp,-31988
}
    961c:	e037883a 	mov	sp,fp
    9620:	dfc00117 	ldw	ra,4(sp)
    9624:	df000017 	ldw	fp,0(sp)
    9628:	dec00204 	addi	sp,sp,8
    962c:	f800283a 	ret

00009630 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    9630:	defffb04 	addi	sp,sp,-20
    9634:	dfc00415 	stw	ra,16(sp)
    9638:	df000315 	stw	fp,12(sp)
    963c:	df000304 	addi	fp,sp,12
    9640:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    9644:	e0bfff17 	ldw	r2,-4(fp)
    9648:	10000816 	blt	r2,zero,966c <close+0x3c>
    964c:	01400304 	movi	r5,12
    9650:	e13fff17 	ldw	r4,-4(fp)
    9654:	0008f3c0 	call	8f3c <__mulsi3>
    9658:	1007883a 	mov	r3,r2
    965c:	00800074 	movhi	r2,1
    9660:	10aa8304 	addi	r2,r2,-22004
    9664:	1885883a 	add	r2,r3,r2
    9668:	00000106 	br	9670 <close+0x40>
    966c:	0005883a 	mov	r2,zero
    9670:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
    9674:	e0bffd17 	ldw	r2,-12(fp)
    9678:	10001926 	beq	r2,zero,96e0 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    967c:	e0bffd17 	ldw	r2,-12(fp)
    9680:	10800017 	ldw	r2,0(r2)
    9684:	10800417 	ldw	r2,16(r2)
    9688:	10000626 	beq	r2,zero,96a4 <close+0x74>
    968c:	e0bffd17 	ldw	r2,-12(fp)
    9690:	10800017 	ldw	r2,0(r2)
    9694:	10800417 	ldw	r2,16(r2)
    9698:	e13ffd17 	ldw	r4,-12(fp)
    969c:	103ee83a 	callr	r2
    96a0:	00000106 	br	96a8 <close+0x78>
    96a4:	0005883a 	mov	r2,zero
    96a8:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    96ac:	e13fff17 	ldw	r4,-4(fp)
    96b0:	0009f980 	call	9f98 <alt_release_fd>
    if (rval < 0)
    96b4:	e0bffe17 	ldw	r2,-8(fp)
    96b8:	1000070e 	bge	r2,zero,96d8 <close+0xa8>
    {
      ALT_ERRNO = -rval;
    96bc:	00095f40 	call	95f4 <alt_get_errno>
    96c0:	1007883a 	mov	r3,r2
    96c4:	e0bffe17 	ldw	r2,-8(fp)
    96c8:	0085c83a 	sub	r2,zero,r2
    96cc:	18800015 	stw	r2,0(r3)
      return -1;
    96d0:	00bfffc4 	movi	r2,-1
    96d4:	00000706 	br	96f4 <close+0xc4>
    }
    return 0;
    96d8:	0005883a 	mov	r2,zero
    96dc:	00000506 	br	96f4 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    96e0:	00095f40 	call	95f4 <alt_get_errno>
    96e4:	1007883a 	mov	r3,r2
    96e8:	00801444 	movi	r2,81
    96ec:	18800015 	stw	r2,0(r3)
    return -1;
    96f0:	00bfffc4 	movi	r2,-1
  }
}
    96f4:	e037883a 	mov	sp,fp
    96f8:	dfc00117 	ldw	ra,4(sp)
    96fc:	df000017 	ldw	fp,0(sp)
    9700:	dec00204 	addi	sp,sp,8
    9704:	f800283a 	ret

00009708 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    9708:	deffff04 	addi	sp,sp,-4
    970c:	df000015 	stw	fp,0(sp)
    9710:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    9714:	0001883a 	nop
    9718:	e037883a 	mov	sp,fp
    971c:	df000017 	ldw	fp,0(sp)
    9720:	dec00104 	addi	sp,sp,4
    9724:	f800283a 	ret

00009728 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    9728:	defffc04 	addi	sp,sp,-16
    972c:	df000315 	stw	fp,12(sp)
    9730:	df000304 	addi	fp,sp,12
    9734:	e13ffd15 	stw	r4,-12(fp)
    9738:	e17ffe15 	stw	r5,-8(fp)
    973c:	e1bfff15 	stw	r6,-4(fp)
  return len;
    9740:	e0bfff17 	ldw	r2,-4(fp)
}
    9744:	e037883a 	mov	sp,fp
    9748:	df000017 	ldw	fp,0(sp)
    974c:	dec00104 	addi	sp,sp,4
    9750:	f800283a 	ret

00009754 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    9754:	defffe04 	addi	sp,sp,-8
    9758:	dfc00115 	stw	ra,4(sp)
    975c:	df000015 	stw	fp,0(sp)
    9760:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    9764:	d0a00717 	ldw	r2,-32740(gp)
    9768:	10000326 	beq	r2,zero,9778 <alt_get_errno+0x24>
    976c:	d0a00717 	ldw	r2,-32740(gp)
    9770:	103ee83a 	callr	r2
    9774:	00000106 	br	977c <alt_get_errno+0x28>
    9778:	d0a0c304 	addi	r2,gp,-31988
}
    977c:	e037883a 	mov	sp,fp
    9780:	dfc00117 	ldw	ra,4(sp)
    9784:	df000017 	ldw	fp,0(sp)
    9788:	dec00204 	addi	sp,sp,8
    978c:	f800283a 	ret

00009790 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    9790:	defffa04 	addi	sp,sp,-24
    9794:	dfc00515 	stw	ra,20(sp)
    9798:	df000415 	stw	fp,16(sp)
    979c:	df000404 	addi	fp,sp,16
    97a0:	e13ffe15 	stw	r4,-8(fp)
    97a4:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    97a8:	e0bffe17 	ldw	r2,-8(fp)
    97ac:	10000326 	beq	r2,zero,97bc <alt_dev_llist_insert+0x2c>
    97b0:	e0bffe17 	ldw	r2,-8(fp)
    97b4:	10800217 	ldw	r2,8(r2)
    97b8:	1000061e 	bne	r2,zero,97d4 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
    97bc:	00097540 	call	9754 <alt_get_errno>
    97c0:	1007883a 	mov	r3,r2
    97c4:	00800584 	movi	r2,22
    97c8:	18800015 	stw	r2,0(r3)
    return -EINVAL;
    97cc:	00bffa84 	movi	r2,-22
    97d0:	00001306 	br	9820 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
    97d4:	e0bffe17 	ldw	r2,-8(fp)
    97d8:	e0ffff17 	ldw	r3,-4(fp)
    97dc:	e0fffc15 	stw	r3,-16(fp)
    97e0:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    97e4:	e0bffd17 	ldw	r2,-12(fp)
    97e8:	e0fffc17 	ldw	r3,-16(fp)
    97ec:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    97f0:	e0bffc17 	ldw	r2,-16(fp)
    97f4:	10c00017 	ldw	r3,0(r2)
    97f8:	e0bffd17 	ldw	r2,-12(fp)
    97fc:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    9800:	e0bffc17 	ldw	r2,-16(fp)
    9804:	10800017 	ldw	r2,0(r2)
    9808:	e0fffd17 	ldw	r3,-12(fp)
    980c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    9810:	e0bffc17 	ldw	r2,-16(fp)
    9814:	e0fffd17 	ldw	r3,-12(fp)
    9818:	10c00015 	stw	r3,0(r2)

  return 0;  
    981c:	0005883a 	mov	r2,zero
}
    9820:	e037883a 	mov	sp,fp
    9824:	dfc00117 	ldw	ra,4(sp)
    9828:	df000017 	ldw	fp,0(sp)
    982c:	dec00204 	addi	sp,sp,8
    9830:	f800283a 	ret

00009834 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
    9834:	defffd04 	addi	sp,sp,-12
    9838:	dfc00215 	stw	ra,8(sp)
    983c:	df000115 	stw	fp,4(sp)
    9840:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    9844:	00800074 	movhi	r2,1
    9848:	10aa1604 	addi	r2,r2,-22440
    984c:	e0bfff15 	stw	r2,-4(fp)
    9850:	00000606 	br	986c <_do_ctors+0x38>
        (*ctor) (); 
    9854:	e0bfff17 	ldw	r2,-4(fp)
    9858:	10800017 	ldw	r2,0(r2)
    985c:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    9860:	e0bfff17 	ldw	r2,-4(fp)
    9864:	10bfff04 	addi	r2,r2,-4
    9868:	e0bfff15 	stw	r2,-4(fp)
    986c:	e0ffff17 	ldw	r3,-4(fp)
    9870:	00800074 	movhi	r2,1
    9874:	10aa1704 	addi	r2,r2,-22436
    9878:	18bff62e 	bgeu	r3,r2,9854 <_gp+0xffff6cc8>
        (*ctor) (); 
}
    987c:	0001883a 	nop
    9880:	e037883a 	mov	sp,fp
    9884:	dfc00117 	ldw	ra,4(sp)
    9888:	df000017 	ldw	fp,0(sp)
    988c:	dec00204 	addi	sp,sp,8
    9890:	f800283a 	ret

00009894 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
    9894:	defffd04 	addi	sp,sp,-12
    9898:	dfc00215 	stw	ra,8(sp)
    989c:	df000115 	stw	fp,4(sp)
    98a0:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    98a4:	00800074 	movhi	r2,1
    98a8:	10aa1604 	addi	r2,r2,-22440
    98ac:	e0bfff15 	stw	r2,-4(fp)
    98b0:	00000606 	br	98cc <_do_dtors+0x38>
        (*dtor) (); 
    98b4:	e0bfff17 	ldw	r2,-4(fp)
    98b8:	10800017 	ldw	r2,0(r2)
    98bc:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    98c0:	e0bfff17 	ldw	r2,-4(fp)
    98c4:	10bfff04 	addi	r2,r2,-4
    98c8:	e0bfff15 	stw	r2,-4(fp)
    98cc:	e0ffff17 	ldw	r3,-4(fp)
    98d0:	00800074 	movhi	r2,1
    98d4:	10aa1704 	addi	r2,r2,-22436
    98d8:	18bff62e 	bgeu	r3,r2,98b4 <_gp+0xffff6d28>
        (*dtor) (); 
}
    98dc:	0001883a 	nop
    98e0:	e037883a 	mov	sp,fp
    98e4:	dfc00117 	ldw	ra,4(sp)
    98e8:	df000017 	ldw	fp,0(sp)
    98ec:	dec00204 	addi	sp,sp,8
    98f0:	f800283a 	ret

000098f4 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    98f4:	deffff04 	addi	sp,sp,-4
    98f8:	df000015 	stw	fp,0(sp)
    98fc:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
    9900:	0001883a 	nop
    9904:	e037883a 	mov	sp,fp
    9908:	df000017 	ldw	fp,0(sp)
    990c:	dec00104 	addi	sp,sp,4
    9910:	f800283a 	ret

00009914 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    9914:	defff904 	addi	sp,sp,-28
    9918:	dfc00615 	stw	ra,24(sp)
    991c:	df000515 	stw	fp,20(sp)
    9920:	df000504 	addi	fp,sp,20
    9924:	e13ffc15 	stw	r4,-16(fp)
    9928:	e17ffd15 	stw	r5,-12(fp)
    992c:	e1bffe15 	stw	r6,-8(fp)
    9930:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
    9934:	e0800217 	ldw	r2,8(fp)
    9938:	d8800015 	stw	r2,0(sp)
    993c:	e1ffff17 	ldw	r7,-4(fp)
    9940:	e1bffe17 	ldw	r6,-8(fp)
    9944:	e17ffd17 	ldw	r5,-12(fp)
    9948:	e13ffc17 	ldw	r4,-16(fp)
    994c:	0009ac40 	call	9ac4 <alt_iic_isr_register>
}  
    9950:	e037883a 	mov	sp,fp
    9954:	dfc00117 	ldw	ra,4(sp)
    9958:	df000017 	ldw	fp,0(sp)
    995c:	dec00204 	addi	sp,sp,8
    9960:	f800283a 	ret

00009964 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    9964:	defff904 	addi	sp,sp,-28
    9968:	df000615 	stw	fp,24(sp)
    996c:	df000604 	addi	fp,sp,24
    9970:	e13ffe15 	stw	r4,-8(fp)
    9974:	e17fff15 	stw	r5,-4(fp)
    9978:	e0bfff17 	ldw	r2,-4(fp)
    997c:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    9980:	0005303a 	rdctl	r2,status
    9984:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    9988:	e0fffb17 	ldw	r3,-20(fp)
    998c:	00bfff84 	movi	r2,-2
    9990:	1884703a 	and	r2,r3,r2
    9994:	1001703a 	wrctl	status,r2
  
  return context;
    9998:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    999c:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
    99a0:	00c00044 	movi	r3,1
    99a4:	e0bffa17 	ldw	r2,-24(fp)
    99a8:	1884983a 	sll	r2,r3,r2
    99ac:	1007883a 	mov	r3,r2
    99b0:	d0a0c717 	ldw	r2,-31972(gp)
    99b4:	1884b03a 	or	r2,r3,r2
    99b8:	d0a0c715 	stw	r2,-31972(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    99bc:	d0a0c717 	ldw	r2,-31972(gp)
    99c0:	100170fa 	wrctl	ienable,r2
    99c4:	e0bffc17 	ldw	r2,-16(fp)
    99c8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    99cc:	e0bffd17 	ldw	r2,-12(fp)
    99d0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    99d4:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
    99d8:	0001883a 	nop
}
    99dc:	e037883a 	mov	sp,fp
    99e0:	df000017 	ldw	fp,0(sp)
    99e4:	dec00104 	addi	sp,sp,4
    99e8:	f800283a 	ret

000099ec <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    99ec:	defff904 	addi	sp,sp,-28
    99f0:	df000615 	stw	fp,24(sp)
    99f4:	df000604 	addi	fp,sp,24
    99f8:	e13ffe15 	stw	r4,-8(fp)
    99fc:	e17fff15 	stw	r5,-4(fp)
    9a00:	e0bfff17 	ldw	r2,-4(fp)
    9a04:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    9a08:	0005303a 	rdctl	r2,status
    9a0c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    9a10:	e0fffb17 	ldw	r3,-20(fp)
    9a14:	00bfff84 	movi	r2,-2
    9a18:	1884703a 	and	r2,r3,r2
    9a1c:	1001703a 	wrctl	status,r2
  
  return context;
    9a20:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    9a24:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
    9a28:	00c00044 	movi	r3,1
    9a2c:	e0bffa17 	ldw	r2,-24(fp)
    9a30:	1884983a 	sll	r2,r3,r2
    9a34:	0084303a 	nor	r2,zero,r2
    9a38:	1007883a 	mov	r3,r2
    9a3c:	d0a0c717 	ldw	r2,-31972(gp)
    9a40:	1884703a 	and	r2,r3,r2
    9a44:	d0a0c715 	stw	r2,-31972(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    9a48:	d0a0c717 	ldw	r2,-31972(gp)
    9a4c:	100170fa 	wrctl	ienable,r2
    9a50:	e0bffc17 	ldw	r2,-16(fp)
    9a54:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    9a58:	e0bffd17 	ldw	r2,-12(fp)
    9a5c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    9a60:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
    9a64:	0001883a 	nop
}
    9a68:	e037883a 	mov	sp,fp
    9a6c:	df000017 	ldw	fp,0(sp)
    9a70:	dec00104 	addi	sp,sp,4
    9a74:	f800283a 	ret

00009a78 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    9a78:	defffc04 	addi	sp,sp,-16
    9a7c:	df000315 	stw	fp,12(sp)
    9a80:	df000304 	addi	fp,sp,12
    9a84:	e13ffe15 	stw	r4,-8(fp)
    9a88:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
    9a8c:	000530fa 	rdctl	r2,ienable
    9a90:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
    9a94:	00c00044 	movi	r3,1
    9a98:	e0bfff17 	ldw	r2,-4(fp)
    9a9c:	1884983a 	sll	r2,r3,r2
    9aa0:	1007883a 	mov	r3,r2
    9aa4:	e0bffd17 	ldw	r2,-12(fp)
    9aa8:	1884703a 	and	r2,r3,r2
    9aac:	1004c03a 	cmpne	r2,r2,zero
    9ab0:	10803fcc 	andi	r2,r2,255
}
    9ab4:	e037883a 	mov	sp,fp
    9ab8:	df000017 	ldw	fp,0(sp)
    9abc:	dec00104 	addi	sp,sp,4
    9ac0:	f800283a 	ret

00009ac4 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    9ac4:	defff504 	addi	sp,sp,-44
    9ac8:	dfc00a15 	stw	ra,40(sp)
    9acc:	df000915 	stw	fp,36(sp)
    9ad0:	df000904 	addi	fp,sp,36
    9ad4:	e13ffc15 	stw	r4,-16(fp)
    9ad8:	e17ffd15 	stw	r5,-12(fp)
    9adc:	e1bffe15 	stw	r6,-8(fp)
    9ae0:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
    9ae4:	00bffa84 	movi	r2,-22
    9ae8:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
    9aec:	e0bffd17 	ldw	r2,-12(fp)
    9af0:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
    9af4:	e0bff817 	ldw	r2,-32(fp)
    9af8:	10800808 	cmpgei	r2,r2,32
    9afc:	1000271e 	bne	r2,zero,9b9c <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    9b00:	0005303a 	rdctl	r2,status
    9b04:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    9b08:	e0fffb17 	ldw	r3,-20(fp)
    9b0c:	00bfff84 	movi	r2,-2
    9b10:	1884703a 	and	r2,r3,r2
    9b14:	1001703a 	wrctl	status,r2
  
  return context;
    9b18:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
    9b1c:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
    9b20:	00800074 	movhi	r2,1
    9b24:	10abae04 	addi	r2,r2,-20808
    9b28:	e0fff817 	ldw	r3,-32(fp)
    9b2c:	180690fa 	slli	r3,r3,3
    9b30:	10c5883a 	add	r2,r2,r3
    9b34:	e0fffe17 	ldw	r3,-8(fp)
    9b38:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
    9b3c:	00800074 	movhi	r2,1
    9b40:	10abae04 	addi	r2,r2,-20808
    9b44:	e0fff817 	ldw	r3,-32(fp)
    9b48:	180690fa 	slli	r3,r3,3
    9b4c:	10c5883a 	add	r2,r2,r3
    9b50:	10800104 	addi	r2,r2,4
    9b54:	e0ffff17 	ldw	r3,-4(fp)
    9b58:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
    9b5c:	e0bffe17 	ldw	r2,-8(fp)
    9b60:	10000526 	beq	r2,zero,9b78 <alt_iic_isr_register+0xb4>
    9b64:	e0bff817 	ldw	r2,-32(fp)
    9b68:	100b883a 	mov	r5,r2
    9b6c:	e13ffc17 	ldw	r4,-16(fp)
    9b70:	00099640 	call	9964 <alt_ic_irq_enable>
    9b74:	00000406 	br	9b88 <alt_iic_isr_register+0xc4>
    9b78:	e0bff817 	ldw	r2,-32(fp)
    9b7c:	100b883a 	mov	r5,r2
    9b80:	e13ffc17 	ldw	r4,-16(fp)
    9b84:	00099ec0 	call	99ec <alt_ic_irq_disable>
    9b88:	e0bff715 	stw	r2,-36(fp)
    9b8c:	e0bffa17 	ldw	r2,-24(fp)
    9b90:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    9b94:	e0bff917 	ldw	r2,-28(fp)
    9b98:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
    9b9c:	e0bff717 	ldw	r2,-36(fp)
}
    9ba0:	e037883a 	mov	sp,fp
    9ba4:	dfc00117 	ldw	ra,4(sp)
    9ba8:	df000017 	ldw	fp,0(sp)
    9bac:	dec00204 	addi	sp,sp,8
    9bb0:	f800283a 	ret

00009bb4 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    9bb4:	defff804 	addi	sp,sp,-32
    9bb8:	dfc00715 	stw	ra,28(sp)
    9bbc:	df000615 	stw	fp,24(sp)
    9bc0:	dc000515 	stw	r16,20(sp)
    9bc4:	df000604 	addi	fp,sp,24
    9bc8:	e13ffb15 	stw	r4,-20(fp)
    9bcc:	e17ffc15 	stw	r5,-16(fp)
    9bd0:	e1bffd15 	stw	r6,-12(fp)
    9bd4:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
    9bd8:	e1bffe17 	ldw	r6,-8(fp)
    9bdc:	e17ffd17 	ldw	r5,-12(fp)
    9be0:	e13ffc17 	ldw	r4,-16(fp)
    9be4:	0009e3c0 	call	9e3c <open>
    9be8:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
    9bec:	e0bffa17 	ldw	r2,-24(fp)
    9bf0:	10002216 	blt	r2,zero,9c7c <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
    9bf4:	04000074 	movhi	r16,1
    9bf8:	842a8304 	addi	r16,r16,-22004
    9bfc:	e0bffa17 	ldw	r2,-24(fp)
    9c00:	01400304 	movi	r5,12
    9c04:	1009883a 	mov	r4,r2
    9c08:	0008f3c0 	call	8f3c <__mulsi3>
    9c0c:	8085883a 	add	r2,r16,r2
    9c10:	10c00017 	ldw	r3,0(r2)
    9c14:	e0bffb17 	ldw	r2,-20(fp)
    9c18:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    9c1c:	04000074 	movhi	r16,1
    9c20:	842a8304 	addi	r16,r16,-22004
    9c24:	e0bffa17 	ldw	r2,-24(fp)
    9c28:	01400304 	movi	r5,12
    9c2c:	1009883a 	mov	r4,r2
    9c30:	0008f3c0 	call	8f3c <__mulsi3>
    9c34:	8085883a 	add	r2,r16,r2
    9c38:	10800104 	addi	r2,r2,4
    9c3c:	10c00017 	ldw	r3,0(r2)
    9c40:	e0bffb17 	ldw	r2,-20(fp)
    9c44:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    9c48:	04000074 	movhi	r16,1
    9c4c:	842a8304 	addi	r16,r16,-22004
    9c50:	e0bffa17 	ldw	r2,-24(fp)
    9c54:	01400304 	movi	r5,12
    9c58:	1009883a 	mov	r4,r2
    9c5c:	0008f3c0 	call	8f3c <__mulsi3>
    9c60:	8085883a 	add	r2,r16,r2
    9c64:	10800204 	addi	r2,r2,8
    9c68:	10c00017 	ldw	r3,0(r2)
    9c6c:	e0bffb17 	ldw	r2,-20(fp)
    9c70:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
    9c74:	e13ffa17 	ldw	r4,-24(fp)
    9c78:	0009f980 	call	9f98 <alt_release_fd>
  }
} 
    9c7c:	0001883a 	nop
    9c80:	e6ffff04 	addi	sp,fp,-4
    9c84:	dfc00217 	ldw	ra,8(sp)
    9c88:	df000117 	ldw	fp,4(sp)
    9c8c:	dc000017 	ldw	r16,0(sp)
    9c90:	dec00304 	addi	sp,sp,12
    9c94:	f800283a 	ret

00009c98 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    9c98:	defffb04 	addi	sp,sp,-20
    9c9c:	dfc00415 	stw	ra,16(sp)
    9ca0:	df000315 	stw	fp,12(sp)
    9ca4:	df000304 	addi	fp,sp,12
    9ca8:	e13ffd15 	stw	r4,-12(fp)
    9cac:	e17ffe15 	stw	r5,-8(fp)
    9cb0:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    9cb4:	01c07fc4 	movi	r7,511
    9cb8:	01800044 	movi	r6,1
    9cbc:	e17ffd17 	ldw	r5,-12(fp)
    9cc0:	01000074 	movhi	r4,1
    9cc4:	212a8604 	addi	r4,r4,-21992
    9cc8:	0009bb40 	call	9bb4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    9ccc:	01c07fc4 	movi	r7,511
    9cd0:	000d883a 	mov	r6,zero
    9cd4:	e17ffe17 	ldw	r5,-8(fp)
    9cd8:	01000074 	movhi	r4,1
    9cdc:	212a8304 	addi	r4,r4,-22004
    9ce0:	0009bb40 	call	9bb4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    9ce4:	01c07fc4 	movi	r7,511
    9ce8:	01800044 	movi	r6,1
    9cec:	e17fff17 	ldw	r5,-4(fp)
    9cf0:	01000074 	movhi	r4,1
    9cf4:	212a8904 	addi	r4,r4,-21980
    9cf8:	0009bb40 	call	9bb4 <alt_open_fd>
}  
    9cfc:	0001883a 	nop
    9d00:	e037883a 	mov	sp,fp
    9d04:	dfc00117 	ldw	ra,4(sp)
    9d08:	df000017 	ldw	fp,0(sp)
    9d0c:	dec00204 	addi	sp,sp,8
    9d10:	f800283a 	ret

00009d14 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    9d14:	defffe04 	addi	sp,sp,-8
    9d18:	dfc00115 	stw	ra,4(sp)
    9d1c:	df000015 	stw	fp,0(sp)
    9d20:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    9d24:	d0a00717 	ldw	r2,-32740(gp)
    9d28:	10000326 	beq	r2,zero,9d38 <alt_get_errno+0x24>
    9d2c:	d0a00717 	ldw	r2,-32740(gp)
    9d30:	103ee83a 	callr	r2
    9d34:	00000106 	br	9d3c <alt_get_errno+0x28>
    9d38:	d0a0c304 	addi	r2,gp,-31988
}
    9d3c:	e037883a 	mov	sp,fp
    9d40:	dfc00117 	ldw	ra,4(sp)
    9d44:	df000017 	ldw	fp,0(sp)
    9d48:	dec00204 	addi	sp,sp,8
    9d4c:	f800283a 	ret

00009d50 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
    9d50:	defffb04 	addi	sp,sp,-20
    9d54:	dfc00415 	stw	ra,16(sp)
    9d58:	df000315 	stw	fp,12(sp)
    9d5c:	dc000215 	stw	r16,8(sp)
    9d60:	df000304 	addi	fp,sp,12
    9d64:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    9d68:	e0bffe17 	ldw	r2,-8(fp)
    9d6c:	10800217 	ldw	r2,8(r2)
    9d70:	10d00034 	orhi	r3,r2,16384
    9d74:	e0bffe17 	ldw	r2,-8(fp)
    9d78:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    9d7c:	e03ffd15 	stw	zero,-12(fp)
    9d80:	00002306 	br	9e10 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    9d84:	04000074 	movhi	r16,1
    9d88:	842a8304 	addi	r16,r16,-22004
    9d8c:	e0bffd17 	ldw	r2,-12(fp)
    9d90:	01400304 	movi	r5,12
    9d94:	1009883a 	mov	r4,r2
    9d98:	0008f3c0 	call	8f3c <__mulsi3>
    9d9c:	8085883a 	add	r2,r16,r2
    9da0:	10c00017 	ldw	r3,0(r2)
    9da4:	e0bffe17 	ldw	r2,-8(fp)
    9da8:	10800017 	ldw	r2,0(r2)
    9dac:	1880151e 	bne	r3,r2,9e04 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    9db0:	04000074 	movhi	r16,1
    9db4:	842a8304 	addi	r16,r16,-22004
    9db8:	e0bffd17 	ldw	r2,-12(fp)
    9dbc:	01400304 	movi	r5,12
    9dc0:	1009883a 	mov	r4,r2
    9dc4:	0008f3c0 	call	8f3c <__mulsi3>
    9dc8:	8085883a 	add	r2,r16,r2
    9dcc:	10800204 	addi	r2,r2,8
    9dd0:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    9dd4:	10000b0e 	bge	r2,zero,9e04 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    9dd8:	01400304 	movi	r5,12
    9ddc:	e13ffd17 	ldw	r4,-12(fp)
    9de0:	0008f3c0 	call	8f3c <__mulsi3>
    9de4:	1007883a 	mov	r3,r2
    9de8:	00800074 	movhi	r2,1
    9dec:	10aa8304 	addi	r2,r2,-22004
    9df0:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    9df4:	e0bffe17 	ldw	r2,-8(fp)
    9df8:	18800226 	beq	r3,r2,9e04 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
    9dfc:	00bffcc4 	movi	r2,-13
    9e00:	00000806 	br	9e24 <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    9e04:	e0bffd17 	ldw	r2,-12(fp)
    9e08:	10800044 	addi	r2,r2,1
    9e0c:	e0bffd15 	stw	r2,-12(fp)
    9e10:	d0a00617 	ldw	r2,-32744(gp)
    9e14:	1007883a 	mov	r3,r2
    9e18:	e0bffd17 	ldw	r2,-12(fp)
    9e1c:	18bfd92e 	bgeu	r3,r2,9d84 <_gp+0xffff71f8>
    }
  }
  
  /* The device is not locked */
 
  return 0;
    9e20:	0005883a 	mov	r2,zero
}
    9e24:	e6ffff04 	addi	sp,fp,-4
    9e28:	dfc00217 	ldw	ra,8(sp)
    9e2c:	df000117 	ldw	fp,4(sp)
    9e30:	dc000017 	ldw	r16,0(sp)
    9e34:	dec00304 	addi	sp,sp,12
    9e38:	f800283a 	ret

00009e3c <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    9e3c:	defff604 	addi	sp,sp,-40
    9e40:	dfc00915 	stw	ra,36(sp)
    9e44:	df000815 	stw	fp,32(sp)
    9e48:	df000804 	addi	fp,sp,32
    9e4c:	e13ffd15 	stw	r4,-12(fp)
    9e50:	e17ffe15 	stw	r5,-8(fp)
    9e54:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
    9e58:	00bfffc4 	movi	r2,-1
    9e5c:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
    9e60:	00bffb44 	movi	r2,-19
    9e64:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
    9e68:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    9e6c:	d1600404 	addi	r5,gp,-32752
    9e70:	e13ffd17 	ldw	r4,-12(fp)
    9e74:	000a1e40 	call	a1e4 <alt_find_dev>
    9e78:	e0bff815 	stw	r2,-32(fp)
    9e7c:	e0bff817 	ldw	r2,-32(fp)
    9e80:	1000051e 	bne	r2,zero,9e98 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    9e84:	e13ffd17 	ldw	r4,-12(fp)
    9e88:	000a2740 	call	a274 <alt_find_file>
    9e8c:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
    9e90:	00800044 	movi	r2,1
    9e94:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    9e98:	e0bff817 	ldw	r2,-32(fp)
    9e9c:	10002b26 	beq	r2,zero,9f4c <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
    9ea0:	e13ff817 	ldw	r4,-32(fp)
    9ea4:	000a37c0 	call	a37c <alt_get_fd>
    9ea8:	e0bff915 	stw	r2,-28(fp)
    9eac:	e0bff917 	ldw	r2,-28(fp)
    9eb0:	1000030e 	bge	r2,zero,9ec0 <open+0x84>
    {
      status = index;
    9eb4:	e0bff917 	ldw	r2,-28(fp)
    9eb8:	e0bffa15 	stw	r2,-24(fp)
    9ebc:	00002506 	br	9f54 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
    9ec0:	01400304 	movi	r5,12
    9ec4:	e13ff917 	ldw	r4,-28(fp)
    9ec8:	0008f3c0 	call	8f3c <__mulsi3>
    9ecc:	1007883a 	mov	r3,r2
    9ed0:	00800074 	movhi	r2,1
    9ed4:	10aa8304 	addi	r2,r2,-22004
    9ed8:	1885883a 	add	r2,r3,r2
    9edc:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    9ee0:	e0fffe17 	ldw	r3,-8(fp)
    9ee4:	00900034 	movhi	r2,16384
    9ee8:	10bfffc4 	addi	r2,r2,-1
    9eec:	1886703a 	and	r3,r3,r2
    9ef0:	e0bffc17 	ldw	r2,-16(fp)
    9ef4:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
    9ef8:	e0bffb17 	ldw	r2,-20(fp)
    9efc:	1000051e 	bne	r2,zero,9f14 <open+0xd8>
    9f00:	e13ffc17 	ldw	r4,-16(fp)
    9f04:	0009d500 	call	9d50 <alt_file_locked>
    9f08:	e0bffa15 	stw	r2,-24(fp)
    9f0c:	e0bffa17 	ldw	r2,-24(fp)
    9f10:	10001016 	blt	r2,zero,9f54 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    9f14:	e0bff817 	ldw	r2,-32(fp)
    9f18:	10800317 	ldw	r2,12(r2)
    9f1c:	10000826 	beq	r2,zero,9f40 <open+0x104>
    9f20:	e0bff817 	ldw	r2,-32(fp)
    9f24:	10800317 	ldw	r2,12(r2)
    9f28:	e1ffff17 	ldw	r7,-4(fp)
    9f2c:	e1bffe17 	ldw	r6,-8(fp)
    9f30:	e17ffd17 	ldw	r5,-12(fp)
    9f34:	e13ffc17 	ldw	r4,-16(fp)
    9f38:	103ee83a 	callr	r2
    9f3c:	00000106 	br	9f44 <open+0x108>
    9f40:	0005883a 	mov	r2,zero
    9f44:	e0bffa15 	stw	r2,-24(fp)
    9f48:	00000206 	br	9f54 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
    9f4c:	00bffb44 	movi	r2,-19
    9f50:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    9f54:	e0bffa17 	ldw	r2,-24(fp)
    9f58:	1000090e 	bge	r2,zero,9f80 <open+0x144>
  {
    alt_release_fd (index);  
    9f5c:	e13ff917 	ldw	r4,-28(fp)
    9f60:	0009f980 	call	9f98 <alt_release_fd>
    ALT_ERRNO = -status;
    9f64:	0009d140 	call	9d14 <alt_get_errno>
    9f68:	1007883a 	mov	r3,r2
    9f6c:	e0bffa17 	ldw	r2,-24(fp)
    9f70:	0085c83a 	sub	r2,zero,r2
    9f74:	18800015 	stw	r2,0(r3)
    return -1;
    9f78:	00bfffc4 	movi	r2,-1
    9f7c:	00000106 	br	9f84 <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
    9f80:	e0bff917 	ldw	r2,-28(fp)
}
    9f84:	e037883a 	mov	sp,fp
    9f88:	dfc00117 	ldw	ra,4(sp)
    9f8c:	df000017 	ldw	fp,0(sp)
    9f90:	dec00204 	addi	sp,sp,8
    9f94:	f800283a 	ret

00009f98 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    9f98:	defffc04 	addi	sp,sp,-16
    9f9c:	dfc00315 	stw	ra,12(sp)
    9fa0:	df000215 	stw	fp,8(sp)
    9fa4:	dc000115 	stw	r16,4(sp)
    9fa8:	df000204 	addi	fp,sp,8
    9fac:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
    9fb0:	e0bffe17 	ldw	r2,-8(fp)
    9fb4:	108000d0 	cmplti	r2,r2,3
    9fb8:	1000111e 	bne	r2,zero,a000 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
    9fbc:	04000074 	movhi	r16,1
    9fc0:	842a8304 	addi	r16,r16,-22004
    9fc4:	e0bffe17 	ldw	r2,-8(fp)
    9fc8:	01400304 	movi	r5,12
    9fcc:	1009883a 	mov	r4,r2
    9fd0:	0008f3c0 	call	8f3c <__mulsi3>
    9fd4:	8085883a 	add	r2,r16,r2
    9fd8:	10800204 	addi	r2,r2,8
    9fdc:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    9fe0:	04000074 	movhi	r16,1
    9fe4:	842a8304 	addi	r16,r16,-22004
    9fe8:	e0bffe17 	ldw	r2,-8(fp)
    9fec:	01400304 	movi	r5,12
    9ff0:	1009883a 	mov	r4,r2
    9ff4:	0008f3c0 	call	8f3c <__mulsi3>
    9ff8:	8085883a 	add	r2,r16,r2
    9ffc:	10000015 	stw	zero,0(r2)
  }
}
    a000:	0001883a 	nop
    a004:	e6ffff04 	addi	sp,fp,-4
    a008:	dfc00217 	ldw	ra,8(sp)
    a00c:	df000117 	ldw	fp,4(sp)
    a010:	dc000017 	ldw	r16,0(sp)
    a014:	dec00304 	addi	sp,sp,12
    a018:	f800283a 	ret

0000a01c <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
    a01c:	defffa04 	addi	sp,sp,-24
    a020:	df000515 	stw	fp,20(sp)
    a024:	df000504 	addi	fp,sp,20
    a028:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    a02c:	0005303a 	rdctl	r2,status
    a030:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    a034:	e0fffc17 	ldw	r3,-16(fp)
    a038:	00bfff84 	movi	r2,-2
    a03c:	1884703a 	and	r2,r3,r2
    a040:	1001703a 	wrctl	status,r2
  
  return context;
    a044:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
    a048:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
    a04c:	e0bfff17 	ldw	r2,-4(fp)
    a050:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
    a054:	e0bffd17 	ldw	r2,-12(fp)
    a058:	10800017 	ldw	r2,0(r2)
    a05c:	e0fffd17 	ldw	r3,-12(fp)
    a060:	18c00117 	ldw	r3,4(r3)
    a064:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
    a068:	e0bffd17 	ldw	r2,-12(fp)
    a06c:	10800117 	ldw	r2,4(r2)
    a070:	e0fffd17 	ldw	r3,-12(fp)
    a074:	18c00017 	ldw	r3,0(r3)
    a078:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
    a07c:	e0bffd17 	ldw	r2,-12(fp)
    a080:	e0fffd17 	ldw	r3,-12(fp)
    a084:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
    a088:	e0bffd17 	ldw	r2,-12(fp)
    a08c:	e0fffd17 	ldw	r3,-12(fp)
    a090:	10c00015 	stw	r3,0(r2)
    a094:	e0bffb17 	ldw	r2,-20(fp)
    a098:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    a09c:	e0bffe17 	ldw	r2,-8(fp)
    a0a0:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
    a0a4:	0001883a 	nop
    a0a8:	e037883a 	mov	sp,fp
    a0ac:	df000017 	ldw	fp,0(sp)
    a0b0:	dec00104 	addi	sp,sp,4
    a0b4:	f800283a 	ret

0000a0b8 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
    a0b8:	defffb04 	addi	sp,sp,-20
    a0bc:	dfc00415 	stw	ra,16(sp)
    a0c0:	df000315 	stw	fp,12(sp)
    a0c4:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
    a0c8:	d0a00917 	ldw	r2,-32732(gp)
    a0cc:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
    a0d0:	d0a0c917 	ldw	r2,-31964(gp)
    a0d4:	10800044 	addi	r2,r2,1
    a0d8:	d0a0c915 	stw	r2,-31964(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    a0dc:	00002e06 	br	a198 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
    a0e0:	e0bffd17 	ldw	r2,-12(fp)
    a0e4:	10800017 	ldw	r2,0(r2)
    a0e8:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
    a0ec:	e0bffd17 	ldw	r2,-12(fp)
    a0f0:	10800403 	ldbu	r2,16(r2)
    a0f4:	10803fcc 	andi	r2,r2,255
    a0f8:	10000426 	beq	r2,zero,a10c <alt_tick+0x54>
    a0fc:	d0a0c917 	ldw	r2,-31964(gp)
    a100:	1000021e 	bne	r2,zero,a10c <alt_tick+0x54>
    {
      alarm->rollover = 0;
    a104:	e0bffd17 	ldw	r2,-12(fp)
    a108:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
    a10c:	e0bffd17 	ldw	r2,-12(fp)
    a110:	10800217 	ldw	r2,8(r2)
    a114:	d0e0c917 	ldw	r3,-31964(gp)
    a118:	18801d36 	bltu	r3,r2,a190 <alt_tick+0xd8>
    a11c:	e0bffd17 	ldw	r2,-12(fp)
    a120:	10800403 	ldbu	r2,16(r2)
    a124:	10803fcc 	andi	r2,r2,255
    a128:	1000191e 	bne	r2,zero,a190 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
    a12c:	e0bffd17 	ldw	r2,-12(fp)
    a130:	10800317 	ldw	r2,12(r2)
    a134:	e0fffd17 	ldw	r3,-12(fp)
    a138:	18c00517 	ldw	r3,20(r3)
    a13c:	1809883a 	mov	r4,r3
    a140:	103ee83a 	callr	r2
    a144:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
    a148:	e0bfff17 	ldw	r2,-4(fp)
    a14c:	1000031e 	bne	r2,zero,a15c <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
    a150:	e13ffd17 	ldw	r4,-12(fp)
    a154:	000a01c0 	call	a01c <alt_alarm_stop>
    a158:	00000d06 	br	a190 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
    a15c:	e0bffd17 	ldw	r2,-12(fp)
    a160:	10c00217 	ldw	r3,8(r2)
    a164:	e0bfff17 	ldw	r2,-4(fp)
    a168:	1887883a 	add	r3,r3,r2
    a16c:	e0bffd17 	ldw	r2,-12(fp)
    a170:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
    a174:	e0bffd17 	ldw	r2,-12(fp)
    a178:	10c00217 	ldw	r3,8(r2)
    a17c:	d0a0c917 	ldw	r2,-31964(gp)
    a180:	1880032e 	bgeu	r3,r2,a190 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
    a184:	e0bffd17 	ldw	r2,-12(fp)
    a188:	00c00044 	movi	r3,1
    a18c:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
    a190:	e0bffe17 	ldw	r2,-8(fp)
    a194:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    a198:	e0fffd17 	ldw	r3,-12(fp)
    a19c:	d0a00904 	addi	r2,gp,-32732
    a1a0:	18bfcf1e 	bne	r3,r2,a0e0 <_gp+0xffff7554>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
    a1a4:	0001883a 	nop
}
    a1a8:	0001883a 	nop
    a1ac:	e037883a 	mov	sp,fp
    a1b0:	dfc00117 	ldw	ra,4(sp)
    a1b4:	df000017 	ldw	fp,0(sp)
    a1b8:	dec00204 	addi	sp,sp,8
    a1bc:	f800283a 	ret

0000a1c0 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    a1c0:	deffff04 	addi	sp,sp,-4
    a1c4:	df000015 	stw	fp,0(sp)
    a1c8:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
    a1cc:	000170fa 	wrctl	ienable,zero
}
    a1d0:	0001883a 	nop
    a1d4:	e037883a 	mov	sp,fp
    a1d8:	df000017 	ldw	fp,0(sp)
    a1dc:	dec00104 	addi	sp,sp,4
    a1e0:	f800283a 	ret

0000a1e4 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    a1e4:	defffa04 	addi	sp,sp,-24
    a1e8:	dfc00515 	stw	ra,20(sp)
    a1ec:	df000415 	stw	fp,16(sp)
    a1f0:	df000404 	addi	fp,sp,16
    a1f4:	e13ffe15 	stw	r4,-8(fp)
    a1f8:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
    a1fc:	e0bfff17 	ldw	r2,-4(fp)
    a200:	10800017 	ldw	r2,0(r2)
    a204:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
    a208:	e13ffe17 	ldw	r4,-8(fp)
    a20c:	0008d140 	call	8d14 <strlen>
    a210:	10800044 	addi	r2,r2,1
    a214:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    a218:	00000d06 	br	a250 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    a21c:	e0bffc17 	ldw	r2,-16(fp)
    a220:	10800217 	ldw	r2,8(r2)
    a224:	e0fffd17 	ldw	r3,-12(fp)
    a228:	180d883a 	mov	r6,r3
    a22c:	e17ffe17 	ldw	r5,-8(fp)
    a230:	1009883a 	mov	r4,r2
    a234:	000a5100 	call	a510 <memcmp>
    a238:	1000021e 	bne	r2,zero,a244 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
    a23c:	e0bffc17 	ldw	r2,-16(fp)
    a240:	00000706 	br	a260 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
    a244:	e0bffc17 	ldw	r2,-16(fp)
    a248:	10800017 	ldw	r2,0(r2)
    a24c:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    a250:	e0fffc17 	ldw	r3,-16(fp)
    a254:	e0bfff17 	ldw	r2,-4(fp)
    a258:	18bff01e 	bne	r3,r2,a21c <_gp+0xffff7690>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
    a25c:	0005883a 	mov	r2,zero
}
    a260:	e037883a 	mov	sp,fp
    a264:	dfc00117 	ldw	ra,4(sp)
    a268:	df000017 	ldw	fp,0(sp)
    a26c:	dec00204 	addi	sp,sp,8
    a270:	f800283a 	ret

0000a274 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    a274:	defffb04 	addi	sp,sp,-20
    a278:	dfc00415 	stw	ra,16(sp)
    a27c:	df000315 	stw	fp,12(sp)
    a280:	df000304 	addi	fp,sp,12
    a284:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    a288:	d0a00217 	ldw	r2,-32760(gp)
    a28c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    a290:	00003106 	br	a358 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
    a294:	e0bffd17 	ldw	r2,-12(fp)
    a298:	10800217 	ldw	r2,8(r2)
    a29c:	1009883a 	mov	r4,r2
    a2a0:	0008d140 	call	8d14 <strlen>
    a2a4:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
    a2a8:	e0bffd17 	ldw	r2,-12(fp)
    a2ac:	10c00217 	ldw	r3,8(r2)
    a2b0:	e0bffe17 	ldw	r2,-8(fp)
    a2b4:	10bfffc4 	addi	r2,r2,-1
    a2b8:	1885883a 	add	r2,r3,r2
    a2bc:	10800003 	ldbu	r2,0(r2)
    a2c0:	10803fcc 	andi	r2,r2,255
    a2c4:	1080201c 	xori	r2,r2,128
    a2c8:	10bfe004 	addi	r2,r2,-128
    a2cc:	10800bd8 	cmpnei	r2,r2,47
    a2d0:	1000031e 	bne	r2,zero,a2e0 <alt_find_file+0x6c>
    {
      len -= 1;
    a2d4:	e0bffe17 	ldw	r2,-8(fp)
    a2d8:	10bfffc4 	addi	r2,r2,-1
    a2dc:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    a2e0:	e0bffe17 	ldw	r2,-8(fp)
    a2e4:	e0ffff17 	ldw	r3,-4(fp)
    a2e8:	1885883a 	add	r2,r3,r2
    a2ec:	10800003 	ldbu	r2,0(r2)
    a2f0:	10803fcc 	andi	r2,r2,255
    a2f4:	1080201c 	xori	r2,r2,128
    a2f8:	10bfe004 	addi	r2,r2,-128
    a2fc:	10800be0 	cmpeqi	r2,r2,47
    a300:	1000081e 	bne	r2,zero,a324 <alt_find_file+0xb0>
    a304:	e0bffe17 	ldw	r2,-8(fp)
    a308:	e0ffff17 	ldw	r3,-4(fp)
    a30c:	1885883a 	add	r2,r3,r2
    a310:	10800003 	ldbu	r2,0(r2)
    a314:	10803fcc 	andi	r2,r2,255
    a318:	1080201c 	xori	r2,r2,128
    a31c:	10bfe004 	addi	r2,r2,-128
    a320:	10000a1e 	bne	r2,zero,a34c <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    a324:	e0bffd17 	ldw	r2,-12(fp)
    a328:	10800217 	ldw	r2,8(r2)
    a32c:	e0fffe17 	ldw	r3,-8(fp)
    a330:	180d883a 	mov	r6,r3
    a334:	e17fff17 	ldw	r5,-4(fp)
    a338:	1009883a 	mov	r4,r2
    a33c:	000a5100 	call	a510 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    a340:	1000021e 	bne	r2,zero,a34c <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
    a344:	e0bffd17 	ldw	r2,-12(fp)
    a348:	00000706 	br	a368 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
    a34c:	e0bffd17 	ldw	r2,-12(fp)
    a350:	10800017 	ldw	r2,0(r2)
    a354:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    a358:	e0fffd17 	ldw	r3,-12(fp)
    a35c:	d0a00204 	addi	r2,gp,-32760
    a360:	18bfcc1e 	bne	r3,r2,a294 <_gp+0xffff7708>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
    a364:	0005883a 	mov	r2,zero
}
    a368:	e037883a 	mov	sp,fp
    a36c:	dfc00117 	ldw	ra,4(sp)
    a370:	df000017 	ldw	fp,0(sp)
    a374:	dec00204 	addi	sp,sp,8
    a378:	f800283a 	ret

0000a37c <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    a37c:	defffa04 	addi	sp,sp,-24
    a380:	dfc00515 	stw	ra,20(sp)
    a384:	df000415 	stw	fp,16(sp)
    a388:	dc000315 	stw	r16,12(sp)
    a38c:	df000404 	addi	fp,sp,16
    a390:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
    a394:	00bffa04 	movi	r2,-24
    a398:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    a39c:	e03ffc15 	stw	zero,-16(fp)
    a3a0:	00001d06 	br	a418 <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
    a3a4:	04000074 	movhi	r16,1
    a3a8:	842a8304 	addi	r16,r16,-22004
    a3ac:	e0bffc17 	ldw	r2,-16(fp)
    a3b0:	01400304 	movi	r5,12
    a3b4:	1009883a 	mov	r4,r2
    a3b8:	0008f3c0 	call	8f3c <__mulsi3>
    a3bc:	8085883a 	add	r2,r16,r2
    a3c0:	10800017 	ldw	r2,0(r2)
    a3c4:	1000111e 	bne	r2,zero,a40c <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
    a3c8:	04000074 	movhi	r16,1
    a3cc:	842a8304 	addi	r16,r16,-22004
    a3d0:	e0bffc17 	ldw	r2,-16(fp)
    a3d4:	01400304 	movi	r5,12
    a3d8:	1009883a 	mov	r4,r2
    a3dc:	0008f3c0 	call	8f3c <__mulsi3>
    a3e0:	8085883a 	add	r2,r16,r2
    a3e4:	e0fffe17 	ldw	r3,-8(fp)
    a3e8:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
    a3ec:	d0e00617 	ldw	r3,-32744(gp)
    a3f0:	e0bffc17 	ldw	r2,-16(fp)
    a3f4:	1880020e 	bge	r3,r2,a400 <alt_get_fd+0x84>
      {
        alt_max_fd = i;
    a3f8:	e0bffc17 	ldw	r2,-16(fp)
    a3fc:	d0a00615 	stw	r2,-32744(gp)
      }
      rc = i;
    a400:	e0bffc17 	ldw	r2,-16(fp)
    a404:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
    a408:	00000606 	br	a424 <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    a40c:	e0bffc17 	ldw	r2,-16(fp)
    a410:	10800044 	addi	r2,r2,1
    a414:	e0bffc15 	stw	r2,-16(fp)
    a418:	e0bffc17 	ldw	r2,-16(fp)
    a41c:	10800810 	cmplti	r2,r2,32
    a420:	103fe01e 	bne	r2,zero,a3a4 <_gp+0xffff7818>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
    a424:	e0bffd17 	ldw	r2,-12(fp)
}
    a428:	e6ffff04 	addi	sp,fp,-4
    a42c:	dfc00217 	ldw	ra,8(sp)
    a430:	df000117 	ldw	fp,4(sp)
    a434:	dc000017 	ldw	r16,0(sp)
    a438:	dec00304 	addi	sp,sp,12
    a43c:	f800283a 	ret

0000a440 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
    a440:	defffe04 	addi	sp,sp,-8
    a444:	df000115 	stw	fp,4(sp)
    a448:	df000104 	addi	fp,sp,4
    a44c:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
    a450:	e0bfff17 	ldw	r2,-4(fp)
    a454:	10bffe84 	addi	r2,r2,-6
    a458:	10c00428 	cmpgeui	r3,r2,16
    a45c:	18001a1e 	bne	r3,zero,a4c8 <alt_exception_cause_generated_bad_addr+0x88>
    a460:	100690ba 	slli	r3,r2,2
    a464:	00800074 	movhi	r2,1
    a468:	10a91e04 	addi	r2,r2,-23432
    a46c:	1885883a 	add	r2,r3,r2
    a470:	10800017 	ldw	r2,0(r2)
    a474:	1000683a 	jmp	r2
    a478:	0000a4b8 	rdprs	zero,zero,658
    a47c:	0000a4b8 	rdprs	zero,zero,658
    a480:	0000a4c8 	cmpgei	zero,zero,659
    a484:	0000a4c8 	cmpgei	zero,zero,659
    a488:	0000a4c8 	cmpgei	zero,zero,659
    a48c:	0000a4b8 	rdprs	zero,zero,658
    a490:	0000a4c0 	call	a4c <__alt_mem_onchip_memory-0x75b4>
    a494:	0000a4c8 	cmpgei	zero,zero,659
    a498:	0000a4b8 	rdprs	zero,zero,658
    a49c:	0000a4b8 	rdprs	zero,zero,658
    a4a0:	0000a4c8 	cmpgei	zero,zero,659
    a4a4:	0000a4b8 	rdprs	zero,zero,658
    a4a8:	0000a4c0 	call	a4c <__alt_mem_onchip_memory-0x75b4>
    a4ac:	0000a4c8 	cmpgei	zero,zero,659
    a4b0:	0000a4c8 	cmpgei	zero,zero,659
    a4b4:	0000a4b8 	rdprs	zero,zero,658
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
    a4b8:	00800044 	movi	r2,1
    a4bc:	00000306 	br	a4cc <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
    a4c0:	0005883a 	mov	r2,zero
    a4c4:	00000106 	br	a4cc <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
    a4c8:	0005883a 	mov	r2,zero
  }
}
    a4cc:	e037883a 	mov	sp,fp
    a4d0:	df000017 	ldw	fp,0(sp)
    a4d4:	dec00104 	addi	sp,sp,4
    a4d8:	f800283a 	ret

0000a4dc <atexit>:
    a4dc:	200b883a 	mov	r5,r4
    a4e0:	000f883a 	mov	r7,zero
    a4e4:	000d883a 	mov	r6,zero
    a4e8:	0009883a 	mov	r4,zero
    a4ec:	000a5401 	jmpi	a540 <__register_exitproc>

0000a4f0 <exit>:
    a4f0:	defffe04 	addi	sp,sp,-8
    a4f4:	000b883a 	mov	r5,zero
    a4f8:	dc000015 	stw	r16,0(sp)
    a4fc:	dfc00115 	stw	ra,4(sp)
    a500:	2021883a 	mov	r16,r4
    a504:	000a6980 	call	a698 <__call_exitprocs>
    a508:	8009883a 	mov	r4,r16
    a50c:	000a8280 	call	a828 <_exit>

0000a510 <memcmp>:
    a510:	218d883a 	add	r6,r4,r6
    a514:	21800826 	beq	r4,r6,a538 <memcmp+0x28>
    a518:	20800003 	ldbu	r2,0(r4)
    a51c:	28c00003 	ldbu	r3,0(r5)
    a520:	10c00226 	beq	r2,r3,a52c <memcmp+0x1c>
    a524:	10c5c83a 	sub	r2,r2,r3
    a528:	f800283a 	ret
    a52c:	21000044 	addi	r4,r4,1
    a530:	29400044 	addi	r5,r5,1
    a534:	003ff706 	br	a514 <_gp+0xffff7988>
    a538:	0005883a 	mov	r2,zero
    a53c:	f800283a 	ret

0000a540 <__register_exitproc>:
    a540:	00800074 	movhi	r2,1
    a544:	10aae304 	addi	r2,r2,-21620
    a548:	10c00017 	ldw	r3,0(r2)
    a54c:	defff904 	addi	sp,sp,-28
    a550:	dc000015 	stw	r16,0(sp)
    a554:	1c000c17 	ldw	r16,48(r3)
    a558:	dd400515 	stw	r21,20(sp)
    a55c:	dd000415 	stw	r20,16(sp)
    a560:	dcc00315 	stw	r19,12(sp)
    a564:	dc800215 	stw	r18,8(sp)
    a568:	dc400115 	stw	r17,4(sp)
    a56c:	dfc00615 	stw	ra,24(sp)
    a570:	202b883a 	mov	r21,r4
    a574:	2823883a 	mov	r17,r5
    a578:	3027883a 	mov	r19,r6
    a57c:	3825883a 	mov	r18,r7
    a580:	1029883a 	mov	r20,r2
    a584:	8000021e 	bne	r16,zero,a590 <__register_exitproc+0x50>
    a588:	1c000d04 	addi	r16,r3,52
    a58c:	1c000c15 	stw	r16,48(r3)
    a590:	80800117 	ldw	r2,4(r16)
    a594:	00c007c4 	movi	r3,31
    a598:	1880110e 	bge	r3,r2,a5e0 <__register_exitproc+0xa0>
    a59c:	00800034 	movhi	r2,0
    a5a0:	10800004 	addi	r2,r2,0
    a5a4:	1000021e 	bne	r2,zero,a5b0 <__register_exitproc+0x70>
    a5a8:	00bfffc4 	movi	r2,-1
    a5ac:	00003106 	br	a674 <__register_exitproc+0x134>
    a5b0:	01002304 	movi	r4,140
    a5b4:	00000000 	call	0 <__alt_mem_onchip_memory-0x8000>
    a5b8:	1021883a 	mov	r16,r2
    a5bc:	103ffa26 	beq	r2,zero,a5a8 <_gp+0xffff7a1c>
    a5c0:	10000115 	stw	zero,4(r2)
    a5c4:	a0800017 	ldw	r2,0(r20)
    a5c8:	10c00c17 	ldw	r3,48(r2)
    a5cc:	80c00015 	stw	r3,0(r16)
    a5d0:	14000c15 	stw	r16,48(r2)
    a5d4:	80002215 	stw	zero,136(r16)
    a5d8:	a8001d26 	beq	r21,zero,a650 <__register_exitproc+0x110>
    a5dc:	00000606 	br	a5f8 <__register_exitproc+0xb8>
    a5e0:	a8001b26 	beq	r21,zero,a650 <__register_exitproc+0x110>
    a5e4:	80802217 	ldw	r2,136(r16)
    a5e8:	1000091e 	bne	r2,zero,a610 <__register_exitproc+0xd0>
    a5ec:	00800034 	movhi	r2,0
    a5f0:	10800004 	addi	r2,r2,0
    a5f4:	103fec26 	beq	r2,zero,a5a8 <_gp+0xffff7a1c>
    a5f8:	01004204 	movi	r4,264
    a5fc:	00000000 	call	0 <__alt_mem_onchip_memory-0x8000>
    a600:	103fe926 	beq	r2,zero,a5a8 <_gp+0xffff7a1c>
    a604:	10004015 	stw	zero,256(r2)
    a608:	10004115 	stw	zero,260(r2)
    a60c:	80802215 	stw	r2,136(r16)
    a610:	81400117 	ldw	r5,4(r16)
    a614:	01000044 	movi	r4,1
    a618:	2947883a 	add	r3,r5,r5
    a61c:	18c7883a 	add	r3,r3,r3
    a620:	10c7883a 	add	r3,r2,r3
    a624:	1cc00015 	stw	r19,0(r3)
    a628:	2148983a 	sll	r4,r4,r5
    a62c:	11404017 	ldw	r5,256(r2)
    a630:	290ab03a 	or	r5,r5,r4
    a634:	11404015 	stw	r5,256(r2)
    a638:	1c802015 	stw	r18,128(r3)
    a63c:	00c00084 	movi	r3,2
    a640:	a8c0031e 	bne	r21,r3,a650 <__register_exitproc+0x110>
    a644:	10c04117 	ldw	r3,260(r2)
    a648:	1908b03a 	or	r4,r3,r4
    a64c:	11004115 	stw	r4,260(r2)
    a650:	80800117 	ldw	r2,4(r16)
    a654:	10c00044 	addi	r3,r2,1
    a658:	10800084 	addi	r2,r2,2
    a65c:	1085883a 	add	r2,r2,r2
    a660:	1085883a 	add	r2,r2,r2
    a664:	80c00115 	stw	r3,4(r16)
    a668:	80a1883a 	add	r16,r16,r2
    a66c:	84400015 	stw	r17,0(r16)
    a670:	0005883a 	mov	r2,zero
    a674:	dfc00617 	ldw	ra,24(sp)
    a678:	dd400517 	ldw	r21,20(sp)
    a67c:	dd000417 	ldw	r20,16(sp)
    a680:	dcc00317 	ldw	r19,12(sp)
    a684:	dc800217 	ldw	r18,8(sp)
    a688:	dc400117 	ldw	r17,4(sp)
    a68c:	dc000017 	ldw	r16,0(sp)
    a690:	dec00704 	addi	sp,sp,28
    a694:	f800283a 	ret

0000a698 <__call_exitprocs>:
    a698:	defff504 	addi	sp,sp,-44
    a69c:	dd000515 	stw	r20,20(sp)
    a6a0:	05000074 	movhi	r20,1
    a6a4:	dc800315 	stw	r18,12(sp)
    a6a8:	dfc00a15 	stw	ra,40(sp)
    a6ac:	df000915 	stw	fp,36(sp)
    a6b0:	ddc00815 	stw	r23,32(sp)
    a6b4:	dd800715 	stw	r22,28(sp)
    a6b8:	dd400615 	stw	r21,24(sp)
    a6bc:	dcc00415 	stw	r19,16(sp)
    a6c0:	dc400215 	stw	r17,8(sp)
    a6c4:	dc000115 	stw	r16,4(sp)
    a6c8:	d9000015 	stw	r4,0(sp)
    a6cc:	2825883a 	mov	r18,r5
    a6d0:	a52ae304 	addi	r20,r20,-21620
    a6d4:	a4400017 	ldw	r17,0(r20)
    a6d8:	8cc00c17 	ldw	r19,48(r17)
    a6dc:	8c400c04 	addi	r17,r17,48
    a6e0:	98004526 	beq	r19,zero,a7f8 <__call_exitprocs+0x160>
    a6e4:	9c000117 	ldw	r16,4(r19)
    a6e8:	00900034 	movhi	r2,16384
    a6ec:	10bfffc4 	addi	r2,r2,-1
    a6f0:	9d402217 	ldw	r21,136(r19)
    a6f4:	85bfffc4 	addi	r22,r16,-1
    a6f8:	80a1883a 	add	r16,r16,r2
    a6fc:	8421883a 	add	r16,r16,r16
    a700:	8421883a 	add	r16,r16,r16
    a704:	ac2f883a 	add	r23,r21,r16
    a708:	84000204 	addi	r16,r16,8
    a70c:	9c21883a 	add	r16,r19,r16
    a710:	b0002716 	blt	r22,zero,a7b0 <__call_exitprocs+0x118>
    a714:	90000726 	beq	r18,zero,a734 <__call_exitprocs+0x9c>
    a718:	a800041e 	bne	r21,zero,a72c <__call_exitprocs+0x94>
    a71c:	b5bfffc4 	addi	r22,r22,-1
    a720:	bdffff04 	addi	r23,r23,-4
    a724:	843fff04 	addi	r16,r16,-4
    a728:	003ff906 	br	a710 <_gp+0xffff7b84>
    a72c:	b9002017 	ldw	r4,128(r23)
    a730:	913ffa1e 	bne	r18,r4,a71c <_gp+0xffff7b90>
    a734:	99000117 	ldw	r4,4(r19)
    a738:	82000017 	ldw	r8,0(r16)
    a73c:	213fffc4 	addi	r4,r4,-1
    a740:	b100021e 	bne	r22,r4,a74c <__call_exitprocs+0xb4>
    a744:	9d800115 	stw	r22,4(r19)
    a748:	00000106 	br	a750 <__call_exitprocs+0xb8>
    a74c:	80000015 	stw	zero,0(r16)
    a750:	403ff226 	beq	r8,zero,a71c <_gp+0xffff7b90>
    a754:	9f000117 	ldw	fp,4(r19)
    a758:	a8000526 	beq	r21,zero,a770 <__call_exitprocs+0xd8>
    a75c:	00800044 	movi	r2,1
    a760:	1592983a 	sll	r9,r2,r22
    a764:	a9404017 	ldw	r5,256(r21)
    a768:	494a703a 	and	r5,r9,r5
    a76c:	2800021e 	bne	r5,zero,a778 <__call_exitprocs+0xe0>
    a770:	403ee83a 	callr	r8
    a774:	00000906 	br	a79c <__call_exitprocs+0x104>
    a778:	a9004117 	ldw	r4,260(r21)
    a77c:	4908703a 	and	r4,r9,r4
    a780:	2000041e 	bne	r4,zero,a794 <__call_exitprocs+0xfc>
    a784:	b9400017 	ldw	r5,0(r23)
    a788:	d9000017 	ldw	r4,0(sp)
    a78c:	403ee83a 	callr	r8
    a790:	00000206 	br	a79c <__call_exitprocs+0x104>
    a794:	b9000017 	ldw	r4,0(r23)
    a798:	403ee83a 	callr	r8
    a79c:	99000117 	ldw	r4,4(r19)
    a7a0:	e13fcc1e 	bne	fp,r4,a6d4 <_gp+0xffff7b48>
    a7a4:	89000017 	ldw	r4,0(r17)
    a7a8:	993fdc26 	beq	r19,r4,a71c <_gp+0xffff7b90>
    a7ac:	003fc906 	br	a6d4 <_gp+0xffff7b48>
    a7b0:	00800034 	movhi	r2,0
    a7b4:	10800004 	addi	r2,r2,0
    a7b8:	10000f26 	beq	r2,zero,a7f8 <__call_exitprocs+0x160>
    a7bc:	99400117 	ldw	r5,4(r19)
    a7c0:	99000017 	ldw	r4,0(r19)
    a7c4:	2800091e 	bne	r5,zero,a7ec <__call_exitprocs+0x154>
    a7c8:	20000826 	beq	r4,zero,a7ec <__call_exitprocs+0x154>
    a7cc:	89000015 	stw	r4,0(r17)
    a7d0:	a8000226 	beq	r21,zero,a7dc <__call_exitprocs+0x144>
    a7d4:	a809883a 	mov	r4,r21
    a7d8:	00000000 	call	0 <__alt_mem_onchip_memory-0x8000>
    a7dc:	9809883a 	mov	r4,r19
    a7e0:	00000000 	call	0 <__alt_mem_onchip_memory-0x8000>
    a7e4:	8cc00017 	ldw	r19,0(r17)
    a7e8:	003fbd06 	br	a6e0 <_gp+0xffff7b54>
    a7ec:	9823883a 	mov	r17,r19
    a7f0:	2027883a 	mov	r19,r4
    a7f4:	003fba06 	br	a6e0 <_gp+0xffff7b54>
    a7f8:	dfc00a17 	ldw	ra,40(sp)
    a7fc:	df000917 	ldw	fp,36(sp)
    a800:	ddc00817 	ldw	r23,32(sp)
    a804:	dd800717 	ldw	r22,28(sp)
    a808:	dd400617 	ldw	r21,24(sp)
    a80c:	dd000517 	ldw	r20,20(sp)
    a810:	dcc00417 	ldw	r19,16(sp)
    a814:	dc800317 	ldw	r18,12(sp)
    a818:	dc400217 	ldw	r17,8(sp)
    a81c:	dc000117 	ldw	r16,4(sp)
    a820:	dec00b04 	addi	sp,sp,44
    a824:	f800283a 	ret

0000a828 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
    a828:	defffd04 	addi	sp,sp,-12
    a82c:	df000215 	stw	fp,8(sp)
    a830:	df000204 	addi	fp,sp,8
    a834:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
    a838:	0001883a 	nop
    a83c:	e0bfff17 	ldw	r2,-4(fp)
    a840:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
    a844:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    a848:	10000226 	beq	r2,zero,a854 <_exit+0x2c>
    ALT_SIM_FAIL();
    a84c:	002af070 	cmpltui	zero,zero,43969
    a850:	00000106 	br	a858 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
    a854:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
    a858:	003fff06 	br	a858 <_gp+0xffff7ccc>
