#include <stdio.h>
#include <stdint.h>
#include "system.h"
#include "altera_avalon_pio_regs.h"
#include <inttypes.h>

void display(int address, int number)
{
	int hex = 0x0000000;
	if (number == 0)
		hex = 64;
	else if (number == 1)
		hex = 121;
	else if (number == 2)
		hex = 36;
	else if (number == 3)
		hex = 48;
	else if (number == 4)
		hex = 25;
	else if (number == 5)
		hex = 18;
	else if (number == 6)
		hex = 2;
	else if (number == 7)
		hex = 120;
	else if (number == 8)
		hex = 0;
	else if (number == 9)
		hex = 16;


	IOWR_ALTERA_AVALON_PIO_DATA(address, hex);
}

int main()
{
	uint64_t peakValue = 0;
	uint8_t sent = 0;
	uint8_t count = 0;
	while(1)
	{
		if (count < 5)
		{
			for (volatile int i = 0; i < 10000; ++i) ;
			volatile uint32_t recvData = IORD_ALTERA_AVALON_PIO_DATA(TDMA_RECV_DATA_BASE);
			IOWR_ALTERA_AVALON_PIO_DATA(HEX0_BASE, 15);
			if (((recvData >> 28) & 0xF) == 0b1000) // Is Data Packet
			{
				IOWR_ALTERA_AVALON_PIO_DATA(HEX1_BASE, 15);
				if (((recvData >> 20) & 0xF) == 0b0111 && sent == 0) // From Peak Detecting
				{
					IOWR_ALTERA_AVALON_PIO_DATA(HEX2_BASE, 15);
					volatile uint32_t peakDetected = (recvData >> 18) & 1;; // 18
					volatile uint32_t corrCount = recvData & (0x3FFFF); // 17 downto 0
					printf("corrCount = %" PRIu32 "\n", corrCount);
					if (peakDetected >= 1) // A Peak is Detected, Request Peak Value
					{
						IOWR_ALTERA_AVALON_PIO_DATA(HEX3_BASE, 15);
						IOWR_ALTERA_AVALON_PIO_DATA(TDMA_SEND_ADDR_BASE, 0b0100); // To Peak Detector
						IOWR_ALTERA_AVALON_PIO_DATA(TDMA_SEND_DATA_BASE, (0b1000 << 28) | (0b0110 << 20) | 0b11); // 1000 (31~28), 0110 (23~20), 11 (1~0)
						sent = 1;
					}
				}
				if (((recvData >> 20) & 0xF) == 0b1000) // From Peak Value
				{
					printf("Test = %" PRIu32 "\n", recvData);
					if (((recvData >> 18) & 1) == 0) // First Half
					{
						IOWR_ALTERA_AVALON_PIO_DATA(HEX4_BASE, 15);
						peakValue = ((recvData & 0x3FFFF) << 18); // 17 downto 0 -> 35 downto 18
					}
					else // Second Half
					{
						IOWR_ALTERA_AVALON_PIO_DATA(HEX5_BASE, 15);
						peakValue |= (recvData & 0x3FFFF); // 17 downto 0 -> 17 downto 0
						printf("Peak Value = %" PRIu64 "\n", peakValue);
						sent = 0;
						count++;
					}
				}
			}
		}
	}
	return 0;


}

