
SevenSeg.elf:     file format elf32-littlenios2
SevenSeg.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x04000244

Program Header:
    LOAD off    0x00001000 vaddr 0x04000000 paddr 0x04000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x04000020 paddr 0x04000020 align 2**12
         filesz 0x00001bd4 memsz 0x00001bd4 flags r-x
    LOAD off    0x00002bf4 vaddr 0x04001bf4 paddr 0x04001ed4 align 2**12
         filesz 0x000002e0 memsz 0x000002e0 flags rw-
    LOAD off    0x000031b4 vaddr 0x040021b4 paddr 0x040021b4 align 2**12
         filesz 0x00000000 memsz 0x00000120 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  04000000  04000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  04000020  04000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00001984  04000244  04000244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000002c  04001bc8  04001bc8  00002bc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000002e0  04001bf4  04001ed4  00002bf4  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000120  040021b4  040021b4  000031b4  2**2
                  ALLOC, SMALL_DATA
  6 .sdram        00000000  040022d4  040022d4  00002ed4  2**0
                  CONTENTS
  7 .onchip_memory 00000000  08008000  08008000  00002ed4  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  00002ed4  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000558  00000000  00000000  00002ef8  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00005700  00000000  00000000  00003450  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00002221  00000000  00000000  00008b50  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000239c  00000000  00000000  0000ad71  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00000998  00000000  00000000  0000d110  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000017ea  00000000  00000000  0000daa8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00000413  00000000  00000000  0000f292  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000030  00000000  00000000  0000f6a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00000130  00000000  00000000  0000f6d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  000110e6  2**0
                  CONTENTS, READONLY
 19 .cpu          00000003  00000000  00000000  000110e9  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  000110ec  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  000110ed  2**0
                  CONTENTS, READONLY
 22 .stderr_dev   00000009  00000000  00000000  000110ee  2**0
                  CONTENTS, READONLY
 23 .stdin_dev    00000009  00000000  00000000  000110f7  2**0
                  CONTENTS, READONLY
 24 .stdout_dev   00000009  00000000  00000000  00011100  2**0
                  CONTENTS, READONLY
 25 .sopc_system_name 0000000e  00000000  00000000  00011109  2**0
                  CONTENTS, READONLY
 26 .quartus_project_dir 0000002c  00000000  00000000  00011117  2**0
                  CONTENTS, READONLY
 27 .jdi          000000de  00000000  00000000  00011143  2**0
                  CONTENTS, READONLY
 28 .sopcinfo     000644df  00000000  00000000  00011221  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
04000000 l    d  .entry	00000000 .entry
04000020 l    d  .exceptions	00000000 .exceptions
04000244 l    d  .text	00000000 .text
04001bc8 l    d  .rodata	00000000 .rodata
04001bf4 l    d  .rwdata	00000000 .rwdata
040021b4 l    d  .bss	00000000 .bss
040022d4 l    d  .sdram	00000000 .sdram
08008000 l    d  .onchip_memory	00000000 .onchip_memory
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../SevenSeg_bsp//obj/HAL/src/crt0.o
0400028c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 my_binary_leds-V2.c
00000000 l    df *ABS*	00000000 alt_load.c
040003bc l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
04000524 l     F .text	00000034 alt_dev_reg
04001bf4 l     O .rwdata	0000002c jtag_uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0400081c l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_close.c
04000910 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
04000a64 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
04000a90 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
04000f04 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
04001044 l     F .text	0000003c alt_get_errno
04001080 l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 impure.c
04001dc8 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 alt_exit.c
040021cc g     O .bss	00000004 alt_instruction_exception_handler
040004a8 g     F .text	0000007c alt_main
040021d4 g     O .bss	00000100 alt_irq
04001ed4 g       *ABS*	00000000 __flash_rwdata_start
040014a0 g     F .text	00000024 altera_nios2_gen2_irq_init
04000000 g     F .entry	0000001c __reset
04000020 g       *ABS*	00000000 __flash_exceptions_start
040021d0 g     O .bss	00000004 errno
040021b8 g     O .bss	00000004 alt_argv
04009ea8 g       *ABS*	00000000 _gp
04001c48 g     O .rwdata	00000180 alt_fd_list
040014c4 g     F .text	00000090 alt_find_dev
04000fc8 g     F .text	0000007c alt_io_redirect
04001bc8 g       *ABS*	00000000 __DTOR_END__
04001790 g     F .text	0000009c alt_exception_cause_generated_bad_addr
0400069c g     F .text	000000ec altera_avalon_jtag_uart_read
04001700 g     F .text	00000090 alt_icache_flush
04001eb8 g     O .rwdata	00000004 alt_max_fd
04001ecc g     O .rwdata	00000004 _global_impure_ptr
040022d4 g       *ABS*	00000000 __bss_end
04000e14 g     F .text	000000f0 alt_iic_isr_register
040002a0 g     F .text	0000011c display
04001398 g     F .text	00000108 alt_tick
04000dc8 g     F .text	0000004c alt_ic_irq_enabled
040012fc g     F .text	0000009c alt_alarm_stop
040021c0 g     O .bss	00000004 alt_irq_active
040000fc g     F .exceptions	000000d4 alt_irq_handler
04001c20 g     O .rwdata	00000028 alt_dev_null
04000a1c g     F .text	00000048 alt_dcache_flush_all
04001ed4 g       *ABS*	00000000 __ram_rwdata_end
08008000 g       *ABS*	00000000 __alt_mem_onchip_memory
04001eb0 g     O .rwdata	00000008 alt_dev_list
04001bf4 g       *ABS*	00000000 __ram_rodata_end
040022d4 g       *ABS*	00000000 end
040001d0 g     F .exceptions	00000074 alt_instruction_exception_entry
04001bc8 g       *ABS*	00000000 __CTOR_LIST__
08000000 g       *ABS*	00000000 __alt_stack_pointer
04000894 g     F .text	0000007c alt_avalon_timer_sc_init
04000788 g     F .text	00000094 altera_avalon_jtag_uart_write
04001a04 g     F .text	00000190 __call_exitprocs
04000244 g     F .text	0000004c _start
040021c4 g     O .bss	00000004 _alt_tick_rate
040021c8 g     O .bss	00000004 _alt_nticks
04000590 g     F .text	0000004c alt_sys_init
040018ac g     F .text	00000158 __register_exitproc
04001bf4 g       *ABS*	00000000 __ram_rwdata_start
04001bc8 g       *ABS*	00000000 __ram_rodata_start
040005dc g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0400165c g     F .text	000000a4 alt_get_fd
04001860 g     F .text	00000030 memcmp
040022d4 g       *ABS*	00000000 __alt_stack_base
04001554 g     F .text	00000108 alt_find_file
04000acc g     F .text	000000a4 alt_dev_llist_insert
040021b4 g       *ABS*	00000000 __bss_start
04000290 g     F .text	00000010 main
040021bc g     O .bss	00000004 alt_envp
0400063c g     F .text	00000060 altera_avalon_jtag_uart_write_fd
04001ebc g     O .rwdata	00000004 alt_errno
04001bc8 g       *ABS*	00000000 __CTOR_END__
04001bc8 g       *ABS*	00000000 __flash_rodata_start
04001bc8 g       *ABS*	00000000 __DTOR_LIST__
04000558 g     F .text	00000038 alt_irq_init
04001298 g     F .text	00000064 alt_release_fd
0400182c g     F .text	00000014 atexit
04001ed0 g     O .rwdata	00000004 _impure_ptr
040021b4 g     O .bss	00000004 alt_argc
04000bd0 g     F .text	00000060 _do_dtors
04000020 g       .exceptions	00000000 alt_irq_entry
04001ea8 g     O .rwdata	00000008 alt_fs_list
04000020 g       *ABS*	00000000 __ram_exceptions_start
04000c64 g     F .text	00000050 alt_ic_isr_register
04001ed4 g       *ABS*	00000000 _edata
040022d4 g       *ABS*	00000000 _end
04000244 g       *ABS*	00000000 __ram_exceptions_end
04000d3c g     F .text	0000008c alt_ic_irq_disable
04001840 g     F .text	00000020 exit
08000000 g       *ABS*	00000000 __alt_data_end
04000020 g     F .exceptions	00000000 alt_exception
04000000 g       *ABS*	00000000 __alt_mem_sdram
04001b94 g     F .text	00000034 _exit
04001890 g     F .text	0000001c strlen
04001144 g     F .text	00000154 open
04000c30 g     F .text	00000034 alt_icache_flush_all
04001ec0 g     O .rwdata	00000004 alt_priority_mask
04000cb4 g     F .text	00000088 alt_ic_irq_enable
04001ec4 g     O .rwdata	00000008 alt_alarm_list
04000b70 g     F .text	00000060 _do_ctors
0400094c g     F .text	000000d0 close
04000424 g     F .text	00000084 alt_load



Disassembly of section .entry:

04000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
 4000000:	00900014 	movui	r2,16384
#endif

0:
    initi r2
 4000004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
 4000008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
 400000c:	00bffd16 	blt	zero,r2,4000004 <__alt_mem_onchip_memory+0xfbff8004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 4000010:	00410034 	movhi	at,1024
    ori r1, r1, %lo(_start)
 4000014:	08409114 	ori	at,at,580
    jmp r1
 4000018:	0800683a 	jmp	at
 400001c:	00000000 	call	0 <__alt_mem_sdram-0x4000000>

Disassembly of section .exceptions:

04000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 4000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 4000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 4000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 400002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 4000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 4000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 4000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 400003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 4000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 4000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 4000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 400004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 4000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 4000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 4000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 400005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 4000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 4000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 4000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 400006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 4000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 4000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 4000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 400007c:	10000326 	beq	r2,zero,400008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 4000080:	20000226 	beq	r4,zero,400008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 4000084:	40000fc0 	call	40000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 4000088:	00000706 	br	40000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
 400008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
 4000090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
 4000094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
 4000098:	40001d00 	call	40001d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
 400009c:	1000021e 	bne	r2,zero,40000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
 40000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 40000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 40000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 40000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 40000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 40000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 40000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 40000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 40000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 40000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 40000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 40000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 40000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 40000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 40000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 40000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 40000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 40000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 40000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 40000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 40000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 40000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 40000f8:	ef80083a 	eret

040000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 40000fc:	defff904 	addi	sp,sp,-28
 4000100:	dfc00615 	stw	ra,24(sp)
 4000104:	df000515 	stw	fp,20(sp)
 4000108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 400010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 4000110:	0005313a 	rdctl	r2,ipending
 4000114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 4000118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 400011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 4000120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 4000124:	00800044 	movi	r2,1
 4000128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 400012c:	e0fffb17 	ldw	r3,-20(fp)
 4000130:	e0bffc17 	ldw	r2,-16(fp)
 4000134:	1884703a 	and	r2,r3,r2
 4000138:	10001426 	beq	r2,zero,400018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 400013c:	00810034 	movhi	r2,1024
 4000140:	10887504 	addi	r2,r2,8660
 4000144:	e0fffd17 	ldw	r3,-12(fp)
 4000148:	180690fa 	slli	r3,r3,3
 400014c:	10c5883a 	add	r2,r2,r3
 4000150:	10c00017 	ldw	r3,0(r2)
 4000154:	00810034 	movhi	r2,1024
 4000158:	10887504 	addi	r2,r2,8660
 400015c:	e13ffd17 	ldw	r4,-12(fp)
 4000160:	200890fa 	slli	r4,r4,3
 4000164:	1105883a 	add	r2,r2,r4
 4000168:	10800104 	addi	r2,r2,4
 400016c:	10800017 	ldw	r2,0(r2)
 4000170:	1009883a 	mov	r4,r2
 4000174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 4000178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 400017c:	0005313a 	rdctl	r2,ipending
 4000180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 4000184:	e0bfff17 	ldw	r2,-4(fp)
 4000188:	00000706 	br	40001a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 400018c:	e0bffc17 	ldw	r2,-16(fp)
 4000190:	1085883a 	add	r2,r2,r2
 4000194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 4000198:	e0bffd17 	ldw	r2,-12(fp)
 400019c:	10800044 	addi	r2,r2,1
 40001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 40001a4:	003fe106 	br	400012c <__alt_mem_onchip_memory+0xfbff812c>

    active = alt_irq_pending ();
 40001a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 40001ac:	e0bffb17 	ldw	r2,-20(fp)
 40001b0:	103fdb1e 	bne	r2,zero,4000120 <__alt_mem_onchip_memory+0xfbff8120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 40001b4:	0001883a 	nop
}
 40001b8:	0001883a 	nop
 40001bc:	e037883a 	mov	sp,fp
 40001c0:	dfc00117 	ldw	ra,4(sp)
 40001c4:	df000017 	ldw	fp,0(sp)
 40001c8:	dec00204 	addi	sp,sp,8
 40001cc:	f800283a 	ret

040001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 40001d0:	defffb04 	addi	sp,sp,-20
 40001d4:	dfc00415 	stw	ra,16(sp)
 40001d8:	df000315 	stw	fp,12(sp)
 40001dc:	df000304 	addi	fp,sp,12
 40001e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
 40001e4:	000531fa 	rdctl	r2,exception
 40001e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
 40001ec:	e0bffd17 	ldw	r2,-12(fp)
 40001f0:	10801f0c 	andi	r2,r2,124
 40001f4:	1004d0ba 	srli	r2,r2,2
 40001f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
 40001fc:	0005333a 	rdctl	r2,badaddr
 4000200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 4000204:	d0a0c917 	ldw	r2,-31964(gp)
 4000208:	10000726 	beq	r2,zero,4000228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 400020c:	d0a0c917 	ldw	r2,-31964(gp)
 4000210:	e0fffd17 	ldw	r3,-12(fp)
 4000214:	e1bffe17 	ldw	r6,-8(fp)
 4000218:	e17fff17 	ldw	r5,-4(fp)
 400021c:	1809883a 	mov	r4,r3
 4000220:	103ee83a 	callr	r2
 4000224:	00000206 	br	4000230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 4000228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 400022c:	0005883a 	mov	r2,zero
}
 4000230:	e037883a 	mov	sp,fp
 4000234:	dfc00117 	ldw	ra,4(sp)
 4000238:	df000017 	ldw	fp,0(sp)
 400023c:	dec00204 	addi	sp,sp,8
 4000240:	f800283a 	ret

Disassembly of section .text:

04000244 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
 4000244:	00900014 	movui	r2,16384
#endif

0:
    initd 0(r2)
 4000248:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
 400024c:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
 4000250:	00bffd16 	blt	zero,r2,4000248 <__alt_mem_onchip_memory+0xfbff8248>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 4000254:	06c20034 	movhi	sp,2048
    ori sp, sp, %lo(__alt_stack_pointer)
 4000258:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 400025c:	06810034 	movhi	gp,1024
    ori gp, gp, %lo(_gp)
 4000260:	d6a7aa14 	ori	gp,gp,40616
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 4000264:	00810034 	movhi	r2,1024
    ori r2, r2, %lo(__bss_start)
 4000268:	10886d14 	ori	r2,r2,8628

    movhi r3, %hi(__bss_end)
 400026c:	00c10034 	movhi	r3,1024
    ori r3, r3, %lo(__bss_end)
 4000270:	18c8b514 	ori	r3,r3,8916

    beq r2, r3, 1f
 4000274:	10c00326 	beq	r2,r3,4000284 <_start+0x40>

0:
    stw zero, (r2)
 4000278:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 400027c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 4000280:	10fffd36 	bltu	r2,r3,4000278 <__alt_mem_onchip_memory+0xfbff8278>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 4000284:	40004240 	call	4000424 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 4000288:	40004a80 	call	40004a8 <alt_main>

0400028c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 400028c:	003fff06 	br	400028c <__alt_mem_onchip_memory+0xfbff828c>

04000290 <main>:
#include "altera_avalon_timer_regs.h"
#include "sys/alt_timestamp.h"


int main()
{
 4000290:	deffff04 	addi	sp,sp,-4
 4000294:	df000015 	stw	fp,0(sp)
 4000298:	d839883a 	mov	fp,sp
	while(1){
		
	}
 400029c:	003fff06 	br	400029c <__alt_mem_onchip_memory+0xfbff829c>

040002a0 <display>:
}


void display(int address, int number)
{
 40002a0:	defffc04 	addi	sp,sp,-16
 40002a4:	df000315 	stw	fp,12(sp)
 40002a8:	df000304 	addi	fp,sp,12
 40002ac:	e13ffe15 	stw	r4,-8(fp)
 40002b0:	e17fff15 	stw	r5,-4(fp)
	int hex = 0x0000000;
 40002b4:	e03ffd15 	stw	zero,-12(fp)
	if (number == 0)
 40002b8:	e0bfff17 	ldw	r2,-4(fp)
 40002bc:	1000031e 	bne	r2,zero,40002cc <display+0x2c>
		hex = 64;
 40002c0:	00801004 	movi	r2,64
 40002c4:	e0bffd15 	stw	r2,-12(fp)
 40002c8:	00003406 	br	400039c <display+0xfc>
	else if (number == 1)
 40002cc:	e0bfff17 	ldw	r2,-4(fp)
 40002d0:	10800058 	cmpnei	r2,r2,1
 40002d4:	1000031e 	bne	r2,zero,40002e4 <display+0x44>
		hex = 121;
 40002d8:	00801e44 	movi	r2,121
 40002dc:	e0bffd15 	stw	r2,-12(fp)
 40002e0:	00002e06 	br	400039c <display+0xfc>
	else if (number == 2)
 40002e4:	e0bfff17 	ldw	r2,-4(fp)
 40002e8:	10800098 	cmpnei	r2,r2,2
 40002ec:	1000031e 	bne	r2,zero,40002fc <display+0x5c>
		hex = 36;
 40002f0:	00800904 	movi	r2,36
 40002f4:	e0bffd15 	stw	r2,-12(fp)
 40002f8:	00002806 	br	400039c <display+0xfc>
	else if (number == 3)
 40002fc:	e0bfff17 	ldw	r2,-4(fp)
 4000300:	108000d8 	cmpnei	r2,r2,3
 4000304:	1000031e 	bne	r2,zero,4000314 <display+0x74>
		hex = 48;
 4000308:	00800c04 	movi	r2,48
 400030c:	e0bffd15 	stw	r2,-12(fp)
 4000310:	00002206 	br	400039c <display+0xfc>
	else if (number == 4)
 4000314:	e0bfff17 	ldw	r2,-4(fp)
 4000318:	10800118 	cmpnei	r2,r2,4
 400031c:	1000031e 	bne	r2,zero,400032c <display+0x8c>
		hex = 25;
 4000320:	00800644 	movi	r2,25
 4000324:	e0bffd15 	stw	r2,-12(fp)
 4000328:	00001c06 	br	400039c <display+0xfc>
	else if (number == 5)
 400032c:	e0bfff17 	ldw	r2,-4(fp)
 4000330:	10800158 	cmpnei	r2,r2,5
 4000334:	1000031e 	bne	r2,zero,4000344 <display+0xa4>
		hex = 18;
 4000338:	00800484 	movi	r2,18
 400033c:	e0bffd15 	stw	r2,-12(fp)
 4000340:	00001606 	br	400039c <display+0xfc>
	else if (number == 6)
 4000344:	e0bfff17 	ldw	r2,-4(fp)
 4000348:	10800198 	cmpnei	r2,r2,6
 400034c:	1000031e 	bne	r2,zero,400035c <display+0xbc>
		hex = 2;
 4000350:	00800084 	movi	r2,2
 4000354:	e0bffd15 	stw	r2,-12(fp)
 4000358:	00001006 	br	400039c <display+0xfc>
	else if (number == 7)
 400035c:	e0bfff17 	ldw	r2,-4(fp)
 4000360:	108001d8 	cmpnei	r2,r2,7
 4000364:	1000031e 	bne	r2,zero,4000374 <display+0xd4>
		hex = 120;
 4000368:	00801e04 	movi	r2,120
 400036c:	e0bffd15 	stw	r2,-12(fp)
 4000370:	00000a06 	br	400039c <display+0xfc>
	else if (number == 8)
 4000374:	e0bfff17 	ldw	r2,-4(fp)
 4000378:	10800218 	cmpnei	r2,r2,8
 400037c:	1000021e 	bne	r2,zero,4000388 <display+0xe8>
		hex = 0;
 4000380:	e03ffd15 	stw	zero,-12(fp)
 4000384:	00000506 	br	400039c <display+0xfc>
	else if (number == 9)
 4000388:	e0bfff17 	ldw	r2,-4(fp)
 400038c:	10800258 	cmpnei	r2,r2,9
 4000390:	1000021e 	bne	r2,zero,400039c <display+0xfc>
		hex = 16;
 4000394:	00800404 	movi	r2,16
 4000398:	e0bffd15 	stw	r2,-12(fp)


	IOWR_ALTERA_AVALON_PIO_DATA(address, hex);
 400039c:	e0bffe17 	ldw	r2,-8(fp)
 40003a0:	e0fffd17 	ldw	r3,-12(fp)
 40003a4:	10c00035 	stwio	r3,0(r2)
}
 40003a8:	0001883a 	nop
 40003ac:	e037883a 	mov	sp,fp
 40003b0:	df000017 	ldw	fp,0(sp)
 40003b4:	dec00104 	addi	sp,sp,4
 40003b8:	f800283a 	ret

040003bc <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 40003bc:	defffc04 	addi	sp,sp,-16
 40003c0:	df000315 	stw	fp,12(sp)
 40003c4:	df000304 	addi	fp,sp,12
 40003c8:	e13ffd15 	stw	r4,-12(fp)
 40003cc:	e17ffe15 	stw	r5,-8(fp)
 40003d0:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 40003d4:	e0fffe17 	ldw	r3,-8(fp)
 40003d8:	e0bffd17 	ldw	r2,-12(fp)
 40003dc:	18800c26 	beq	r3,r2,4000410 <alt_load_section+0x54>
  {
    while( to != end )
 40003e0:	00000806 	br	4000404 <alt_load_section+0x48>
    {
      *to++ = *from++;
 40003e4:	e0bffe17 	ldw	r2,-8(fp)
 40003e8:	10c00104 	addi	r3,r2,4
 40003ec:	e0fffe15 	stw	r3,-8(fp)
 40003f0:	e0fffd17 	ldw	r3,-12(fp)
 40003f4:	19000104 	addi	r4,r3,4
 40003f8:	e13ffd15 	stw	r4,-12(fp)
 40003fc:	18c00017 	ldw	r3,0(r3)
 4000400:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 4000404:	e0fffe17 	ldw	r3,-8(fp)
 4000408:	e0bfff17 	ldw	r2,-4(fp)
 400040c:	18bff51e 	bne	r3,r2,40003e4 <__alt_mem_onchip_memory+0xfbff83e4>
    {
      *to++ = *from++;
    }
  }
}
 4000410:	0001883a 	nop
 4000414:	e037883a 	mov	sp,fp
 4000418:	df000017 	ldw	fp,0(sp)
 400041c:	dec00104 	addi	sp,sp,4
 4000420:	f800283a 	ret

04000424 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 4000424:	defffe04 	addi	sp,sp,-8
 4000428:	dfc00115 	stw	ra,4(sp)
 400042c:	df000015 	stw	fp,0(sp)
 4000430:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 4000434:	01810034 	movhi	r6,1024
 4000438:	3187b504 	addi	r6,r6,7892
 400043c:	01410034 	movhi	r5,1024
 4000440:	2946fd04 	addi	r5,r5,7156
 4000444:	01010034 	movhi	r4,1024
 4000448:	2107b504 	addi	r4,r4,7892
 400044c:	40003bc0 	call	40003bc <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 4000450:	01810034 	movhi	r6,1024
 4000454:	31809104 	addi	r6,r6,580
 4000458:	01410034 	movhi	r5,1024
 400045c:	29400804 	addi	r5,r5,32
 4000460:	01010034 	movhi	r4,1024
 4000464:	21000804 	addi	r4,r4,32
 4000468:	40003bc0 	call	40003bc <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 400046c:	01810034 	movhi	r6,1024
 4000470:	3186fd04 	addi	r6,r6,7156
 4000474:	01410034 	movhi	r5,1024
 4000478:	2946f204 	addi	r5,r5,7112
 400047c:	01010034 	movhi	r4,1024
 4000480:	2106f204 	addi	r4,r4,7112
 4000484:	40003bc0 	call	40003bc <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 4000488:	4000a1c0 	call	4000a1c <alt_dcache_flush_all>
  alt_icache_flush_all();
 400048c:	4000c300 	call	4000c30 <alt_icache_flush_all>
}
 4000490:	0001883a 	nop
 4000494:	e037883a 	mov	sp,fp
 4000498:	dfc00117 	ldw	ra,4(sp)
 400049c:	df000017 	ldw	fp,0(sp)
 40004a0:	dec00204 	addi	sp,sp,8
 40004a4:	f800283a 	ret

040004a8 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 40004a8:	defffd04 	addi	sp,sp,-12
 40004ac:	dfc00215 	stw	ra,8(sp)
 40004b0:	df000115 	stw	fp,4(sp)
 40004b4:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 40004b8:	0009883a 	mov	r4,zero
 40004bc:	40005580 	call	4000558 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 40004c0:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 40004c4:	40005900 	call	4000590 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 40004c8:	01810034 	movhi	r6,1024
 40004cc:	3186f204 	addi	r6,r6,7112
 40004d0:	01410034 	movhi	r5,1024
 40004d4:	2946f204 	addi	r5,r5,7112
 40004d8:	01010034 	movhi	r4,1024
 40004dc:	2106f204 	addi	r4,r4,7112
 40004e0:	4000fc80 	call	4000fc8 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 40004e4:	4000b700 	call	4000b70 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 40004e8:	01010034 	movhi	r4,1024
 40004ec:	2102f404 	addi	r4,r4,3024
 40004f0:	400182c0 	call	400182c <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 40004f4:	d0a0c317 	ldw	r2,-31988(gp)
 40004f8:	d0e0c417 	ldw	r3,-31984(gp)
 40004fc:	d120c517 	ldw	r4,-31980(gp)
 4000500:	200d883a 	mov	r6,r4
 4000504:	180b883a 	mov	r5,r3
 4000508:	1009883a 	mov	r4,r2
 400050c:	40002900 	call	4000290 <main>
 4000510:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 4000514:	01000044 	movi	r4,1
 4000518:	400094c0 	call	400094c <close>
  exit (result);
 400051c:	e13fff17 	ldw	r4,-4(fp)
 4000520:	40018400 	call	4001840 <exit>

04000524 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 4000524:	defffd04 	addi	sp,sp,-12
 4000528:	dfc00215 	stw	ra,8(sp)
 400052c:	df000115 	stw	fp,4(sp)
 4000530:	df000104 	addi	fp,sp,4
 4000534:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 4000538:	d1600204 	addi	r5,gp,-32760
 400053c:	e13fff17 	ldw	r4,-4(fp)
 4000540:	4000acc0 	call	4000acc <alt_dev_llist_insert>
}
 4000544:	e037883a 	mov	sp,fp
 4000548:	dfc00117 	ldw	ra,4(sp)
 400054c:	df000017 	ldw	fp,0(sp)
 4000550:	dec00204 	addi	sp,sp,8
 4000554:	f800283a 	ret

04000558 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 4000558:	defffd04 	addi	sp,sp,-12
 400055c:	dfc00215 	stw	ra,8(sp)
 4000560:	df000115 	stw	fp,4(sp)
 4000564:	df000104 	addi	fp,sp,4
 4000568:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
 400056c:	40014a00 	call	40014a0 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 4000570:	00800044 	movi	r2,1
 4000574:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 4000578:	0001883a 	nop
 400057c:	e037883a 	mov	sp,fp
 4000580:	dfc00117 	ldw	ra,4(sp)
 4000584:	df000017 	ldw	fp,0(sp)
 4000588:	dec00204 	addi	sp,sp,8
 400058c:	f800283a 	ret

04000590 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 4000590:	defffe04 	addi	sp,sp,-8
 4000594:	dfc00115 	stw	ra,4(sp)
 4000598:	df000015 	stw	fp,0(sp)
 400059c:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( HIGH_RES_TIMER, high_res_timer);
 40005a0:	01c0fa04 	movi	r7,1000
 40005a4:	000d883a 	mov	r6,zero
 40005a8:	000b883a 	mov	r5,zero
 40005ac:	01020074 	movhi	r4,2049
 40005b0:	21040004 	addi	r4,r4,4096
 40005b4:	40008940 	call	4000894 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
 40005b8:	01010034 	movhi	r4,1024
 40005bc:	2106fd04 	addi	r4,r4,7156
 40005c0:	40005240 	call	4000524 <alt_dev_reg>
}
 40005c4:	0001883a 	nop
 40005c8:	e037883a 	mov	sp,fp
 40005cc:	dfc00117 	ldw	ra,4(sp)
 40005d0:	df000017 	ldw	fp,0(sp)
 40005d4:	dec00204 	addi	sp,sp,8
 40005d8:	f800283a 	ret

040005dc <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 40005dc:	defffa04 	addi	sp,sp,-24
 40005e0:	dfc00515 	stw	ra,20(sp)
 40005e4:	df000415 	stw	fp,16(sp)
 40005e8:	df000404 	addi	fp,sp,16
 40005ec:	e13ffd15 	stw	r4,-12(fp)
 40005f0:	e17ffe15 	stw	r5,-8(fp)
 40005f4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 40005f8:	e0bffd17 	ldw	r2,-12(fp)
 40005fc:	10800017 	ldw	r2,0(r2)
 4000600:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 4000604:	e0bffc17 	ldw	r2,-16(fp)
 4000608:	10c00a04 	addi	r3,r2,40
 400060c:	e0bffd17 	ldw	r2,-12(fp)
 4000610:	10800217 	ldw	r2,8(r2)
 4000614:	100f883a 	mov	r7,r2
 4000618:	e1bfff17 	ldw	r6,-4(fp)
 400061c:	e17ffe17 	ldw	r5,-8(fp)
 4000620:	1809883a 	mov	r4,r3
 4000624:	400069c0 	call	400069c <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 4000628:	e037883a 	mov	sp,fp
 400062c:	dfc00117 	ldw	ra,4(sp)
 4000630:	df000017 	ldw	fp,0(sp)
 4000634:	dec00204 	addi	sp,sp,8
 4000638:	f800283a 	ret

0400063c <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 400063c:	defffa04 	addi	sp,sp,-24
 4000640:	dfc00515 	stw	ra,20(sp)
 4000644:	df000415 	stw	fp,16(sp)
 4000648:	df000404 	addi	fp,sp,16
 400064c:	e13ffd15 	stw	r4,-12(fp)
 4000650:	e17ffe15 	stw	r5,-8(fp)
 4000654:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 4000658:	e0bffd17 	ldw	r2,-12(fp)
 400065c:	10800017 	ldw	r2,0(r2)
 4000660:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 4000664:	e0bffc17 	ldw	r2,-16(fp)
 4000668:	10c00a04 	addi	r3,r2,40
 400066c:	e0bffd17 	ldw	r2,-12(fp)
 4000670:	10800217 	ldw	r2,8(r2)
 4000674:	100f883a 	mov	r7,r2
 4000678:	e1bfff17 	ldw	r6,-4(fp)
 400067c:	e17ffe17 	ldw	r5,-8(fp)
 4000680:	1809883a 	mov	r4,r3
 4000684:	40007880 	call	4000788 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 4000688:	e037883a 	mov	sp,fp
 400068c:	dfc00117 	ldw	ra,4(sp)
 4000690:	df000017 	ldw	fp,0(sp)
 4000694:	dec00204 	addi	sp,sp,8
 4000698:	f800283a 	ret

0400069c <altera_avalon_jtag_uart_read>:
 */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
 400069c:	defff704 	addi	sp,sp,-36
 40006a0:	df000815 	stw	fp,32(sp)
 40006a4:	df000804 	addi	fp,sp,32
 40006a8:	e13ffc15 	stw	r4,-16(fp)
 40006ac:	e17ffd15 	stw	r5,-12(fp)
 40006b0:	e1bffe15 	stw	r6,-8(fp)
 40006b4:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
 40006b8:	e0bffc17 	ldw	r2,-16(fp)
 40006bc:	10800017 	ldw	r2,0(r2)
 40006c0:	e0bff915 	stw	r2,-28(fp)

  char * ptr = buffer;
 40006c4:	e0bffd17 	ldw	r2,-12(fp)
 40006c8:	e0bff815 	stw	r2,-32(fp)
  char * end = buffer + space;
 40006cc:	e0bffe17 	ldw	r2,-8(fp)
 40006d0:	e0fffd17 	ldw	r3,-12(fp)
 40006d4:	1885883a 	add	r2,r3,r2
 40006d8:	e0bffa15 	stw	r2,-24(fp)

  while (ptr < end)
 40006dc:	00001206 	br	4000728 <altera_avalon_jtag_uart_read+0x8c>
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 40006e0:	e0bff917 	ldw	r2,-28(fp)
 40006e4:	10800037 	ldwio	r2,0(r2)
 40006e8:	e0bffb15 	stw	r2,-20(fp)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
 40006ec:	e0bffb17 	ldw	r2,-20(fp)
 40006f0:	10a0000c 	andi	r2,r2,32768
 40006f4:	10000626 	beq	r2,zero,4000710 <altera_avalon_jtag_uart_read+0x74>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 40006f8:	e0bff817 	ldw	r2,-32(fp)
 40006fc:	10c00044 	addi	r3,r2,1
 4000700:	e0fff815 	stw	r3,-32(fp)
 4000704:	e0fffb17 	ldw	r3,-20(fp)
 4000708:	10c00005 	stb	r3,0(r2)
 400070c:	00000606 	br	4000728 <altera_avalon_jtag_uart_read+0x8c>
    else if (ptr != buffer)
 4000710:	e0fff817 	ldw	r3,-32(fp)
 4000714:	e0bffd17 	ldw	r2,-12(fp)
 4000718:	1880071e 	bne	r3,r2,4000738 <altera_avalon_jtag_uart_read+0x9c>
      break;
    else if(flags & O_NONBLOCK)
 400071c:	e0bfff17 	ldw	r2,-4(fp)
 4000720:	1090000c 	andi	r2,r2,16384
 4000724:	1000061e 	bne	r2,zero,4000740 <altera_avalon_jtag_uart_read+0xa4>
  unsigned int base = sp->base;

  char * ptr = buffer;
  char * end = buffer + space;

  while (ptr < end)
 4000728:	e0fff817 	ldw	r3,-32(fp)
 400072c:	e0bffa17 	ldw	r2,-24(fp)
 4000730:	18bfeb36 	bltu	r3,r2,40006e0 <__alt_mem_onchip_memory+0xfbff86e0>
 4000734:	00000306 	br	4000744 <altera_avalon_jtag_uart_read+0xa8>
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    else if (ptr != buffer)
      break;
 4000738:	0001883a 	nop
 400073c:	00000106 	br	4000744 <altera_avalon_jtag_uart_read+0xa8>
    else if(flags & O_NONBLOCK)
      break;   
 4000740:	0001883a 	nop
    
  }

  if (ptr != buffer)
 4000744:	e0fff817 	ldw	r3,-32(fp)
 4000748:	e0bffd17 	ldw	r2,-12(fp)
 400074c:	18800426 	beq	r3,r2,4000760 <altera_avalon_jtag_uart_read+0xc4>
    return ptr - buffer;
 4000750:	e0fff817 	ldw	r3,-32(fp)
 4000754:	e0bffd17 	ldw	r2,-12(fp)
 4000758:	1885c83a 	sub	r2,r3,r2
 400075c:	00000606 	br	4000778 <altera_avalon_jtag_uart_read+0xdc>
  else if (flags & O_NONBLOCK)
 4000760:	e0bfff17 	ldw	r2,-4(fp)
 4000764:	1090000c 	andi	r2,r2,16384
 4000768:	10000226 	beq	r2,zero,4000774 <altera_avalon_jtag_uart_read+0xd8>
    return -EWOULDBLOCK;
 400076c:	00bffd44 	movi	r2,-11
 4000770:	00000106 	br	4000778 <altera_avalon_jtag_uart_read+0xdc>
  else
    return -EIO;
 4000774:	00bffec4 	movi	r2,-5
}
 4000778:	e037883a 	mov	sp,fp
 400077c:	df000017 	ldw	fp,0(sp)
 4000780:	dec00104 	addi	sp,sp,4
 4000784:	f800283a 	ret

04000788 <altera_avalon_jtag_uart_write>:
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 4000788:	defff904 	addi	sp,sp,-28
 400078c:	df000615 	stw	fp,24(sp)
 4000790:	df000604 	addi	fp,sp,24
 4000794:	e13ffc15 	stw	r4,-16(fp)
 4000798:	e17ffd15 	stw	r5,-12(fp)
 400079c:	e1bffe15 	stw	r6,-8(fp)
 40007a0:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
 40007a4:	e0bffc17 	ldw	r2,-16(fp)
 40007a8:	10800017 	ldw	r2,0(r2)
 40007ac:	e0bffa15 	stw	r2,-24(fp)

  const char * end = ptr + count;
 40007b0:	e0bffe17 	ldw	r2,-8(fp)
 40007b4:	e0fffd17 	ldw	r3,-12(fp)
 40007b8:	1885883a 	add	r2,r3,r2
 40007bc:	e0bffb15 	stw	r2,-20(fp)

  while (ptr < end)
 40007c0:	00000e06 	br	40007fc <altera_avalon_jtag_uart_write+0x74>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
 40007c4:	e0bffa17 	ldw	r2,-24(fp)
 40007c8:	10800104 	addi	r2,r2,4
 40007cc:	10800037 	ldwio	r2,0(r2)
 40007d0:	10bfffec 	andhi	r2,r2,65535
 40007d4:	10000926 	beq	r2,zero,40007fc <altera_avalon_jtag_uart_write+0x74>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
 40007d8:	e0fffa17 	ldw	r3,-24(fp)
 40007dc:	e0bffd17 	ldw	r2,-12(fp)
 40007e0:	11000044 	addi	r4,r2,1
 40007e4:	e13ffd15 	stw	r4,-12(fp)
 40007e8:	10800003 	ldbu	r2,0(r2)
 40007ec:	10803fcc 	andi	r2,r2,255
 40007f0:	1080201c 	xori	r2,r2,128
 40007f4:	10bfe004 	addi	r2,r2,-128
 40007f8:	18800035 	stwio	r2,0(r3)
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
 40007fc:	e0fffd17 	ldw	r3,-12(fp)
 4000800:	e0bffb17 	ldw	r2,-20(fp)
 4000804:	18bfef36 	bltu	r3,r2,40007c4 <__alt_mem_onchip_memory+0xfbff87c4>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
 4000808:	e0bffe17 	ldw	r2,-8(fp)
}
 400080c:	e037883a 	mov	sp,fp
 4000810:	df000017 	ldw	fp,0(sp)
 4000814:	dec00104 	addi	sp,sp,4
 4000818:	f800283a 	ret

0400081c <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
 400081c:	defffa04 	addi	sp,sp,-24
 4000820:	dfc00515 	stw	ra,20(sp)
 4000824:	df000415 	stw	fp,16(sp)
 4000828:	df000404 	addi	fp,sp,16
 400082c:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
 4000830:	0007883a 	mov	r3,zero
 4000834:	e0bfff17 	ldw	r2,-4(fp)
 4000838:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
 400083c:	e0bfff17 	ldw	r2,-4(fp)
 4000840:	10800104 	addi	r2,r2,4
 4000844:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4000848:	0005303a 	rdctl	r2,status
 400084c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4000850:	e0fffd17 	ldw	r3,-12(fp)
 4000854:	00bfff84 	movi	r2,-2
 4000858:	1884703a 	and	r2,r3,r2
 400085c:	1001703a 	wrctl	status,r2
  
  return context;
 4000860:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
 4000864:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
 4000868:	40013980 	call	4001398 <alt_tick>
 400086c:	e0bffc17 	ldw	r2,-16(fp)
 4000870:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4000874:	e0bffe17 	ldw	r2,-8(fp)
 4000878:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
 400087c:	0001883a 	nop
 4000880:	e037883a 	mov	sp,fp
 4000884:	dfc00117 	ldw	ra,4(sp)
 4000888:	df000017 	ldw	fp,0(sp)
 400088c:	dec00204 	addi	sp,sp,8
 4000890:	f800283a 	ret

04000894 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
 4000894:	defff804 	addi	sp,sp,-32
 4000898:	dfc00715 	stw	ra,28(sp)
 400089c:	df000615 	stw	fp,24(sp)
 40008a0:	df000604 	addi	fp,sp,24
 40008a4:	e13ffc15 	stw	r4,-16(fp)
 40008a8:	e17ffd15 	stw	r5,-12(fp)
 40008ac:	e1bffe15 	stw	r6,-8(fp)
 40008b0:	e1ffff15 	stw	r7,-4(fp)
 40008b4:	e0bfff17 	ldw	r2,-4(fp)
 40008b8:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
 40008bc:	d0a0c717 	ldw	r2,-31972(gp)
 40008c0:	1000021e 	bne	r2,zero,40008cc <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
 40008c4:	e0bffb17 	ldw	r2,-20(fp)
 40008c8:	d0a0c715 	stw	r2,-31972(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
 40008cc:	e0bffc17 	ldw	r2,-16(fp)
 40008d0:	10800104 	addi	r2,r2,4
 40008d4:	00c001c4 	movi	r3,7
 40008d8:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
 40008dc:	d8000015 	stw	zero,0(sp)
 40008e0:	e1fffc17 	ldw	r7,-16(fp)
 40008e4:	01810034 	movhi	r6,1024
 40008e8:	31820704 	addi	r6,r6,2076
 40008ec:	e17ffe17 	ldw	r5,-8(fp)
 40008f0:	e13ffd17 	ldw	r4,-12(fp)
 40008f4:	4000c640 	call	4000c64 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
 40008f8:	0001883a 	nop
 40008fc:	e037883a 	mov	sp,fp
 4000900:	dfc00117 	ldw	ra,4(sp)
 4000904:	df000017 	ldw	fp,0(sp)
 4000908:	dec00204 	addi	sp,sp,8
 400090c:	f800283a 	ret

04000910 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 4000910:	defffe04 	addi	sp,sp,-8
 4000914:	dfc00115 	stw	ra,4(sp)
 4000918:	df000015 	stw	fp,0(sp)
 400091c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 4000920:	d0a00517 	ldw	r2,-32748(gp)
 4000924:	10000326 	beq	r2,zero,4000934 <alt_get_errno+0x24>
 4000928:	d0a00517 	ldw	r2,-32748(gp)
 400092c:	103ee83a 	callr	r2
 4000930:	00000106 	br	4000938 <alt_get_errno+0x28>
 4000934:	d0a0ca04 	addi	r2,gp,-31960
}
 4000938:	e037883a 	mov	sp,fp
 400093c:	dfc00117 	ldw	ra,4(sp)
 4000940:	df000017 	ldw	fp,0(sp)
 4000944:	dec00204 	addi	sp,sp,8
 4000948:	f800283a 	ret

0400094c <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 400094c:	defffb04 	addi	sp,sp,-20
 4000950:	dfc00415 	stw	ra,16(sp)
 4000954:	df000315 	stw	fp,12(sp)
 4000958:	df000304 	addi	fp,sp,12
 400095c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 4000960:	e0bfff17 	ldw	r2,-4(fp)
 4000964:	10000616 	blt	r2,zero,4000980 <close+0x34>
 4000968:	e0bfff17 	ldw	r2,-4(fp)
 400096c:	10c00324 	muli	r3,r2,12
 4000970:	00810034 	movhi	r2,1024
 4000974:	10871204 	addi	r2,r2,7240
 4000978:	1885883a 	add	r2,r3,r2
 400097c:	00000106 	br	4000984 <close+0x38>
 4000980:	0005883a 	mov	r2,zero
 4000984:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
 4000988:	e0bffd17 	ldw	r2,-12(fp)
 400098c:	10001926 	beq	r2,zero,40009f4 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 4000990:	e0bffd17 	ldw	r2,-12(fp)
 4000994:	10800017 	ldw	r2,0(r2)
 4000998:	10800417 	ldw	r2,16(r2)
 400099c:	10000626 	beq	r2,zero,40009b8 <close+0x6c>
 40009a0:	e0bffd17 	ldw	r2,-12(fp)
 40009a4:	10800017 	ldw	r2,0(r2)
 40009a8:	10800417 	ldw	r2,16(r2)
 40009ac:	e13ffd17 	ldw	r4,-12(fp)
 40009b0:	103ee83a 	callr	r2
 40009b4:	00000106 	br	40009bc <close+0x70>
 40009b8:	0005883a 	mov	r2,zero
 40009bc:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 40009c0:	e13fff17 	ldw	r4,-4(fp)
 40009c4:	40012980 	call	4001298 <alt_release_fd>
    if (rval < 0)
 40009c8:	e0bffe17 	ldw	r2,-8(fp)
 40009cc:	1000070e 	bge	r2,zero,40009ec <close+0xa0>
    {
      ALT_ERRNO = -rval;
 40009d0:	40009100 	call	4000910 <alt_get_errno>
 40009d4:	1007883a 	mov	r3,r2
 40009d8:	e0bffe17 	ldw	r2,-8(fp)
 40009dc:	0085c83a 	sub	r2,zero,r2
 40009e0:	18800015 	stw	r2,0(r3)
      return -1;
 40009e4:	00bfffc4 	movi	r2,-1
 40009e8:	00000706 	br	4000a08 <close+0xbc>
    }
    return 0;
 40009ec:	0005883a 	mov	r2,zero
 40009f0:	00000506 	br	4000a08 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 40009f4:	40009100 	call	4000910 <alt_get_errno>
 40009f8:	1007883a 	mov	r3,r2
 40009fc:	00801444 	movi	r2,81
 4000a00:	18800015 	stw	r2,0(r3)
    return -1;
 4000a04:	00bfffc4 	movi	r2,-1
  }
}
 4000a08:	e037883a 	mov	sp,fp
 4000a0c:	dfc00117 	ldw	ra,4(sp)
 4000a10:	df000017 	ldw	fp,0(sp)
 4000a14:	dec00204 	addi	sp,sp,8
 4000a18:	f800283a 	ret

04000a1c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 4000a1c:	defffe04 	addi	sp,sp,-8
 4000a20:	df000115 	stw	fp,4(sp)
 4000a24:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 4000a28:	e03fff15 	stw	zero,-4(fp)
 4000a2c:	00000506 	br	4000a44 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
 4000a30:	e0bfff17 	ldw	r2,-4(fp)
 4000a34:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 4000a38:	e0bfff17 	ldw	r2,-4(fp)
 4000a3c:	10800804 	addi	r2,r2,32
 4000a40:	e0bfff15 	stw	r2,-4(fp)
 4000a44:	e0bfff17 	ldw	r2,-4(fp)
 4000a48:	10900030 	cmpltui	r2,r2,16384
 4000a4c:	103ff81e 	bne	r2,zero,4000a30 <__alt_mem_onchip_memory+0xfbff8a30>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 4000a50:	0001883a 	nop
 4000a54:	e037883a 	mov	sp,fp
 4000a58:	df000017 	ldw	fp,0(sp)
 4000a5c:	dec00104 	addi	sp,sp,4
 4000a60:	f800283a 	ret

04000a64 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 4000a64:	defffc04 	addi	sp,sp,-16
 4000a68:	df000315 	stw	fp,12(sp)
 4000a6c:	df000304 	addi	fp,sp,12
 4000a70:	e13ffd15 	stw	r4,-12(fp)
 4000a74:	e17ffe15 	stw	r5,-8(fp)
 4000a78:	e1bfff15 	stw	r6,-4(fp)
  return len;
 4000a7c:	e0bfff17 	ldw	r2,-4(fp)
}
 4000a80:	e037883a 	mov	sp,fp
 4000a84:	df000017 	ldw	fp,0(sp)
 4000a88:	dec00104 	addi	sp,sp,4
 4000a8c:	f800283a 	ret

04000a90 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 4000a90:	defffe04 	addi	sp,sp,-8
 4000a94:	dfc00115 	stw	ra,4(sp)
 4000a98:	df000015 	stw	fp,0(sp)
 4000a9c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 4000aa0:	d0a00517 	ldw	r2,-32748(gp)
 4000aa4:	10000326 	beq	r2,zero,4000ab4 <alt_get_errno+0x24>
 4000aa8:	d0a00517 	ldw	r2,-32748(gp)
 4000aac:	103ee83a 	callr	r2
 4000ab0:	00000106 	br	4000ab8 <alt_get_errno+0x28>
 4000ab4:	d0a0ca04 	addi	r2,gp,-31960
}
 4000ab8:	e037883a 	mov	sp,fp
 4000abc:	dfc00117 	ldw	ra,4(sp)
 4000ac0:	df000017 	ldw	fp,0(sp)
 4000ac4:	dec00204 	addi	sp,sp,8
 4000ac8:	f800283a 	ret

04000acc <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 4000acc:	defffa04 	addi	sp,sp,-24
 4000ad0:	dfc00515 	stw	ra,20(sp)
 4000ad4:	df000415 	stw	fp,16(sp)
 4000ad8:	df000404 	addi	fp,sp,16
 4000adc:	e13ffe15 	stw	r4,-8(fp)
 4000ae0:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 4000ae4:	e0bffe17 	ldw	r2,-8(fp)
 4000ae8:	10000326 	beq	r2,zero,4000af8 <alt_dev_llist_insert+0x2c>
 4000aec:	e0bffe17 	ldw	r2,-8(fp)
 4000af0:	10800217 	ldw	r2,8(r2)
 4000af4:	1000061e 	bne	r2,zero,4000b10 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
 4000af8:	4000a900 	call	4000a90 <alt_get_errno>
 4000afc:	1007883a 	mov	r3,r2
 4000b00:	00800584 	movi	r2,22
 4000b04:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 4000b08:	00bffa84 	movi	r2,-22
 4000b0c:	00001306 	br	4000b5c <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 4000b10:	e0bffe17 	ldw	r2,-8(fp)
 4000b14:	e0ffff17 	ldw	r3,-4(fp)
 4000b18:	e0fffc15 	stw	r3,-16(fp)
 4000b1c:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 4000b20:	e0bffd17 	ldw	r2,-12(fp)
 4000b24:	e0fffc17 	ldw	r3,-16(fp)
 4000b28:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 4000b2c:	e0bffc17 	ldw	r2,-16(fp)
 4000b30:	10c00017 	ldw	r3,0(r2)
 4000b34:	e0bffd17 	ldw	r2,-12(fp)
 4000b38:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 4000b3c:	e0bffc17 	ldw	r2,-16(fp)
 4000b40:	10800017 	ldw	r2,0(r2)
 4000b44:	e0fffd17 	ldw	r3,-12(fp)
 4000b48:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 4000b4c:	e0bffc17 	ldw	r2,-16(fp)
 4000b50:	e0fffd17 	ldw	r3,-12(fp)
 4000b54:	10c00015 	stw	r3,0(r2)

  return 0;  
 4000b58:	0005883a 	mov	r2,zero
}
 4000b5c:	e037883a 	mov	sp,fp
 4000b60:	dfc00117 	ldw	ra,4(sp)
 4000b64:	df000017 	ldw	fp,0(sp)
 4000b68:	dec00204 	addi	sp,sp,8
 4000b6c:	f800283a 	ret

04000b70 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 4000b70:	defffd04 	addi	sp,sp,-12
 4000b74:	dfc00215 	stw	ra,8(sp)
 4000b78:	df000115 	stw	fp,4(sp)
 4000b7c:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 4000b80:	00810034 	movhi	r2,1024
 4000b84:	1086f104 	addi	r2,r2,7108
 4000b88:	e0bfff15 	stw	r2,-4(fp)
 4000b8c:	00000606 	br	4000ba8 <_do_ctors+0x38>
        (*ctor) (); 
 4000b90:	e0bfff17 	ldw	r2,-4(fp)
 4000b94:	10800017 	ldw	r2,0(r2)
 4000b98:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 4000b9c:	e0bfff17 	ldw	r2,-4(fp)
 4000ba0:	10bfff04 	addi	r2,r2,-4
 4000ba4:	e0bfff15 	stw	r2,-4(fp)
 4000ba8:	e0ffff17 	ldw	r3,-4(fp)
 4000bac:	00810034 	movhi	r2,1024
 4000bb0:	1086f204 	addi	r2,r2,7112
 4000bb4:	18bff62e 	bgeu	r3,r2,4000b90 <__alt_mem_onchip_memory+0xfbff8b90>
        (*ctor) (); 
}
 4000bb8:	0001883a 	nop
 4000bbc:	e037883a 	mov	sp,fp
 4000bc0:	dfc00117 	ldw	ra,4(sp)
 4000bc4:	df000017 	ldw	fp,0(sp)
 4000bc8:	dec00204 	addi	sp,sp,8
 4000bcc:	f800283a 	ret

04000bd0 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 4000bd0:	defffd04 	addi	sp,sp,-12
 4000bd4:	dfc00215 	stw	ra,8(sp)
 4000bd8:	df000115 	stw	fp,4(sp)
 4000bdc:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 4000be0:	00810034 	movhi	r2,1024
 4000be4:	1086f104 	addi	r2,r2,7108
 4000be8:	e0bfff15 	stw	r2,-4(fp)
 4000bec:	00000606 	br	4000c08 <_do_dtors+0x38>
        (*dtor) (); 
 4000bf0:	e0bfff17 	ldw	r2,-4(fp)
 4000bf4:	10800017 	ldw	r2,0(r2)
 4000bf8:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 4000bfc:	e0bfff17 	ldw	r2,-4(fp)
 4000c00:	10bfff04 	addi	r2,r2,-4
 4000c04:	e0bfff15 	stw	r2,-4(fp)
 4000c08:	e0ffff17 	ldw	r3,-4(fp)
 4000c0c:	00810034 	movhi	r2,1024
 4000c10:	1086f204 	addi	r2,r2,7112
 4000c14:	18bff62e 	bgeu	r3,r2,4000bf0 <__alt_mem_onchip_memory+0xfbff8bf0>
        (*dtor) (); 
}
 4000c18:	0001883a 	nop
 4000c1c:	e037883a 	mov	sp,fp
 4000c20:	dfc00117 	ldw	ra,4(sp)
 4000c24:	df000017 	ldw	fp,0(sp)
 4000c28:	dec00204 	addi	sp,sp,8
 4000c2c:	f800283a 	ret

04000c30 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 4000c30:	defffe04 	addi	sp,sp,-8
 4000c34:	dfc00115 	stw	ra,4(sp)
 4000c38:	df000015 	stw	fp,0(sp)
 4000c3c:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
 4000c40:	01500004 	movi	r5,16384
 4000c44:	0009883a 	mov	r4,zero
 4000c48:	40017000 	call	4001700 <alt_icache_flush>
#endif
}
 4000c4c:	0001883a 	nop
 4000c50:	e037883a 	mov	sp,fp
 4000c54:	dfc00117 	ldw	ra,4(sp)
 4000c58:	df000017 	ldw	fp,0(sp)
 4000c5c:	dec00204 	addi	sp,sp,8
 4000c60:	f800283a 	ret

04000c64 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 4000c64:	defff904 	addi	sp,sp,-28
 4000c68:	dfc00615 	stw	ra,24(sp)
 4000c6c:	df000515 	stw	fp,20(sp)
 4000c70:	df000504 	addi	fp,sp,20
 4000c74:	e13ffc15 	stw	r4,-16(fp)
 4000c78:	e17ffd15 	stw	r5,-12(fp)
 4000c7c:	e1bffe15 	stw	r6,-8(fp)
 4000c80:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 4000c84:	e0800217 	ldw	r2,8(fp)
 4000c88:	d8800015 	stw	r2,0(sp)
 4000c8c:	e1ffff17 	ldw	r7,-4(fp)
 4000c90:	e1bffe17 	ldw	r6,-8(fp)
 4000c94:	e17ffd17 	ldw	r5,-12(fp)
 4000c98:	e13ffc17 	ldw	r4,-16(fp)
 4000c9c:	4000e140 	call	4000e14 <alt_iic_isr_register>
}  
 4000ca0:	e037883a 	mov	sp,fp
 4000ca4:	dfc00117 	ldw	ra,4(sp)
 4000ca8:	df000017 	ldw	fp,0(sp)
 4000cac:	dec00204 	addi	sp,sp,8
 4000cb0:	f800283a 	ret

04000cb4 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 4000cb4:	defff904 	addi	sp,sp,-28
 4000cb8:	df000615 	stw	fp,24(sp)
 4000cbc:	df000604 	addi	fp,sp,24
 4000cc0:	e13ffe15 	stw	r4,-8(fp)
 4000cc4:	e17fff15 	stw	r5,-4(fp)
 4000cc8:	e0bfff17 	ldw	r2,-4(fp)
 4000ccc:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4000cd0:	0005303a 	rdctl	r2,status
 4000cd4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4000cd8:	e0fffb17 	ldw	r3,-20(fp)
 4000cdc:	00bfff84 	movi	r2,-2
 4000ce0:	1884703a 	and	r2,r3,r2
 4000ce4:	1001703a 	wrctl	status,r2
  
  return context;
 4000ce8:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 4000cec:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
 4000cf0:	00c00044 	movi	r3,1
 4000cf4:	e0bffa17 	ldw	r2,-24(fp)
 4000cf8:	1884983a 	sll	r2,r3,r2
 4000cfc:	1007883a 	mov	r3,r2
 4000d00:	d0a0c617 	ldw	r2,-31976(gp)
 4000d04:	1884b03a 	or	r2,r3,r2
 4000d08:	d0a0c615 	stw	r2,-31976(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 4000d0c:	d0a0c617 	ldw	r2,-31976(gp)
 4000d10:	100170fa 	wrctl	ienable,r2
 4000d14:	e0bffc17 	ldw	r2,-16(fp)
 4000d18:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4000d1c:	e0bffd17 	ldw	r2,-12(fp)
 4000d20:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 4000d24:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
 4000d28:	0001883a 	nop
}
 4000d2c:	e037883a 	mov	sp,fp
 4000d30:	df000017 	ldw	fp,0(sp)
 4000d34:	dec00104 	addi	sp,sp,4
 4000d38:	f800283a 	ret

04000d3c <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 4000d3c:	defff904 	addi	sp,sp,-28
 4000d40:	df000615 	stw	fp,24(sp)
 4000d44:	df000604 	addi	fp,sp,24
 4000d48:	e13ffe15 	stw	r4,-8(fp)
 4000d4c:	e17fff15 	stw	r5,-4(fp)
 4000d50:	e0bfff17 	ldw	r2,-4(fp)
 4000d54:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4000d58:	0005303a 	rdctl	r2,status
 4000d5c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4000d60:	e0fffb17 	ldw	r3,-20(fp)
 4000d64:	00bfff84 	movi	r2,-2
 4000d68:	1884703a 	and	r2,r3,r2
 4000d6c:	1001703a 	wrctl	status,r2
  
  return context;
 4000d70:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 4000d74:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
 4000d78:	00c00044 	movi	r3,1
 4000d7c:	e0bffa17 	ldw	r2,-24(fp)
 4000d80:	1884983a 	sll	r2,r3,r2
 4000d84:	0084303a 	nor	r2,zero,r2
 4000d88:	1007883a 	mov	r3,r2
 4000d8c:	d0a0c617 	ldw	r2,-31976(gp)
 4000d90:	1884703a 	and	r2,r3,r2
 4000d94:	d0a0c615 	stw	r2,-31976(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 4000d98:	d0a0c617 	ldw	r2,-31976(gp)
 4000d9c:	100170fa 	wrctl	ienable,r2
 4000da0:	e0bffc17 	ldw	r2,-16(fp)
 4000da4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4000da8:	e0bffd17 	ldw	r2,-12(fp)
 4000dac:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 4000db0:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
 4000db4:	0001883a 	nop
}
 4000db8:	e037883a 	mov	sp,fp
 4000dbc:	df000017 	ldw	fp,0(sp)
 4000dc0:	dec00104 	addi	sp,sp,4
 4000dc4:	f800283a 	ret

04000dc8 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 4000dc8:	defffc04 	addi	sp,sp,-16
 4000dcc:	df000315 	stw	fp,12(sp)
 4000dd0:	df000304 	addi	fp,sp,12
 4000dd4:	e13ffe15 	stw	r4,-8(fp)
 4000dd8:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 4000ddc:	000530fa 	rdctl	r2,ienable
 4000de0:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 4000de4:	00c00044 	movi	r3,1
 4000de8:	e0bfff17 	ldw	r2,-4(fp)
 4000dec:	1884983a 	sll	r2,r3,r2
 4000df0:	1007883a 	mov	r3,r2
 4000df4:	e0bffd17 	ldw	r2,-12(fp)
 4000df8:	1884703a 	and	r2,r3,r2
 4000dfc:	1004c03a 	cmpne	r2,r2,zero
 4000e00:	10803fcc 	andi	r2,r2,255
}
 4000e04:	e037883a 	mov	sp,fp
 4000e08:	df000017 	ldw	fp,0(sp)
 4000e0c:	dec00104 	addi	sp,sp,4
 4000e10:	f800283a 	ret

04000e14 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 4000e14:	defff504 	addi	sp,sp,-44
 4000e18:	dfc00a15 	stw	ra,40(sp)
 4000e1c:	df000915 	stw	fp,36(sp)
 4000e20:	df000904 	addi	fp,sp,36
 4000e24:	e13ffc15 	stw	r4,-16(fp)
 4000e28:	e17ffd15 	stw	r5,-12(fp)
 4000e2c:	e1bffe15 	stw	r6,-8(fp)
 4000e30:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
 4000e34:	00bffa84 	movi	r2,-22
 4000e38:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 4000e3c:	e0bffd17 	ldw	r2,-12(fp)
 4000e40:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 4000e44:	e0bff817 	ldw	r2,-32(fp)
 4000e48:	10800808 	cmpgei	r2,r2,32
 4000e4c:	1000271e 	bne	r2,zero,4000eec <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4000e50:	0005303a 	rdctl	r2,status
 4000e54:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4000e58:	e0fffb17 	ldw	r3,-20(fp)
 4000e5c:	00bfff84 	movi	r2,-2
 4000e60:	1884703a 	and	r2,r3,r2
 4000e64:	1001703a 	wrctl	status,r2
  
  return context;
 4000e68:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 4000e6c:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
 4000e70:	00810034 	movhi	r2,1024
 4000e74:	10887504 	addi	r2,r2,8660
 4000e78:	e0fff817 	ldw	r3,-32(fp)
 4000e7c:	180690fa 	slli	r3,r3,3
 4000e80:	10c5883a 	add	r2,r2,r3
 4000e84:	e0fffe17 	ldw	r3,-8(fp)
 4000e88:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
 4000e8c:	00810034 	movhi	r2,1024
 4000e90:	10887504 	addi	r2,r2,8660
 4000e94:	e0fff817 	ldw	r3,-32(fp)
 4000e98:	180690fa 	slli	r3,r3,3
 4000e9c:	10c5883a 	add	r2,r2,r3
 4000ea0:	10800104 	addi	r2,r2,4
 4000ea4:	e0ffff17 	ldw	r3,-4(fp)
 4000ea8:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 4000eac:	e0bffe17 	ldw	r2,-8(fp)
 4000eb0:	10000526 	beq	r2,zero,4000ec8 <alt_iic_isr_register+0xb4>
 4000eb4:	e0bff817 	ldw	r2,-32(fp)
 4000eb8:	100b883a 	mov	r5,r2
 4000ebc:	e13ffc17 	ldw	r4,-16(fp)
 4000ec0:	4000cb40 	call	4000cb4 <alt_ic_irq_enable>
 4000ec4:	00000406 	br	4000ed8 <alt_iic_isr_register+0xc4>
 4000ec8:	e0bff817 	ldw	r2,-32(fp)
 4000ecc:	100b883a 	mov	r5,r2
 4000ed0:	e13ffc17 	ldw	r4,-16(fp)
 4000ed4:	4000d3c0 	call	4000d3c <alt_ic_irq_disable>
 4000ed8:	e0bff715 	stw	r2,-36(fp)
 4000edc:	e0bffa17 	ldw	r2,-24(fp)
 4000ee0:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4000ee4:	e0bff917 	ldw	r2,-28(fp)
 4000ee8:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 4000eec:	e0bff717 	ldw	r2,-36(fp)
}
 4000ef0:	e037883a 	mov	sp,fp
 4000ef4:	dfc00117 	ldw	ra,4(sp)
 4000ef8:	df000017 	ldw	fp,0(sp)
 4000efc:	dec00204 	addi	sp,sp,8
 4000f00:	f800283a 	ret

04000f04 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 4000f04:	defff904 	addi	sp,sp,-28
 4000f08:	dfc00615 	stw	ra,24(sp)
 4000f0c:	df000515 	stw	fp,20(sp)
 4000f10:	df000504 	addi	fp,sp,20
 4000f14:	e13ffc15 	stw	r4,-16(fp)
 4000f18:	e17ffd15 	stw	r5,-12(fp)
 4000f1c:	e1bffe15 	stw	r6,-8(fp)
 4000f20:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
 4000f24:	e1bfff17 	ldw	r6,-4(fp)
 4000f28:	e17ffe17 	ldw	r5,-8(fp)
 4000f2c:	e13ffd17 	ldw	r4,-12(fp)
 4000f30:	40011440 	call	4001144 <open>
 4000f34:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
 4000f38:	e0bffb17 	ldw	r2,-20(fp)
 4000f3c:	10001c16 	blt	r2,zero,4000fb0 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
 4000f40:	00810034 	movhi	r2,1024
 4000f44:	10871204 	addi	r2,r2,7240
 4000f48:	e0fffb17 	ldw	r3,-20(fp)
 4000f4c:	18c00324 	muli	r3,r3,12
 4000f50:	10c5883a 	add	r2,r2,r3
 4000f54:	10c00017 	ldw	r3,0(r2)
 4000f58:	e0bffc17 	ldw	r2,-16(fp)
 4000f5c:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 4000f60:	00810034 	movhi	r2,1024
 4000f64:	10871204 	addi	r2,r2,7240
 4000f68:	e0fffb17 	ldw	r3,-20(fp)
 4000f6c:	18c00324 	muli	r3,r3,12
 4000f70:	10c5883a 	add	r2,r2,r3
 4000f74:	10800104 	addi	r2,r2,4
 4000f78:	10c00017 	ldw	r3,0(r2)
 4000f7c:	e0bffc17 	ldw	r2,-16(fp)
 4000f80:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 4000f84:	00810034 	movhi	r2,1024
 4000f88:	10871204 	addi	r2,r2,7240
 4000f8c:	e0fffb17 	ldw	r3,-20(fp)
 4000f90:	18c00324 	muli	r3,r3,12
 4000f94:	10c5883a 	add	r2,r2,r3
 4000f98:	10800204 	addi	r2,r2,8
 4000f9c:	10c00017 	ldw	r3,0(r2)
 4000fa0:	e0bffc17 	ldw	r2,-16(fp)
 4000fa4:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 4000fa8:	e13ffb17 	ldw	r4,-20(fp)
 4000fac:	40012980 	call	4001298 <alt_release_fd>
  }
} 
 4000fb0:	0001883a 	nop
 4000fb4:	e037883a 	mov	sp,fp
 4000fb8:	dfc00117 	ldw	ra,4(sp)
 4000fbc:	df000017 	ldw	fp,0(sp)
 4000fc0:	dec00204 	addi	sp,sp,8
 4000fc4:	f800283a 	ret

04000fc8 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 4000fc8:	defffb04 	addi	sp,sp,-20
 4000fcc:	dfc00415 	stw	ra,16(sp)
 4000fd0:	df000315 	stw	fp,12(sp)
 4000fd4:	df000304 	addi	fp,sp,12
 4000fd8:	e13ffd15 	stw	r4,-12(fp)
 4000fdc:	e17ffe15 	stw	r5,-8(fp)
 4000fe0:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 4000fe4:	01c07fc4 	movi	r7,511
 4000fe8:	01800044 	movi	r6,1
 4000fec:	e17ffd17 	ldw	r5,-12(fp)
 4000ff0:	01010034 	movhi	r4,1024
 4000ff4:	21071504 	addi	r4,r4,7252
 4000ff8:	4000f040 	call	4000f04 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 4000ffc:	01c07fc4 	movi	r7,511
 4001000:	000d883a 	mov	r6,zero
 4001004:	e17ffe17 	ldw	r5,-8(fp)
 4001008:	01010034 	movhi	r4,1024
 400100c:	21071204 	addi	r4,r4,7240
 4001010:	4000f040 	call	4000f04 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 4001014:	01c07fc4 	movi	r7,511
 4001018:	01800044 	movi	r6,1
 400101c:	e17fff17 	ldw	r5,-4(fp)
 4001020:	01010034 	movhi	r4,1024
 4001024:	21071804 	addi	r4,r4,7264
 4001028:	4000f040 	call	4000f04 <alt_open_fd>
}  
 400102c:	0001883a 	nop
 4001030:	e037883a 	mov	sp,fp
 4001034:	dfc00117 	ldw	ra,4(sp)
 4001038:	df000017 	ldw	fp,0(sp)
 400103c:	dec00204 	addi	sp,sp,8
 4001040:	f800283a 	ret

04001044 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 4001044:	defffe04 	addi	sp,sp,-8
 4001048:	dfc00115 	stw	ra,4(sp)
 400104c:	df000015 	stw	fp,0(sp)
 4001050:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 4001054:	d0a00517 	ldw	r2,-32748(gp)
 4001058:	10000326 	beq	r2,zero,4001068 <alt_get_errno+0x24>
 400105c:	d0a00517 	ldw	r2,-32748(gp)
 4001060:	103ee83a 	callr	r2
 4001064:	00000106 	br	400106c <alt_get_errno+0x28>
 4001068:	d0a0ca04 	addi	r2,gp,-31960
}
 400106c:	e037883a 	mov	sp,fp
 4001070:	dfc00117 	ldw	ra,4(sp)
 4001074:	df000017 	ldw	fp,0(sp)
 4001078:	dec00204 	addi	sp,sp,8
 400107c:	f800283a 	ret

04001080 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 4001080:	defffd04 	addi	sp,sp,-12
 4001084:	df000215 	stw	fp,8(sp)
 4001088:	df000204 	addi	fp,sp,8
 400108c:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 4001090:	e0bfff17 	ldw	r2,-4(fp)
 4001094:	10800217 	ldw	r2,8(r2)
 4001098:	10d00034 	orhi	r3,r2,16384
 400109c:	e0bfff17 	ldw	r2,-4(fp)
 40010a0:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 40010a4:	e03ffe15 	stw	zero,-8(fp)
 40010a8:	00001d06 	br	4001120 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 40010ac:	00810034 	movhi	r2,1024
 40010b0:	10871204 	addi	r2,r2,7240
 40010b4:	e0fffe17 	ldw	r3,-8(fp)
 40010b8:	18c00324 	muli	r3,r3,12
 40010bc:	10c5883a 	add	r2,r2,r3
 40010c0:	10c00017 	ldw	r3,0(r2)
 40010c4:	e0bfff17 	ldw	r2,-4(fp)
 40010c8:	10800017 	ldw	r2,0(r2)
 40010cc:	1880111e 	bne	r3,r2,4001114 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 40010d0:	00810034 	movhi	r2,1024
 40010d4:	10871204 	addi	r2,r2,7240
 40010d8:	e0fffe17 	ldw	r3,-8(fp)
 40010dc:	18c00324 	muli	r3,r3,12
 40010e0:	10c5883a 	add	r2,r2,r3
 40010e4:	10800204 	addi	r2,r2,8
 40010e8:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 40010ec:	1000090e 	bge	r2,zero,4001114 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
 40010f0:	e0bffe17 	ldw	r2,-8(fp)
 40010f4:	10c00324 	muli	r3,r2,12
 40010f8:	00810034 	movhi	r2,1024
 40010fc:	10871204 	addi	r2,r2,7240
 4001100:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 4001104:	e0bfff17 	ldw	r2,-4(fp)
 4001108:	18800226 	beq	r3,r2,4001114 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 400110c:	00bffcc4 	movi	r2,-13
 4001110:	00000806 	br	4001134 <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 4001114:	e0bffe17 	ldw	r2,-8(fp)
 4001118:	10800044 	addi	r2,r2,1
 400111c:	e0bffe15 	stw	r2,-8(fp)
 4001120:	d0a00417 	ldw	r2,-32752(gp)
 4001124:	1007883a 	mov	r3,r2
 4001128:	e0bffe17 	ldw	r2,-8(fp)
 400112c:	18bfdf2e 	bgeu	r3,r2,40010ac <__alt_mem_onchip_memory+0xfbff90ac>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 4001130:	0005883a 	mov	r2,zero
}
 4001134:	e037883a 	mov	sp,fp
 4001138:	df000017 	ldw	fp,0(sp)
 400113c:	dec00104 	addi	sp,sp,4
 4001140:	f800283a 	ret

04001144 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 4001144:	defff604 	addi	sp,sp,-40
 4001148:	dfc00915 	stw	ra,36(sp)
 400114c:	df000815 	stw	fp,32(sp)
 4001150:	df000804 	addi	fp,sp,32
 4001154:	e13ffd15 	stw	r4,-12(fp)
 4001158:	e17ffe15 	stw	r5,-8(fp)
 400115c:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 4001160:	00bfffc4 	movi	r2,-1
 4001164:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
 4001168:	00bffb44 	movi	r2,-19
 400116c:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
 4001170:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 4001174:	d1600204 	addi	r5,gp,-32760
 4001178:	e13ffd17 	ldw	r4,-12(fp)
 400117c:	40014c40 	call	40014c4 <alt_find_dev>
 4001180:	e0bff815 	stw	r2,-32(fp)
 4001184:	e0bff817 	ldw	r2,-32(fp)
 4001188:	1000051e 	bne	r2,zero,40011a0 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 400118c:	e13ffd17 	ldw	r4,-12(fp)
 4001190:	40015540 	call	4001554 <alt_find_file>
 4001194:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
 4001198:	00800044 	movi	r2,1
 400119c:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 40011a0:	e0bff817 	ldw	r2,-32(fp)
 40011a4:	10002926 	beq	r2,zero,400124c <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
 40011a8:	e13ff817 	ldw	r4,-32(fp)
 40011ac:	400165c0 	call	400165c <alt_get_fd>
 40011b0:	e0bff915 	stw	r2,-28(fp)
 40011b4:	e0bff917 	ldw	r2,-28(fp)
 40011b8:	1000030e 	bge	r2,zero,40011c8 <open+0x84>
    {
      status = index;
 40011bc:	e0bff917 	ldw	r2,-28(fp)
 40011c0:	e0bffa15 	stw	r2,-24(fp)
 40011c4:	00002306 	br	4001254 <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
 40011c8:	e0bff917 	ldw	r2,-28(fp)
 40011cc:	10c00324 	muli	r3,r2,12
 40011d0:	00810034 	movhi	r2,1024
 40011d4:	10871204 	addi	r2,r2,7240
 40011d8:	1885883a 	add	r2,r3,r2
 40011dc:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 40011e0:	e0fffe17 	ldw	r3,-8(fp)
 40011e4:	00900034 	movhi	r2,16384
 40011e8:	10bfffc4 	addi	r2,r2,-1
 40011ec:	1886703a 	and	r3,r3,r2
 40011f0:	e0bffc17 	ldw	r2,-16(fp)
 40011f4:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 40011f8:	e0bffb17 	ldw	r2,-20(fp)
 40011fc:	1000051e 	bne	r2,zero,4001214 <open+0xd0>
 4001200:	e13ffc17 	ldw	r4,-16(fp)
 4001204:	40010800 	call	4001080 <alt_file_locked>
 4001208:	e0bffa15 	stw	r2,-24(fp)
 400120c:	e0bffa17 	ldw	r2,-24(fp)
 4001210:	10001016 	blt	r2,zero,4001254 <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 4001214:	e0bff817 	ldw	r2,-32(fp)
 4001218:	10800317 	ldw	r2,12(r2)
 400121c:	10000826 	beq	r2,zero,4001240 <open+0xfc>
 4001220:	e0bff817 	ldw	r2,-32(fp)
 4001224:	10800317 	ldw	r2,12(r2)
 4001228:	e1ffff17 	ldw	r7,-4(fp)
 400122c:	e1bffe17 	ldw	r6,-8(fp)
 4001230:	e17ffd17 	ldw	r5,-12(fp)
 4001234:	e13ffc17 	ldw	r4,-16(fp)
 4001238:	103ee83a 	callr	r2
 400123c:	00000106 	br	4001244 <open+0x100>
 4001240:	0005883a 	mov	r2,zero
 4001244:	e0bffa15 	stw	r2,-24(fp)
 4001248:	00000206 	br	4001254 <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
 400124c:	00bffb44 	movi	r2,-19
 4001250:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 4001254:	e0bffa17 	ldw	r2,-24(fp)
 4001258:	1000090e 	bge	r2,zero,4001280 <open+0x13c>
  {
    alt_release_fd (index);  
 400125c:	e13ff917 	ldw	r4,-28(fp)
 4001260:	40012980 	call	4001298 <alt_release_fd>
    ALT_ERRNO = -status;
 4001264:	40010440 	call	4001044 <alt_get_errno>
 4001268:	1007883a 	mov	r3,r2
 400126c:	e0bffa17 	ldw	r2,-24(fp)
 4001270:	0085c83a 	sub	r2,zero,r2
 4001274:	18800015 	stw	r2,0(r3)
    return -1;
 4001278:	00bfffc4 	movi	r2,-1
 400127c:	00000106 	br	4001284 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
 4001280:	e0bff917 	ldw	r2,-28(fp)
}
 4001284:	e037883a 	mov	sp,fp
 4001288:	dfc00117 	ldw	ra,4(sp)
 400128c:	df000017 	ldw	fp,0(sp)
 4001290:	dec00204 	addi	sp,sp,8
 4001294:	f800283a 	ret

04001298 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 4001298:	defffe04 	addi	sp,sp,-8
 400129c:	df000115 	stw	fp,4(sp)
 40012a0:	df000104 	addi	fp,sp,4
 40012a4:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
 40012a8:	e0bfff17 	ldw	r2,-4(fp)
 40012ac:	108000d0 	cmplti	r2,r2,3
 40012b0:	10000d1e 	bne	r2,zero,40012e8 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
 40012b4:	00810034 	movhi	r2,1024
 40012b8:	10871204 	addi	r2,r2,7240
 40012bc:	e0ffff17 	ldw	r3,-4(fp)
 40012c0:	18c00324 	muli	r3,r3,12
 40012c4:	10c5883a 	add	r2,r2,r3
 40012c8:	10800204 	addi	r2,r2,8
 40012cc:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 40012d0:	00810034 	movhi	r2,1024
 40012d4:	10871204 	addi	r2,r2,7240
 40012d8:	e0ffff17 	ldw	r3,-4(fp)
 40012dc:	18c00324 	muli	r3,r3,12
 40012e0:	10c5883a 	add	r2,r2,r3
 40012e4:	10000015 	stw	zero,0(r2)
  }
}
 40012e8:	0001883a 	nop
 40012ec:	e037883a 	mov	sp,fp
 40012f0:	df000017 	ldw	fp,0(sp)
 40012f4:	dec00104 	addi	sp,sp,4
 40012f8:	f800283a 	ret

040012fc <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 40012fc:	defffa04 	addi	sp,sp,-24
 4001300:	df000515 	stw	fp,20(sp)
 4001304:	df000504 	addi	fp,sp,20
 4001308:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400130c:	0005303a 	rdctl	r2,status
 4001310:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4001314:	e0fffc17 	ldw	r3,-16(fp)
 4001318:	00bfff84 	movi	r2,-2
 400131c:	1884703a 	and	r2,r3,r2
 4001320:	1001703a 	wrctl	status,r2
  
  return context;
 4001324:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 4001328:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
 400132c:	e0bfff17 	ldw	r2,-4(fp)
 4001330:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 4001334:	e0bffd17 	ldw	r2,-12(fp)
 4001338:	10800017 	ldw	r2,0(r2)
 400133c:	e0fffd17 	ldw	r3,-12(fp)
 4001340:	18c00117 	ldw	r3,4(r3)
 4001344:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 4001348:	e0bffd17 	ldw	r2,-12(fp)
 400134c:	10800117 	ldw	r2,4(r2)
 4001350:	e0fffd17 	ldw	r3,-12(fp)
 4001354:	18c00017 	ldw	r3,0(r3)
 4001358:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 400135c:	e0bffd17 	ldw	r2,-12(fp)
 4001360:	e0fffd17 	ldw	r3,-12(fp)
 4001364:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 4001368:	e0bffd17 	ldw	r2,-12(fp)
 400136c:	e0fffd17 	ldw	r3,-12(fp)
 4001370:	10c00015 	stw	r3,0(r2)
 4001374:	e0bffb17 	ldw	r2,-20(fp)
 4001378:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400137c:	e0bffe17 	ldw	r2,-8(fp)
 4001380:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 4001384:	0001883a 	nop
 4001388:	e037883a 	mov	sp,fp
 400138c:	df000017 	ldw	fp,0(sp)
 4001390:	dec00104 	addi	sp,sp,4
 4001394:	f800283a 	ret

04001398 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 4001398:	defffb04 	addi	sp,sp,-20
 400139c:	dfc00415 	stw	ra,16(sp)
 40013a0:	df000315 	stw	fp,12(sp)
 40013a4:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 40013a8:	d0a00717 	ldw	r2,-32740(gp)
 40013ac:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 40013b0:	d0a0c817 	ldw	r2,-31968(gp)
 40013b4:	10800044 	addi	r2,r2,1
 40013b8:	d0a0c815 	stw	r2,-31968(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 40013bc:	00002e06 	br	4001478 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 40013c0:	e0bffd17 	ldw	r2,-12(fp)
 40013c4:	10800017 	ldw	r2,0(r2)
 40013c8:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 40013cc:	e0bffd17 	ldw	r2,-12(fp)
 40013d0:	10800403 	ldbu	r2,16(r2)
 40013d4:	10803fcc 	andi	r2,r2,255
 40013d8:	10000426 	beq	r2,zero,40013ec <alt_tick+0x54>
 40013dc:	d0a0c817 	ldw	r2,-31968(gp)
 40013e0:	1000021e 	bne	r2,zero,40013ec <alt_tick+0x54>
    {
      alarm->rollover = 0;
 40013e4:	e0bffd17 	ldw	r2,-12(fp)
 40013e8:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 40013ec:	e0bffd17 	ldw	r2,-12(fp)
 40013f0:	10800217 	ldw	r2,8(r2)
 40013f4:	d0e0c817 	ldw	r3,-31968(gp)
 40013f8:	18801d36 	bltu	r3,r2,4001470 <alt_tick+0xd8>
 40013fc:	e0bffd17 	ldw	r2,-12(fp)
 4001400:	10800403 	ldbu	r2,16(r2)
 4001404:	10803fcc 	andi	r2,r2,255
 4001408:	1000191e 	bne	r2,zero,4001470 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 400140c:	e0bffd17 	ldw	r2,-12(fp)
 4001410:	10800317 	ldw	r2,12(r2)
 4001414:	e0fffd17 	ldw	r3,-12(fp)
 4001418:	18c00517 	ldw	r3,20(r3)
 400141c:	1809883a 	mov	r4,r3
 4001420:	103ee83a 	callr	r2
 4001424:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 4001428:	e0bfff17 	ldw	r2,-4(fp)
 400142c:	1000031e 	bne	r2,zero,400143c <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 4001430:	e13ffd17 	ldw	r4,-12(fp)
 4001434:	40012fc0 	call	40012fc <alt_alarm_stop>
 4001438:	00000d06 	br	4001470 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 400143c:	e0bffd17 	ldw	r2,-12(fp)
 4001440:	10c00217 	ldw	r3,8(r2)
 4001444:	e0bfff17 	ldw	r2,-4(fp)
 4001448:	1887883a 	add	r3,r3,r2
 400144c:	e0bffd17 	ldw	r2,-12(fp)
 4001450:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 4001454:	e0bffd17 	ldw	r2,-12(fp)
 4001458:	10c00217 	ldw	r3,8(r2)
 400145c:	d0a0c817 	ldw	r2,-31968(gp)
 4001460:	1880032e 	bgeu	r3,r2,4001470 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 4001464:	e0bffd17 	ldw	r2,-12(fp)
 4001468:	00c00044 	movi	r3,1
 400146c:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 4001470:	e0bffe17 	ldw	r2,-8(fp)
 4001474:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 4001478:	e0fffd17 	ldw	r3,-12(fp)
 400147c:	d0a00704 	addi	r2,gp,-32740
 4001480:	18bfcf1e 	bne	r3,r2,40013c0 <__alt_mem_onchip_memory+0xfbff93c0>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 4001484:	0001883a 	nop
}
 4001488:	0001883a 	nop
 400148c:	e037883a 	mov	sp,fp
 4001490:	dfc00117 	ldw	ra,4(sp)
 4001494:	df000017 	ldw	fp,0(sp)
 4001498:	dec00204 	addi	sp,sp,8
 400149c:	f800283a 	ret

040014a0 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
 40014a0:	deffff04 	addi	sp,sp,-4
 40014a4:	df000015 	stw	fp,0(sp)
 40014a8:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 40014ac:	000170fa 	wrctl	ienable,zero
}
 40014b0:	0001883a 	nop
 40014b4:	e037883a 	mov	sp,fp
 40014b8:	df000017 	ldw	fp,0(sp)
 40014bc:	dec00104 	addi	sp,sp,4
 40014c0:	f800283a 	ret

040014c4 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 40014c4:	defffa04 	addi	sp,sp,-24
 40014c8:	dfc00515 	stw	ra,20(sp)
 40014cc:	df000415 	stw	fp,16(sp)
 40014d0:	df000404 	addi	fp,sp,16
 40014d4:	e13ffe15 	stw	r4,-8(fp)
 40014d8:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
 40014dc:	e0bfff17 	ldw	r2,-4(fp)
 40014e0:	10800017 	ldw	r2,0(r2)
 40014e4:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 40014e8:	e13ffe17 	ldw	r4,-8(fp)
 40014ec:	40018900 	call	4001890 <strlen>
 40014f0:	10800044 	addi	r2,r2,1
 40014f4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 40014f8:	00000d06 	br	4001530 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 40014fc:	e0bffc17 	ldw	r2,-16(fp)
 4001500:	10800217 	ldw	r2,8(r2)
 4001504:	e0fffd17 	ldw	r3,-12(fp)
 4001508:	180d883a 	mov	r6,r3
 400150c:	e17ffe17 	ldw	r5,-8(fp)
 4001510:	1009883a 	mov	r4,r2
 4001514:	40018600 	call	4001860 <memcmp>
 4001518:	1000021e 	bne	r2,zero,4001524 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 400151c:	e0bffc17 	ldw	r2,-16(fp)
 4001520:	00000706 	br	4001540 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 4001524:	e0bffc17 	ldw	r2,-16(fp)
 4001528:	10800017 	ldw	r2,0(r2)
 400152c:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 4001530:	e0fffc17 	ldw	r3,-16(fp)
 4001534:	e0bfff17 	ldw	r2,-4(fp)
 4001538:	18bff01e 	bne	r3,r2,40014fc <__alt_mem_onchip_memory+0xfbff94fc>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 400153c:	0005883a 	mov	r2,zero
}
 4001540:	e037883a 	mov	sp,fp
 4001544:	dfc00117 	ldw	ra,4(sp)
 4001548:	df000017 	ldw	fp,0(sp)
 400154c:	dec00204 	addi	sp,sp,8
 4001550:	f800283a 	ret

04001554 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 4001554:	defffb04 	addi	sp,sp,-20
 4001558:	dfc00415 	stw	ra,16(sp)
 400155c:	df000315 	stw	fp,12(sp)
 4001560:	df000304 	addi	fp,sp,12
 4001564:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 4001568:	d0a00017 	ldw	r2,-32768(gp)
 400156c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 4001570:	00003106 	br	4001638 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
 4001574:	e0bffd17 	ldw	r2,-12(fp)
 4001578:	10800217 	ldw	r2,8(r2)
 400157c:	1009883a 	mov	r4,r2
 4001580:	40018900 	call	4001890 <strlen>
 4001584:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 4001588:	e0bffd17 	ldw	r2,-12(fp)
 400158c:	10c00217 	ldw	r3,8(r2)
 4001590:	e0bffe17 	ldw	r2,-8(fp)
 4001594:	10bfffc4 	addi	r2,r2,-1
 4001598:	1885883a 	add	r2,r3,r2
 400159c:	10800003 	ldbu	r2,0(r2)
 40015a0:	10803fcc 	andi	r2,r2,255
 40015a4:	1080201c 	xori	r2,r2,128
 40015a8:	10bfe004 	addi	r2,r2,-128
 40015ac:	10800bd8 	cmpnei	r2,r2,47
 40015b0:	1000031e 	bne	r2,zero,40015c0 <alt_find_file+0x6c>
    {
      len -= 1;
 40015b4:	e0bffe17 	ldw	r2,-8(fp)
 40015b8:	10bfffc4 	addi	r2,r2,-1
 40015bc:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 40015c0:	e0bffe17 	ldw	r2,-8(fp)
 40015c4:	e0ffff17 	ldw	r3,-4(fp)
 40015c8:	1885883a 	add	r2,r3,r2
 40015cc:	10800003 	ldbu	r2,0(r2)
 40015d0:	10803fcc 	andi	r2,r2,255
 40015d4:	1080201c 	xori	r2,r2,128
 40015d8:	10bfe004 	addi	r2,r2,-128
 40015dc:	10800be0 	cmpeqi	r2,r2,47
 40015e0:	1000081e 	bne	r2,zero,4001604 <alt_find_file+0xb0>
 40015e4:	e0bffe17 	ldw	r2,-8(fp)
 40015e8:	e0ffff17 	ldw	r3,-4(fp)
 40015ec:	1885883a 	add	r2,r3,r2
 40015f0:	10800003 	ldbu	r2,0(r2)
 40015f4:	10803fcc 	andi	r2,r2,255
 40015f8:	1080201c 	xori	r2,r2,128
 40015fc:	10bfe004 	addi	r2,r2,-128
 4001600:	10000a1e 	bne	r2,zero,400162c <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
 4001604:	e0bffd17 	ldw	r2,-12(fp)
 4001608:	10800217 	ldw	r2,8(r2)
 400160c:	e0fffe17 	ldw	r3,-8(fp)
 4001610:	180d883a 	mov	r6,r3
 4001614:	e17fff17 	ldw	r5,-4(fp)
 4001618:	1009883a 	mov	r4,r2
 400161c:	40018600 	call	4001860 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 4001620:	1000021e 	bne	r2,zero,400162c <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 4001624:	e0bffd17 	ldw	r2,-12(fp)
 4001628:	00000706 	br	4001648 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
 400162c:	e0bffd17 	ldw	r2,-12(fp)
 4001630:	10800017 	ldw	r2,0(r2)
 4001634:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 4001638:	e0fffd17 	ldw	r3,-12(fp)
 400163c:	d0a00004 	addi	r2,gp,-32768
 4001640:	18bfcc1e 	bne	r3,r2,4001574 <__alt_mem_onchip_memory+0xfbff9574>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 4001644:	0005883a 	mov	r2,zero
}
 4001648:	e037883a 	mov	sp,fp
 400164c:	dfc00117 	ldw	ra,4(sp)
 4001650:	df000017 	ldw	fp,0(sp)
 4001654:	dec00204 	addi	sp,sp,8
 4001658:	f800283a 	ret

0400165c <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 400165c:	defffc04 	addi	sp,sp,-16
 4001660:	df000315 	stw	fp,12(sp)
 4001664:	df000304 	addi	fp,sp,12
 4001668:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
 400166c:	00bffa04 	movi	r2,-24
 4001670:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 4001674:	e03ffd15 	stw	zero,-12(fp)
 4001678:	00001906 	br	40016e0 <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
 400167c:	00810034 	movhi	r2,1024
 4001680:	10871204 	addi	r2,r2,7240
 4001684:	e0fffd17 	ldw	r3,-12(fp)
 4001688:	18c00324 	muli	r3,r3,12
 400168c:	10c5883a 	add	r2,r2,r3
 4001690:	10800017 	ldw	r2,0(r2)
 4001694:	10000f1e 	bne	r2,zero,40016d4 <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
 4001698:	00810034 	movhi	r2,1024
 400169c:	10871204 	addi	r2,r2,7240
 40016a0:	e0fffd17 	ldw	r3,-12(fp)
 40016a4:	18c00324 	muli	r3,r3,12
 40016a8:	10c5883a 	add	r2,r2,r3
 40016ac:	e0ffff17 	ldw	r3,-4(fp)
 40016b0:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
 40016b4:	d0e00417 	ldw	r3,-32752(gp)
 40016b8:	e0bffd17 	ldw	r2,-12(fp)
 40016bc:	1880020e 	bge	r3,r2,40016c8 <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
 40016c0:	e0bffd17 	ldw	r2,-12(fp)
 40016c4:	d0a00415 	stw	r2,-32752(gp)
      }
      rc = i;
 40016c8:	e0bffd17 	ldw	r2,-12(fp)
 40016cc:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
 40016d0:	00000606 	br	40016ec <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 40016d4:	e0bffd17 	ldw	r2,-12(fp)
 40016d8:	10800044 	addi	r2,r2,1
 40016dc:	e0bffd15 	stw	r2,-12(fp)
 40016e0:	e0bffd17 	ldw	r2,-12(fp)
 40016e4:	10800810 	cmplti	r2,r2,32
 40016e8:	103fe41e 	bne	r2,zero,400167c <__alt_mem_onchip_memory+0xfbff967c>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 40016ec:	e0bffe17 	ldw	r2,-8(fp)
}
 40016f0:	e037883a 	mov	sp,fp
 40016f4:	df000017 	ldw	fp,0(sp)
 40016f8:	dec00104 	addi	sp,sp,4
 40016fc:	f800283a 	ret

04001700 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
 4001700:	defffb04 	addi	sp,sp,-20
 4001704:	df000415 	stw	fp,16(sp)
 4001708:	df000404 	addi	fp,sp,16
 400170c:	e13ffe15 	stw	r4,-8(fp)
 4001710:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
 4001714:	e0bfff17 	ldw	r2,-4(fp)
 4001718:	10900070 	cmpltui	r2,r2,16385
 400171c:	1000021e 	bne	r2,zero,4001728 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
 4001720:	00900004 	movi	r2,16384
 4001724:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
 4001728:	e0fffe17 	ldw	r3,-8(fp)
 400172c:	e0bfff17 	ldw	r2,-4(fp)
 4001730:	1885883a 	add	r2,r3,r2
 4001734:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 4001738:	e0bffe17 	ldw	r2,-8(fp)
 400173c:	e0bffc15 	stw	r2,-16(fp)
 4001740:	00000506 	br	4001758 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
 4001744:	e0bffc17 	ldw	r2,-16(fp)
 4001748:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 400174c:	e0bffc17 	ldw	r2,-16(fp)
 4001750:	10800804 	addi	r2,r2,32
 4001754:	e0bffc15 	stw	r2,-16(fp)
 4001758:	e0fffc17 	ldw	r3,-16(fp)
 400175c:	e0bffd17 	ldw	r2,-12(fp)
 4001760:	18bff836 	bltu	r3,r2,4001744 <__alt_mem_onchip_memory+0xfbff9744>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
 4001764:	e0bffe17 	ldw	r2,-8(fp)
 4001768:	108007cc 	andi	r2,r2,31
 400176c:	10000226 	beq	r2,zero,4001778 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
 4001770:	e0bffc17 	ldw	r2,-16(fp)
 4001774:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
 4001778:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
 400177c:	0001883a 	nop
 4001780:	e037883a 	mov	sp,fp
 4001784:	df000017 	ldw	fp,0(sp)
 4001788:	dec00104 	addi	sp,sp,4
 400178c:	f800283a 	ret

04001790 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
 4001790:	defffe04 	addi	sp,sp,-8
 4001794:	df000115 	stw	fp,4(sp)
 4001798:	df000104 	addi	fp,sp,4
 400179c:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
 40017a0:	e0bfff17 	ldw	r2,-4(fp)
 40017a4:	10bffe84 	addi	r2,r2,-6
 40017a8:	10c00428 	cmpgeui	r3,r2,16
 40017ac:	18001a1e 	bne	r3,zero,4001818 <alt_exception_cause_generated_bad_addr+0x88>
 40017b0:	100690ba 	slli	r3,r2,2
 40017b4:	00810034 	movhi	r2,1024
 40017b8:	1085f204 	addi	r2,r2,6088
 40017bc:	1885883a 	add	r2,r3,r2
 40017c0:	10800017 	ldw	r2,0(r2)
 40017c4:	1000683a 	jmp	r2
 40017c8:	04001808 	cmpgei	r16,zero,96
 40017cc:	04001808 	cmpgei	r16,zero,96
 40017d0:	04001818 	cmpnei	r16,zero,96
 40017d4:	04001818 	cmpnei	r16,zero,96
 40017d8:	04001818 	cmpnei	r16,zero,96
 40017dc:	04001808 	cmpgei	r16,zero,96
 40017e0:	04001810 	cmplti	r16,zero,96
 40017e4:	04001818 	cmpnei	r16,zero,96
 40017e8:	04001808 	cmpgei	r16,zero,96
 40017ec:	04001808 	cmpgei	r16,zero,96
 40017f0:	04001818 	cmpnei	r16,zero,96
 40017f4:	04001808 	cmpgei	r16,zero,96
 40017f8:	04001810 	cmplti	r16,zero,96
 40017fc:	04001818 	cmpnei	r16,zero,96
 4001800:	04001818 	cmpnei	r16,zero,96
 4001804:	04001808 	cmpgei	r16,zero,96
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
 4001808:	00800044 	movi	r2,1
 400180c:	00000306 	br	400181c <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
 4001810:	0005883a 	mov	r2,zero
 4001814:	00000106 	br	400181c <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
 4001818:	0005883a 	mov	r2,zero
  }
}
 400181c:	e037883a 	mov	sp,fp
 4001820:	df000017 	ldw	fp,0(sp)
 4001824:	dec00104 	addi	sp,sp,4
 4001828:	f800283a 	ret

0400182c <atexit>:
 400182c:	200b883a 	mov	r5,r4
 4001830:	000f883a 	mov	r7,zero
 4001834:	000d883a 	mov	r6,zero
 4001838:	0009883a 	mov	r4,zero
 400183c:	40018ac1 	jmpi	40018ac <__register_exitproc>

04001840 <exit>:
 4001840:	defffe04 	addi	sp,sp,-8
 4001844:	000b883a 	mov	r5,zero
 4001848:	dc000015 	stw	r16,0(sp)
 400184c:	dfc00115 	stw	ra,4(sp)
 4001850:	2021883a 	mov	r16,r4
 4001854:	4001a040 	call	4001a04 <__call_exitprocs>
 4001858:	8009883a 	mov	r4,r16
 400185c:	4001b940 	call	4001b94 <_exit>

04001860 <memcmp>:
 4001860:	218d883a 	add	r6,r4,r6
 4001864:	21800826 	beq	r4,r6,4001888 <memcmp+0x28>
 4001868:	20800003 	ldbu	r2,0(r4)
 400186c:	28c00003 	ldbu	r3,0(r5)
 4001870:	10c00226 	beq	r2,r3,400187c <memcmp+0x1c>
 4001874:	10c5c83a 	sub	r2,r2,r3
 4001878:	f800283a 	ret
 400187c:	21000044 	addi	r4,r4,1
 4001880:	29400044 	addi	r5,r5,1
 4001884:	003ff706 	br	4001864 <__alt_mem_onchip_memory+0xfbff9864>
 4001888:	0005883a 	mov	r2,zero
 400188c:	f800283a 	ret

04001890 <strlen>:
 4001890:	2005883a 	mov	r2,r4
 4001894:	10c00007 	ldb	r3,0(r2)
 4001898:	18000226 	beq	r3,zero,40018a4 <strlen+0x14>
 400189c:	10800044 	addi	r2,r2,1
 40018a0:	003ffc06 	br	4001894 <__alt_mem_onchip_memory+0xfbff9894>
 40018a4:	1105c83a 	sub	r2,r2,r4
 40018a8:	f800283a 	ret

040018ac <__register_exitproc>:
 40018ac:	00810034 	movhi	r2,1024
 40018b0:	1087b304 	addi	r2,r2,7884
 40018b4:	10c00017 	ldw	r3,0(r2)
 40018b8:	defff904 	addi	sp,sp,-28
 40018bc:	dc000015 	stw	r16,0(sp)
 40018c0:	1c000c17 	ldw	r16,48(r3)
 40018c4:	dd400515 	stw	r21,20(sp)
 40018c8:	dd000415 	stw	r20,16(sp)
 40018cc:	dcc00315 	stw	r19,12(sp)
 40018d0:	dc800215 	stw	r18,8(sp)
 40018d4:	dc400115 	stw	r17,4(sp)
 40018d8:	dfc00615 	stw	ra,24(sp)
 40018dc:	202b883a 	mov	r21,r4
 40018e0:	2823883a 	mov	r17,r5
 40018e4:	3027883a 	mov	r19,r6
 40018e8:	3825883a 	mov	r18,r7
 40018ec:	1029883a 	mov	r20,r2
 40018f0:	8000021e 	bne	r16,zero,40018fc <__register_exitproc+0x50>
 40018f4:	1c000d04 	addi	r16,r3,52
 40018f8:	1c000c15 	stw	r16,48(r3)
 40018fc:	80800117 	ldw	r2,4(r16)
 4001900:	00c007c4 	movi	r3,31
 4001904:	1880110e 	bge	r3,r2,400194c <__register_exitproc+0xa0>
 4001908:	00800034 	movhi	r2,0
 400190c:	10800004 	addi	r2,r2,0
 4001910:	1000021e 	bne	r2,zero,400191c <__register_exitproc+0x70>
 4001914:	00bfffc4 	movi	r2,-1
 4001918:	00003106 	br	40019e0 <__register_exitproc+0x134>
 400191c:	01002304 	movi	r4,140
 4001920:	00000000 	call	0 <__alt_mem_sdram-0x4000000>
 4001924:	1021883a 	mov	r16,r2
 4001928:	103ffa26 	beq	r2,zero,4001914 <__alt_mem_onchip_memory+0xfbff9914>
 400192c:	10000115 	stw	zero,4(r2)
 4001930:	a0800017 	ldw	r2,0(r20)
 4001934:	10c00c17 	ldw	r3,48(r2)
 4001938:	80c00015 	stw	r3,0(r16)
 400193c:	14000c15 	stw	r16,48(r2)
 4001940:	80002215 	stw	zero,136(r16)
 4001944:	a8001d26 	beq	r21,zero,40019bc <__register_exitproc+0x110>
 4001948:	00000606 	br	4001964 <__register_exitproc+0xb8>
 400194c:	a8001b26 	beq	r21,zero,40019bc <__register_exitproc+0x110>
 4001950:	80802217 	ldw	r2,136(r16)
 4001954:	1000091e 	bne	r2,zero,400197c <__register_exitproc+0xd0>
 4001958:	00800034 	movhi	r2,0
 400195c:	10800004 	addi	r2,r2,0
 4001960:	103fec26 	beq	r2,zero,4001914 <__alt_mem_onchip_memory+0xfbff9914>
 4001964:	01004204 	movi	r4,264
 4001968:	00000000 	call	0 <__alt_mem_sdram-0x4000000>
 400196c:	103fe926 	beq	r2,zero,4001914 <__alt_mem_onchip_memory+0xfbff9914>
 4001970:	10004015 	stw	zero,256(r2)
 4001974:	10004115 	stw	zero,260(r2)
 4001978:	80802215 	stw	r2,136(r16)
 400197c:	81400117 	ldw	r5,4(r16)
 4001980:	01000044 	movi	r4,1
 4001984:	2947883a 	add	r3,r5,r5
 4001988:	18c7883a 	add	r3,r3,r3
 400198c:	10c7883a 	add	r3,r2,r3
 4001990:	1cc00015 	stw	r19,0(r3)
 4001994:	2148983a 	sll	r4,r4,r5
 4001998:	11404017 	ldw	r5,256(r2)
 400199c:	290ab03a 	or	r5,r5,r4
 40019a0:	11404015 	stw	r5,256(r2)
 40019a4:	1c802015 	stw	r18,128(r3)
 40019a8:	00c00084 	movi	r3,2
 40019ac:	a8c0031e 	bne	r21,r3,40019bc <__register_exitproc+0x110>
 40019b0:	10c04117 	ldw	r3,260(r2)
 40019b4:	1908b03a 	or	r4,r3,r4
 40019b8:	11004115 	stw	r4,260(r2)
 40019bc:	80800117 	ldw	r2,4(r16)
 40019c0:	10c00044 	addi	r3,r2,1
 40019c4:	10800084 	addi	r2,r2,2
 40019c8:	1085883a 	add	r2,r2,r2
 40019cc:	1085883a 	add	r2,r2,r2
 40019d0:	80c00115 	stw	r3,4(r16)
 40019d4:	80a1883a 	add	r16,r16,r2
 40019d8:	84400015 	stw	r17,0(r16)
 40019dc:	0005883a 	mov	r2,zero
 40019e0:	dfc00617 	ldw	ra,24(sp)
 40019e4:	dd400517 	ldw	r21,20(sp)
 40019e8:	dd000417 	ldw	r20,16(sp)
 40019ec:	dcc00317 	ldw	r19,12(sp)
 40019f0:	dc800217 	ldw	r18,8(sp)
 40019f4:	dc400117 	ldw	r17,4(sp)
 40019f8:	dc000017 	ldw	r16,0(sp)
 40019fc:	dec00704 	addi	sp,sp,28
 4001a00:	f800283a 	ret

04001a04 <__call_exitprocs>:
 4001a04:	defff504 	addi	sp,sp,-44
 4001a08:	dd000515 	stw	r20,20(sp)
 4001a0c:	05010034 	movhi	r20,1024
 4001a10:	dc800315 	stw	r18,12(sp)
 4001a14:	dfc00a15 	stw	ra,40(sp)
 4001a18:	df000915 	stw	fp,36(sp)
 4001a1c:	ddc00815 	stw	r23,32(sp)
 4001a20:	dd800715 	stw	r22,28(sp)
 4001a24:	dd400615 	stw	r21,24(sp)
 4001a28:	dcc00415 	stw	r19,16(sp)
 4001a2c:	dc400215 	stw	r17,8(sp)
 4001a30:	dc000115 	stw	r16,4(sp)
 4001a34:	d9000015 	stw	r4,0(sp)
 4001a38:	2825883a 	mov	r18,r5
 4001a3c:	a507b304 	addi	r20,r20,7884
 4001a40:	a4400017 	ldw	r17,0(r20)
 4001a44:	8cc00c17 	ldw	r19,48(r17)
 4001a48:	8c400c04 	addi	r17,r17,48
 4001a4c:	98004526 	beq	r19,zero,4001b64 <__call_exitprocs+0x160>
 4001a50:	9c000117 	ldw	r16,4(r19)
 4001a54:	00900034 	movhi	r2,16384
 4001a58:	10bfffc4 	addi	r2,r2,-1
 4001a5c:	9d402217 	ldw	r21,136(r19)
 4001a60:	85bfffc4 	addi	r22,r16,-1
 4001a64:	80a1883a 	add	r16,r16,r2
 4001a68:	8421883a 	add	r16,r16,r16
 4001a6c:	8421883a 	add	r16,r16,r16
 4001a70:	ac2f883a 	add	r23,r21,r16
 4001a74:	84000204 	addi	r16,r16,8
 4001a78:	9c21883a 	add	r16,r19,r16
 4001a7c:	b0002716 	blt	r22,zero,4001b1c <__call_exitprocs+0x118>
 4001a80:	90000726 	beq	r18,zero,4001aa0 <__call_exitprocs+0x9c>
 4001a84:	a800041e 	bne	r21,zero,4001a98 <__call_exitprocs+0x94>
 4001a88:	b5bfffc4 	addi	r22,r22,-1
 4001a8c:	bdffff04 	addi	r23,r23,-4
 4001a90:	843fff04 	addi	r16,r16,-4
 4001a94:	003ff906 	br	4001a7c <__alt_mem_onchip_memory+0xfbff9a7c>
 4001a98:	b9002017 	ldw	r4,128(r23)
 4001a9c:	913ffa1e 	bne	r18,r4,4001a88 <__alt_mem_onchip_memory+0xfbff9a88>
 4001aa0:	99000117 	ldw	r4,4(r19)
 4001aa4:	82000017 	ldw	r8,0(r16)
 4001aa8:	213fffc4 	addi	r4,r4,-1
 4001aac:	b100021e 	bne	r22,r4,4001ab8 <__call_exitprocs+0xb4>
 4001ab0:	9d800115 	stw	r22,4(r19)
 4001ab4:	00000106 	br	4001abc <__call_exitprocs+0xb8>
 4001ab8:	80000015 	stw	zero,0(r16)
 4001abc:	403ff226 	beq	r8,zero,4001a88 <__alt_mem_onchip_memory+0xfbff9a88>
 4001ac0:	9f000117 	ldw	fp,4(r19)
 4001ac4:	a8000526 	beq	r21,zero,4001adc <__call_exitprocs+0xd8>
 4001ac8:	00800044 	movi	r2,1
 4001acc:	1592983a 	sll	r9,r2,r22
 4001ad0:	a9404017 	ldw	r5,256(r21)
 4001ad4:	494a703a 	and	r5,r9,r5
 4001ad8:	2800021e 	bne	r5,zero,4001ae4 <__call_exitprocs+0xe0>
 4001adc:	403ee83a 	callr	r8
 4001ae0:	00000906 	br	4001b08 <__call_exitprocs+0x104>
 4001ae4:	a9004117 	ldw	r4,260(r21)
 4001ae8:	4908703a 	and	r4,r9,r4
 4001aec:	2000041e 	bne	r4,zero,4001b00 <__call_exitprocs+0xfc>
 4001af0:	b9400017 	ldw	r5,0(r23)
 4001af4:	d9000017 	ldw	r4,0(sp)
 4001af8:	403ee83a 	callr	r8
 4001afc:	00000206 	br	4001b08 <__call_exitprocs+0x104>
 4001b00:	b9000017 	ldw	r4,0(r23)
 4001b04:	403ee83a 	callr	r8
 4001b08:	99000117 	ldw	r4,4(r19)
 4001b0c:	e13fcc1e 	bne	fp,r4,4001a40 <__alt_mem_onchip_memory+0xfbff9a40>
 4001b10:	89000017 	ldw	r4,0(r17)
 4001b14:	993fdc26 	beq	r19,r4,4001a88 <__alt_mem_onchip_memory+0xfbff9a88>
 4001b18:	003fc906 	br	4001a40 <__alt_mem_onchip_memory+0xfbff9a40>
 4001b1c:	00800034 	movhi	r2,0
 4001b20:	10800004 	addi	r2,r2,0
 4001b24:	10000f26 	beq	r2,zero,4001b64 <__call_exitprocs+0x160>
 4001b28:	99400117 	ldw	r5,4(r19)
 4001b2c:	99000017 	ldw	r4,0(r19)
 4001b30:	2800091e 	bne	r5,zero,4001b58 <__call_exitprocs+0x154>
 4001b34:	20000826 	beq	r4,zero,4001b58 <__call_exitprocs+0x154>
 4001b38:	89000015 	stw	r4,0(r17)
 4001b3c:	a8000226 	beq	r21,zero,4001b48 <__call_exitprocs+0x144>
 4001b40:	a809883a 	mov	r4,r21
 4001b44:	00000000 	call	0 <__alt_mem_sdram-0x4000000>
 4001b48:	9809883a 	mov	r4,r19
 4001b4c:	00000000 	call	0 <__alt_mem_sdram-0x4000000>
 4001b50:	8cc00017 	ldw	r19,0(r17)
 4001b54:	003fbd06 	br	4001a4c <__alt_mem_onchip_memory+0xfbff9a4c>
 4001b58:	9823883a 	mov	r17,r19
 4001b5c:	2027883a 	mov	r19,r4
 4001b60:	003fba06 	br	4001a4c <__alt_mem_onchip_memory+0xfbff9a4c>
 4001b64:	dfc00a17 	ldw	ra,40(sp)
 4001b68:	df000917 	ldw	fp,36(sp)
 4001b6c:	ddc00817 	ldw	r23,32(sp)
 4001b70:	dd800717 	ldw	r22,28(sp)
 4001b74:	dd400617 	ldw	r21,24(sp)
 4001b78:	dd000517 	ldw	r20,20(sp)
 4001b7c:	dcc00417 	ldw	r19,16(sp)
 4001b80:	dc800317 	ldw	r18,12(sp)
 4001b84:	dc400217 	ldw	r17,8(sp)
 4001b88:	dc000117 	ldw	r16,4(sp)
 4001b8c:	dec00b04 	addi	sp,sp,44
 4001b90:	f800283a 	ret

04001b94 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 4001b94:	defffd04 	addi	sp,sp,-12
 4001b98:	df000215 	stw	fp,8(sp)
 4001b9c:	df000204 	addi	fp,sp,8
 4001ba0:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 4001ba4:	0001883a 	nop
 4001ba8:	e0bfff17 	ldw	r2,-4(fp)
 4001bac:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
 4001bb0:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 4001bb4:	10000226 	beq	r2,zero,4001bc0 <_exit+0x2c>
    ALT_SIM_FAIL();
 4001bb8:	002af070 	cmpltui	zero,zero,43969
 4001bbc:	00000106 	br	4001bc4 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
 4001bc0:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 4001bc4:	003fff06 	br	4001bc4 <__alt_mem_onchip_memory+0xfbff9bc4>
